<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>java8新特性Stream流</title>
      <link href="/2022/11/01/stream-liu/"/>
      <url>/2022/11/01/stream-liu/</url>
      
        <content type="html"><![CDATA[<h1 id="1-基本使用案例"><a href="#1-基本使用案例" class="headerlink" title="1.基本使用案例"></a>1.基本使用案例</h1><h4 id="1-1）创建流"><a href="#1-1）创建流" class="headerlink" title="1.1）创建流"></a>1.1）创建流</h4><p>单例集合（重点）：集合对象.stream（）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> lambda01 <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      lambda01 lambda01 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">lambda01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> test <span class="token operator">=</span> lambda01<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> stream <span class="token operator">=</span> test<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stream<span class="token punctuation">.</span><span class="token function">distinct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>i <span class="token operator">-></span> i<span class="token operator">></span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>i<span class="token operator">-></span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> array<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>集合.stream获取流，然后调用distinct去重，filter过滤，最后foreach打印输出流 </li><li>每个流必须有终结操作，列如foreach就是一个终结操作，否则前面的一些过滤将没有意义，方法体将不会执行。</li></ul><p>数组：Arrays.stream（数组）或使用Stream.of创建</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//Arrays是数组工具类</span><span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> stream <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> stream2<span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//方法示例</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">arr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> stream <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>        stream<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>i <span class="token operator">-></span> i<span class="token operator">></span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>ints <span class="token operator">-></span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ints<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>双列集合：转换成单例结合在创建</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> map <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Hashmap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"吕飞扬"</span>，<span class="token number">123</span><span class="token punctuation">)</span>；<span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span><span class="token punctuation">></span></span> stream <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//方法示例</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> map <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"吕飞扬1"</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"吕飞扬2"</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"吕飞扬3"</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span><span class="token punctuation">></span></span> stream <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stream<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>set<span class="token operator">-></span>set<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>set <span class="token operator">-></span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"key是"</span><span class="token operator">+</span>set<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">",value是"</span><span class="token operator">+</span>set<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="2-中间操作"><a href="#2-中间操作" class="headerlink" title="2.中间操作"></a>2.中间操作</h1><h3 id="2-1）filter"><a href="#2-1）filter" class="headerlink" title="2.1）filter"></a>2.1）filter</h3><ul><li>可以对流中的元素进行过滤，符合过滤条件的才能继续留在流中。</li><li>例如 author.stream.filter(author -&gt; author.getAge()&gt;10)    把作者年龄大于10的保留在流中，排除年龄小于等于10的作者</li></ul><h3 id="2-2）map"><a href="#2-2）map" class="headerlink" title="2.2）map"></a>2.2）map</h3><ul><li><p>类型转换</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> map <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"吕飞扬1"</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"吕飞扬2"</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"吕飞扬3"</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>set<span class="token operator">-></span>set<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">//调用map把set类型转换成String类型，在用foreach直接输出，</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>map方法可以多个</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">map<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>set<span class="token operator">-></span>set<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>key<span class="token operator">-></span>key<span class="token operator">+</span><span class="token string">"真帅"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>列如在上述案例中还可以添加map给String类型的key拼接一个真帅</li></ul></li></ul><h3 id="2-3）distinct"><a href="#2-3）distinct" class="headerlink" title="2.3）distinct"></a>2.3）distinct</h3><ul><li>可以除去流中的重复元素</li><li>注意：distinct方法依赖Object的equals方法来判断是否是相同对象的。所以需要注意重写equals方法。</li></ul><h3 id="2-4）sorted"><a href="#2-4）sorted" class="headerlink" title="2.4）sorted"></a>2.4）sorted</h3><ul><li><p>排序：注意需要先去重才能排序</p></li><li><h5 id="第一种（空参sorted）"><a href="#第一种（空参sorted）" class="headerlink" title="第一种（空参sorted）"></a>第一种（空参sorted）</h5><ul><li>如果是排序实体类需要让实体类实现 Comparable&lt;实体类&gt; 接口 重写compareTo方法，在compareTo方法中编写比较逻辑</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token annotation punctuation">@EqualsAndHashCode</span><span class="token annotation punctuation">@ToString</span><span class="token keyword">public</span> <span class="token keyword">class</span> author <span class="token keyword">implements</span> <span class="token class-name">Comparable</span><span class="token generics"><span class="token punctuation">&lt;</span>author<span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> age<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span>author o<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>o<span class="token punctuation">.</span>age<span class="token punctuation">;</span>        <span class="token comment">//如果想降序 return o.getAge()-this.getAge();</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//方法示例</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       author a1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">author</span><span class="token punctuation">(</span><span class="token string">"吕飞扬"</span><span class="token punctuation">,</span> <span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       author b1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">author</span><span class="token punctuation">(</span><span class="token string">"吕飞扬"</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       author c1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">author</span><span class="token punctuation">(</span><span class="token string">"吕飞扬"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span>author<span class="token punctuation">></span></span> list<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>a1<span class="token punctuation">,</span>b1<span class="token punctuation">,</span>c1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">distinct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>author <span class="token operator">-></span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>author<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><h5 id="第二种（有参sorted）"><a href="#第二种（有参sorted）" class="headerlink" title="第二种（有参sorted）"></a>第二种（有参sorted）</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   author a1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">author</span><span class="token punctuation">(</span><span class="token string">"吕飞扬"</span><span class="token punctuation">,</span> <span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    author b1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">author</span><span class="token punctuation">(</span><span class="token string">"吕飞扬"</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    author c1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">author</span><span class="token punctuation">(</span><span class="token string">"吕飞扬"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span>author<span class="token punctuation">></span></span> list<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>a1<span class="token punctuation">,</span>b1<span class="token punctuation">,</span>c1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">distinct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">(</span>author1<span class="token punctuation">,</span>author2<span class="token punctuation">)</span><span class="token operator">-></span>author2<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>author1<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>直接在sorted中重写compareTo匿名内部类，并用lambda表达式来格式转换</li></ul></li></ul><h3 id="2-5）limit"><a href="#2-5）limit" class="headerlink" title="2.5）limit"></a>2.5）limit</h3><ul><li>设置流的最大长度</li><li>stream对象.limit(长度)</li></ul><h3 id="2-6）skip"><a href="#2-6）skip" class="headerlink" title="2.6）skip"></a>2.6）skip</h3><ul><li><p>跳过流中的前n个元素，返回剩下的元素</p></li><li><p>stream对象.skip(个数)</p></li></ul><h3 id="2-7）flatMap"><a href="#2-7）flatMap" class="headerlink" title="2.7）flatMap"></a>2.7）flatMap</h3><ul><li><p>与map相似，格式转换，只不过这个转换完还是用流接收</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> author<span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> age<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">List</span> list<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>适用于这种，对象中带集合或者带对象的，对象为流，对象中的集合和对象中的对象 也可以继续转换成流的形式，我愿称为流中流</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//方法示例</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">flatmap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span>author<span class="token punctuation">></span></span> authors <span class="token operator">=</span> <span class="token function">getauthors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        authors<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span>author <span class="token operator">-></span> author<span class="token punctuation">.</span><span class="token function">getList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">distinct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h1 id="3-终结操作"><a href="#3-终结操作" class="headerlink" title="3.终结操作"></a>3.终结操作</h1><h3 id="3-1）foreach"><a href="#3-1）foreach" class="headerlink" title="3.1）foreach"></a>3.1）foreach</h3><ul><li>循环输出</li></ul><h3 id="3-2）count"><a href="#3-2）count" class="headerlink" title="3.2）count"></a>3.2）count</h3><ul><li>可以用来获取当前流中的元素个数</li></ul><h3 id="3-3）max与min"><a href="#3-3）max与min" class="headerlink" title="3.3）max与min"></a>3.3）max与min</h3><ul><li><p>获取流中最值</p></li><li><p>流对象.max((scorel,scorel)-&gt;score1-score2);</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span>author<span class="token punctuation">></span></span> authors <span class="token operator">=</span> <span class="token function">getAuthors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> max <span class="token operator">=</span> authors<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>author <span class="token operator">-></span> author<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> s2<span class="token punctuation">)</span> <span class="token operator">-></span> s1 <span class="token operator">-</span> s2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>max<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>而我们发现其实用max是单独取这个最大的数值，如果想取这个最大数值的全部作家信息应该用sorted加limit</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">authors<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">(</span>author1<span class="token punctuation">,</span>author2<span class="token punctuation">)</span><span class="token operator">-></span>author2<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>author1<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li></ul><h3 id="3-4）collect"><a href="#3-4）collect" class="headerlink" title="3.4）collect"></a>3.4）collect</h3><ul><li><p>把当前流转换成一个集合</p></li><li><p>参数：</p><ul><li><p>Collectors.toSet()：转换成Set集合</p></li><li><p>Collectors.toList()：转换成List集合</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> list<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> collect <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">distinct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token class-name">Comparator</span><span class="token punctuation">.</span><span class="token function">comparingInt</span><span class="token punctuation">(</span>sorce <span class="token operator">-></span> sorce<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Integer</span> a <span class="token operator">:</span> collect             <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>Collectors.toMap(参数1指定key,参数2指定value)：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">collectMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span>author<span class="token punctuation">></span></span> authors <span class="token operator">=</span> <span class="token function">getAuthors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span> collect <span class="token operator">=</span> authors<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toMap</span><span class="token punctuation">(</span>author <span class="token operator">-></span> author<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> author <span class="token operator">-></span> author<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> mapkey <span class="token operator">=</span> collect<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token operator">:</span>mapkey         <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>key<span class="token operator">+</span><span class="token string">"==========="</span><span class="token operator">+</span>collect<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>注意了map的key是不能重复的</li></ul></li></ul></li></ul><h3 id="3-5）查找与匹配"><a href="#3-5）查找与匹配" class="headerlink" title="3.5）查找与匹配"></a>3.5）查找与匹配</h3><h4 id="3-5-1）anyMatch"><a href="#3-5-1）anyMatch" class="headerlink" title="3.5.1）anyMatch()"></a>3.5.1）anyMatch()</h4><ul><li><p>判断是否都符合匹配条件，结果为boolean类型。如果有一项符合结果为true，否则结果为false</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">authors<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">anyMatch</span><span class="token punctuation">(</span>author<span class="token operator">-></span>author<span class="token punctuation">.</span>getAge<span class="token operator">></span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h4 id="3-5-2）allMatch"><a href="#3-5-2）allMatch" class="headerlink" title="3.5.2）allMatch()"></a>3.5.2）allMatch()</h4><ul><li><p>判断是否全部符合匹配条件，结果为Boolean类型，如果全部符合才为true，否则为false</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">authors<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">allMatch</span><span class="token punctuation">(</span>author<span class="token operator">-></span>author<span class="token punctuation">.</span>getAge<span class="token operator">></span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//方法示例</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">allMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span>author<span class="token punctuation">></span></span> authors <span class="token operator">=</span> <span class="token function">getAuthors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> b <span class="token operator">=</span> authors<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">allMatch</span><span class="token punctuation">(</span>author <span class="token operator">-></span> author<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"结果为"</span><span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="3-5-2）noneMath"><a href="#3-5-2）noneMath" class="headerlink" title="3.5.2）noneMath()"></a>3.5.2）noneMath()</h4><ul><li><p>判断是否都不符合匹配条件，结果为Boolean类型</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">noneMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span>author<span class="token punctuation">></span></span> authors <span class="token operator">=</span> <span class="token function">getAuthors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> b <span class="token operator">=</span> authors<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">noneMatch</span><span class="token punctuation">(</span>author <span class="token operator">-></span> author<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"结果为"</span><span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="3-5-3）findAny"><a href="#3-5-3）findAny" class="headerlink" title="3.5.3）findAny()"></a>3.5.3）findAny()</h4><ul><li><p>获取流中任意一个对象</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Author</span><span class="token punctuation">></span></span> optionalAuthor <span class="token operator">=</span>list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">findAny</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>optionlAuthor<span class="token punctuation">.</span><span class="token function">ifPresent</span><span class="token punctuation">(</span>author<span class="token operator">-></span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>author<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//注意：findAny的流中如果没有数据是获取不到随机数据的</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="3-5-4）findfirst"><a href="#3-5-4）findfirst" class="headerlink" title="3.5.4）findfirst()"></a>3.5.4）findfirst()</h4><ul><li>获取流中第一个</li></ul><h4 id="3-5-5）总结"><a href="#3-5-5）总结" class="headerlink" title="3.5.5）总结"></a>3.5.5）总结</h4><ul><li><p>anyMatch()是只要流内元素有一个满足条件就返回true</p></li><li><p>allMatch()是需要流内所有元素都满足条件才返回true</p></li><li><p>noneMatch()是需要流内所有元素都不满足条件才返回true</p></li><li><p>findAny()是随机获取流中一个元素</p></li><li><p>findfirst()获取流中第一个元素</p></li></ul><h3 id="3-6）reduce归并"><a href="#3-6）reduce归并" class="headerlink" title="3.6）reduce归并"></a>3.6）reduce归并</h3><ul><li><p>对流中的数据按照你指定的计算方式计算出一个结果。（缩减操作）</p></li><li><p>reduce的作用的把stream中的元素给组合起来，我们可以传入一个初始值，它会按照我们的计算方式依次拿流中的元素和在初始化值得基础上进行计算，计算结果再和后面的元素计算。</p></li><li><p>他内部计算方式如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">T</span> result<span class="token operator">=</span>identity<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">T</span> element<span class="token operator">:</span><span class="token keyword">this</span> stream<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>result <span class="token operator">=</span> accumulator<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span>element<span class="token punctuation">)</span>；<span class="token punctuation">&#125;</span><span class="token keyword">return</span> result<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>参数：（变量的初始值，（变量，遍历到的数值）-&gt; 逻辑）</p><ul><li>初始值如果不写则把遍历到的第一个数值作为变量的初始值</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//方法示例</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span>author<span class="token punctuation">></span></span> authors <span class="token operator">=</span> <span class="token function">getAuthors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Integer</span> reduce <span class="token operator">=</span> authors<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>author <span class="token operator">-></span> author<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">distinct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>age1<span class="token punctuation">,</span> age2<span class="token punctuation">)</span> <span class="token operator">-></span> age1 <span class="token operator">+</span> age2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>reduce<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="3-7）注意事项"><a href="#3-7）注意事项" class="headerlink" title="3.7）注意事项"></a>3.7）注意事项</h3><ul><li>惰性求值（如果没有终结操作，没有中间操作是不会的到执行的）</li><li>流是一次性的（一旦一个流对象经过一个终结操作后，这个流就不能在被使用）</li><li>不会影响原数据（我们在流中可以多数据做很多处理，但是正常情况下是不会影响原来集合中的元素的。这往往也是我们期望的）</li></ul><h1 id="4-Optional"><a href="#4-Optional" class="headerlink" title="4.Optional"></a>4.Optional</h1><h3 id="4-1）概述"><a href="#4-1）概述" class="headerlink" title="4.1）概述"></a>4.1）概述</h3><p>我们在编写代码的时候出现最多的就是空指针异常。所以在很多情况下我们需要各种非空判断。</p><p>尤其是对象中的属性还是一个对象的情况下，这种判断会更多</p><p>而过多的判断语句会让我们的代码显得臃肿 不堪</p><p>所以在JDK8中引入了Optional，养成使用Optional的习惯你可以写出更有呀的代码来避免空指针异常</p><h3 id="4-2）使用"><a href="#4-2）使用" class="headerlink" title="4.2）使用"></a>4.2）使用</h3><h4 id="4-2-1）创建对象"><a href="#4-2-1）创建对象" class="headerlink" title="4.2.1）创建对象"></a>4.2.1）创建对象</h4><p>Optional就好像是包装类，可以把我们的具体数据封装Optional对象内部。然后我们去使用Optional中封装好的方法操作封装进去的数值就可以非常有呀的避免空指针异常</p><p>我们一般使用Optional的静态方法ofNullable来把数据封装成一个Optional对象。无论传入的参数是否为null都不会出现问题。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Author</span> author <span class="token operator">=</span> <span class="token function">getAuthor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">OPtional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Author</span><span class="token punctuation">></span></span> authorOptional<span class="token operator">=</span><span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>author<span class="token punctuation">)</span>authorOptional<span class="token punctuation">.</span><span class="token function">ifPresent</span><span class="token punctuation">(</span>author1<span class="token operator">-></span><span class="token class-name">Systemctl</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>author1<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>ifPresent：如果不为空，则执行后续操作</li></ul><p>你可能会觉得还要加一行代码来封装数据比较麻烦，但是如果改造一下getAuthor方法，让其的返回值就是封装好的Optional的话，我们在使用时就会方便很多。</p><p>而且在实际开发中我们的数据很多都是从数据库获取的。Mybatis从3.5版本也已经支持Optional了。我们可以直接把dao方法的返回值类型定义成Optional类型，Mybatis会自己把数据封装成Optional对象返回。封装的过程也不需要我们自己操作。</p><p>​如果你确定一个对象不是空的则可以使用Optional的静态方法of来把数据封装成Optional对象。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Author</span> author <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Author</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Author</span><span class="token punctuation">></span></span> authorOptional <span class="token operator">=</span> <span class="token class-name">Option</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>author<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>ofNullable传入空时不会报错，of方法传入空时会报错</li></ul><h4 id="4-2-2）ifPresent：安全消费值"><a href="#4-2-2）ifPresent：安全消费值" class="headerlink" title="4.2.2）ifPresent：安全消费值"></a>4.2.2）ifPresent：安全消费值</h4><p>我们获取到一个Option对象后肯定需要对其中的数据进行使用，这时候我们可以使用其ifPresent方法来对消费其中的值。</p><p>这个方法会判断其内封装的数据是否为空，不为空时才会执行具体的消费代码，这样使用起来更加安全了。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">authorOptional<span class="token punctuation">.</span><span class="token function">ifPresent</span><span class="token punctuation">(</span>author1<span class="token operator">-></span><span class="token class-name">Systemctl</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>author1<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="4-2-3）获取值"><a href="#4-2-3）获取值" class="headerlink" title="4.2.3）获取值"></a>4.2.3）获取值</h4><p>如果我们想获取值自己进行处理可以使用get方法获取，但是不推荐。因为当Optional内部的数据为空的时候会出现异常。</p><h4 id="4-2-4）安全获取值"><a href="#4-2-4）安全获取值" class="headerlink" title="4.2.4）安全获取值"></a>4.2.4）安全获取值</h4><p>如果我们期望安全的获取值。不推荐使用get方法，而是使用Optional中的其他方法</p><ul><li><p>orElseGet：当Optional中的数据为null时，可以自己设置一个默认值返回</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">orElseGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span>author<span class="token punctuation">></span></span> option <span class="token operator">=</span> <span class="token function">getOption</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//当option中的数据为空时，设置一个author，并且名字为扬哥年龄为22</span>    author elseGet <span class="token operator">=</span> option<span class="token punctuation">.</span><span class="token function">orElseGet</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token keyword">new</span> <span class="token function">author</span><span class="token punctuation">(</span><span class="token string">"扬哥"</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>elseGet<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span>author<span class="token punctuation">></span></span> <span class="token function">getOption</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    author lfy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">author</span><span class="token punctuation">(</span><span class="token string">"吕飞扬"</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//故意传入空值</span>    <span class="token keyword">return</span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>orElseThrow：如果数据不为空就能获取到该数据，如果为空则根据你传入的参数来创建异常抛出</p></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">orElseThrow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span>author<span class="token punctuation">></span></span> option <span class="token operator">=</span> <span class="token function">getOption</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        option<span class="token punctuation">.</span><span class="token function">orElseThrow</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Throwable</span><span class="token punctuation">></span></span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"数据为null"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-2-5）过滤"><a href="#4-2-5）过滤" class="headerlink" title="4.2.5）过滤"></a>4.2.5）过滤</h4><ul><li><p>filter：和stream()流中的使用方法一样</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span>author<span class="token punctuation">></span></span> option <span class="token operator">=</span> <span class="token function">getOption</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       option<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>author <span class="token operator">-></span> author<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ifPresent</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="4-2-6）判断"><a href="#4-2-6）判断" class="headerlink" title="4.2.6）判断"></a>4.2.6）判断</h4><ul><li>isPresent：如果为空范围值为false，如果不为空返回值为true。<strong>更推荐使用ifPresent</strong></li></ul><h1 id="5-函数式接口"><a href="#5-函数式接口" class="headerlink" title="5.函数式接口"></a>5.函数式接口</h1><h3 id="5-1）概述"><a href="#5-1）概述" class="headerlink" title="5.1）概述"></a>5.1）概述</h3><p>​只有一个抽象方法的接口我们称之为函数接口。</p><p>​JDK的函数式接口都加上了@Functionallnterface注解进行表示，但是吴润是否加上该注解只要接口中只有一个抽象方法，都是函数式接口。</p><h3 id="5-2）常见函数式接口"><a href="#5-2）常见函数式接口" class="headerlink" title="5.2）常见函数式接口"></a>5.2）常见函数式接口</h3><ul><li><p>Consumer：消费接口</p></li><li><p>Function：计算转换接口</p></li><li><p>Predicate：判断接口</p></li><li><p>Supplier：生产型接口</p></li></ul><h3 id="5-3）常用的默认方法"><a href="#5-3）常用的默认方法" class="headerlink" title="5.3）常用的默认方法"></a>5.3）常用的默认方法</h3><ul><li><h5 id="and"><a href="#and" class="headerlink" title="and"></a>and</h5></li></ul><p>​我们在使用Predicate接口时候可能需要进行判断条件的拼接，而and方法相当于是使用&amp;&amp;来拼接两个判断条件。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span>author<span class="token punctuation">></span></span> authors <span class="token operator">=</span> <span class="token function">getAuthors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    authors<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Predicate</span><span class="token generics"><span class="token punctuation">&lt;</span>author<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">test</span><span class="token punctuation">(</span>author author<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> author<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">19</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Predicate</span><span class="token generics"><span class="token punctuation">&lt;</span>author<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">test</span><span class="token punctuation">(</span>author author<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> author<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token number">100</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​这个只能使用匿名内部类，不能使用lambda表达式，这样看起来似乎有些鸡肋，但实际上这个and方法并不是这样使用的，<strong>使用and方法更多的是在自己定义匿名内部类的时候</strong></p><ul><li><h5 id="or"><a href="#or" class="headerlink" title="or"></a>or</h5></li></ul><p>​or方法相当于使用||来拼接两个判断条件</p><ul><li><h5 id="negate"><a href="#negate" class="headerlink" title="negate"></a>negate</h5></li></ul><p>​negate方法相当于是在判断添加前面加了个！表示取反</p><h1 id="6-方法引用"><a href="#6-方法引用" class="headerlink" title="6.方法引用"></a>6.方法引用</h1><p>​我们在使用lambda时，如果方法体只有一个方法的调用话（包括构造方法），我们可以用方法引用进一步简化代码。</p><h3 id="6-1）推荐用法"><a href="#6-1）推荐用法" class="headerlink" title="6.1）推荐用法"></a>6.1）推荐用法</h3><p>​我们在使用lambda时不需要考虑什么时候方法引用，用哪种方法引用，方法引用的格式是什么。我们值需要在写完lambda方法发现方法体只有一行代码，并且方法的调用时使用快捷键尝试是否能够转换成方法引用即可。</p><h3 id="6-2）基本格式"><a href="#6-2）基本格式" class="headerlink" title="6.2）基本格式"></a>6.2）基本格式</h3><p>类名或对象名::方法名</p><h3 id="6-3）语法详解（了解）"><a href="#6-3）语法详解（了解）" class="headerlink" title="6.3）语法详解（了解）"></a>6.3）语法详解（了解）</h3><h4 id="6-3-1）引用静态方法"><a href="#6-3-1）引用静态方法" class="headerlink" title="6.3.1）引用静态方法"></a>6.3.1）引用静态方法</h4><p>​其实就是引用类的静态方法</p><p><strong>格式</strong></p><pre class="line-numbers language-none"><code class="language-none">类名::方法名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>使用前提</strong></p><p>​如果我们在重写方法的时候，方法体中只有<strong>一行代码</strong>，并且这行代码是<strong>调用了某个类的静态方法</strong>，并且我们要把重写的<strong>抽象方法中所有的参数都按照顺序传入这个静态方法中</strong>，这个时候我们就可以引用类的静态方法。</p><h4 id="6-3-2）引用对象的实例方法"><a href="#6-3-2）引用对象的实例方法" class="headerlink" title="6.3.2）引用对象的实例方法"></a>6.3.2）引用对象的实例方法</h4><p><strong>格式</strong></p><pre class="line-numbers language-none"><code class="language-none">对象名::方法名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>使用前提</strong></p><p>​如果我们在重写方法的时候，方法体中只有<strong>一行代码，</strong>并且这行代码是<strong>调用了某个对象的成员方法</strong>，并且我们把要重写的抽象方法中<strong>所有的参数都按照顺序传入了这个成员方法中</strong>，这个时候就可以引用对象的实例方法。</p><h4 id="6-3-3）引用类的实例方法"><a href="#6-3-3）引用类的实例方法" class="headerlink" title="6.3.3）引用类的实例方法"></a>6.3.3）引用类的实例方法</h4><p><strong>格式</strong></p><pre class="line-numbers language-none"><code class="language-none">类名::方法名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>使用前提</strong></p><p>​如果我们在重写方法的时候，方法体中只有<strong>一行代码，</strong>并且这行代码是<strong>调用了第一个参数的成员方法</strong>，并且我们把要重写的抽象方法中<strong>剩余的所有的参数都按照顺序传入了这个成员方法中</strong>，这个时候就可以引用类的实例方法。</p><h1 id="7-高级"><a href="#7-高级" class="headerlink" title="7.高级"></a>7.高级</h1><p><strong>基本数据类型优化</strong></p><p>如果我们使用的是包装类，比如Integer</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">authors<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>author<span class="token operator">-></span>author<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>age<span class="token operator">-></span>age<span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">)</span>   <span class="token punctuation">.</span><span class="token function">foeEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>因为我们author中Age是Integer类型的，这里我们把age+10，会触发自动拆箱，如果数据量很大时会影响效率</p><p>所以为了让我们能够对这部分的时间小号进行优化，Stream提供了很多方法</p><p><strong>列如：mapToInt,mapToLong,mapToDouble,flatMapTolnt,flatMapToDouble等。</strong></p><p>上述方法优化</p><pre class="line-numbers language-none"><code class="language-none">authors.stream()   .mapToInt(author-&gt;author.getAge())   .map(age-&gt;age+10)   .foeEach(System.out::println);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-1）并行流"><a href="#7-1）并行流" class="headerlink" title="7.1）并行流"></a>7.1）并行流</h3><p>​当流中有大量元素时，我们可以使用并行流去提高操作的效率，其实并行流就是把任务分配给多个线程去完成。如果我们自己去用代码实现的话会非常复杂，并且要求你对并发编程有足够的理解和认识。而如果我们使用Stream的话，我们值需要修改一个方法的调用就可以使用并行流来帮我们实现，从而提高效率</p><p><strong>用法</strong></p><ul><li><p>paraller:可以把串行流转换成并行流。</p><ul><li><p>stream对象.paraller()</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">paraller</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span>author<span class="token punctuation">></span></span> authors <span class="token operator">=</span> <span class="token function">getAuthors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//两种方法第一种先获取stream对象在调用parallel或者直接调用parallelStream</span><span class="token comment">//    authors.stream().parallel().forEach(System.out::println);</span>    authors<span class="token punctuation">.</span><span class="token function">parallelStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>peek()方法可以查看线程</p></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">paraller</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span>author<span class="token punctuation">></span></span> authors <span class="token operator">=</span> <span class="token function">getAuthors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span>author<span class="token punctuation">></span></span> stream <span class="token operator">=</span> authors<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           stream<span class="token punctuation">.</span><span class="token function">parallel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Consumer</span><span class="token generics"><span class="token punctuation">&lt;</span>author<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>               <span class="token annotation punctuation">@Override</span>               <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">accept</span><span class="token punctuation">(</span>author author<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                   <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>author<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token punctuation">&#125;</span>           <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>author <span class="token operator">-></span> author<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java8 </tag>
            
            <tag> 新特性 </tag>
            
            <tag> 流式编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot</title>
      <link href="/2022/10/29/springboot/"/>
      <url>/2022/10/29/springboot/</url>
      
        <content type="html"><![CDATA[<h1 id="第一章-JavaConfig"><a href="#第一章-JavaConfig" class="headerlink" title="第一章  JavaConfig"></a>第一章  JavaConfig</h1><ul><li><p>为什么要使用 Spring Boot</p><p> 因为Spring， SpringMVC 需要使用的大量的配置文件 （xml文件）</p><p> 还需要配置各种对象，把使用的对象放入到spring容器中才能使用对象</p><p> 需要了解其他框架配置规则。</p></li><li><p>SpringBoot 就相当于 不需要配置文件的Spring+SpringMVC。 常用的框架和第三方库都已经配置好了。</p><p> 拿来就可以使用了。</p></li><li><p>SpringBoot开发效率高，使用方便多了</p></li></ul><h1 id="第二-章-Spring-Boot"><a href="#第二-章-Spring-Boot" class="headerlink" title="第二 章 Spring Boot"></a>第二 章 Spring Boot</h1><h2 id="2-1-介绍"><a href="#2-1-介绍" class="headerlink" title="2.1 介绍"></a>2.1 介绍</h2><p>SpringBoot是Spring中的一个成员， 可以简化Spring，SpringMVC的使用。 他的核心还是IOC容器。</p><p>特点：</p><ul><li><p>Create stand-alone Spring applications</p><p> 创建spring应用</p></li><li><p>Embed Tomcat, Jetty or Undertow directly (no need to deploy WAR files)</p><p>内嵌的tomcat， jetty ， Undertow </p></li><li><p>Provide opinionated ‘starter’ dependencies to simplify your build configuration</p><p>提供了starter起步依赖，简化应用的配置。   </p><p>比如使用MyBatis框架 ， 需要在Spring项目中，配置MyBatis的对象 SqlSessionFactory ， Dao的代理对象</p><p>在SpringBoot项目中，在pom.xml里面, 加入一个 mybatis-spring-boot-starter依赖</p></li><li><p>Automatically configure Spring and 3rd party libraries whenever possible</p><p>尽可能去配置spring和第三方库。叫做自动配置（就是把spring中的，第三方库中的对象都创建好，放到容器中， 开发人员可以直接使用）</p></li><li><p>Provide production-ready features such as metrics, health checks, and externalized configuration</p><p> 提供了健康检查， 统计，外部化配置</p></li><li><p>Absolutely no code generation and no requirement for XML configuration</p><p>不用生成代码， 不用使用xml，做配置</p></li></ul><h2 id="2-2-创建Spring-Boot项目"><a href="#2-2-创建Spring-Boot项目" class="headerlink" title="2.2 创建Spring Boot项目"></a>2.2 创建Spring Boot项目</h2><h3 id="2-2-1-第一种方式，-使用Spring提供的初始化器，-就是向导创建SpringBoot应用"><a href="#2-2-1-第一种方式，-使用Spring提供的初始化器，-就是向导创建SpringBoot应用" class="headerlink" title="2.2.1 第一种方式， 使用Spring提供的初始化器， 就是向导创建SpringBoot应用"></a>2.2.1 第一种方式， 使用Spring提供的初始化器， 就是向导创建SpringBoot应用</h3><p>使用的地址： <a href="https://start.spring.io/">https://start.spring.io</a></p><p>SpringBoot项目的结构：</p><h3 id="2-2-1-使用国内的地址"><a href="#2-2-1-使用国内的地址" class="headerlink" title="2.2.1  使用国内的地址"></a>2.2.1  使用国内的地址</h3><p><a href="https://start.springboot.io/">https://start.springboot.io</a></p><h2 id="2-3-注解的使用"><a href="#2-3-注解的使用" class="headerlink" title="2.3  注解的使用"></a>2.3  注解的使用</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span>符合注解：由<span class="token annotation punctuation">@SpringBootConfiguration</span><span class="token annotation punctuation">@EnableAutoConfiguration</span><span class="token annotation punctuation">@ComponentScan</span>        <span class="token number">1.</span>@<span class="token class-name">SpringBootConfiguration</span>    <span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">SpringBootConfiguration</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@AliasFor</span><span class="token punctuation">(</span>        annotation <span class="token operator">=</span> <span class="token class-name">Configuration</span><span class="token punctuation">.</span><span class="token keyword">class</span>    <span class="token punctuation">)</span>    <span class="token keyword">boolean</span> <span class="token function">proxyBeanMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>说明：使用了<span class="token annotation punctuation">@SpringBootConfiguration</span>注解标注的类，可以作为配置文件使用的，    可以使用<span class="token class-name">Bean</span>声明对象，注入到容器<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.@EnableAutoConfiguration</p><p>启用自动配置， 把java对象配置好，注入到spring容器中。例如可以把mybatis的对象创建好，放入到容器中</p><p>3.@ComponentScan</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@ComponentScan</span> 扫描器，找到注解，根据注解的功能创建对象，给属性赋值等等。默认扫描的包： <span class="token annotation punctuation">@ComponentScan</span>所在的类所在的包和子包。    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="2-4-SpringBoot的配置文件"><a href="#2-4-SpringBoot的配置文件" class="headerlink" title="2.4 SpringBoot的配置文件"></a>2.4 SpringBoot的配置文件</h2><p>配置文件名称： application</p><p>扩展名有： properties( k&#x3D;v) ;  yml ( k: v)</p><p>使用application.properties,   application.yml</p><p>例1：application.properties设置 端口和上下文</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">#设置端口号server.port=8082#设置访问应用上下文路径， contextpathserver.servlet.context-path=/myboot<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>例2： application.yml</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8083</span>  <span class="token key atrule">servlet</span><span class="token punctuation">:</span>    <span class="token key atrule">context-path</span><span class="token punctuation">:</span> /myboot2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-5-多环境配置"><a href="#2-5-多环境配置" class="headerlink" title="2.5 多环境配置"></a>2.5 多环境配置</h2><p>有开发环境， 测试环境， 上线的环境。</p><p>每个环境有不同的配置信息， 例如端口， 上下文件， 数据库url，用户名，密码等等</p><p>使用多环境配置文件，可以方便的切换不同的配置。</p><p>使用方式： 创建多个配置文件， 名称规则： application-环境名称.properties(yml)</p><p>创建开发环境的配置文件： application-dev.properties(  application-dev.yml )</p><p>创建测试者使用的配置： application-test.properties</p><h2 id="2-6-ConfigurationProperties"><a href="#2-6-ConfigurationProperties" class="headerlink" title="2.6 @ConfigurationProperties"></a>2.6 @ConfigurationProperties</h2><p>@ConfigurationProperties: 把配置文件的数据映射为java对象。</p><p>属性：prefix 配置文件中的某些key的开头的内容。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"school"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SchoolInfo</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> website<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> address<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getWebsite</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> website<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setWebsite</span><span class="token punctuation">(</span><span class="token class-name">String</span> website<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>website <span class="token operator">=</span> website<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> address<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAddress</span><span class="token punctuation">(</span><span class="token class-name">String</span> address<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>address <span class="token operator">=</span> address<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"SchoolInfo&#123;"</span> <span class="token operator">+</span>                <span class="token string">"name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token char">'\''</span> <span class="token operator">+</span>                <span class="token string">", website='"</span> <span class="token operator">+</span> website <span class="token operator">+</span> <span class="token char">'\''</span> <span class="token operator">+</span>                <span class="token string">", address='"</span> <span class="token operator">+</span> address <span class="token operator">+</span> <span class="token char">'\''</span> <span class="token operator">+</span>                <span class="token char">'&#125;'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>application.properties</p><pre class="line-numbers language-pro" data-language="pro"><code class="language-pro">#配置端口号server.port&#x3D;8082#context-pathserver.servlet.context-path&#x3D;&#x2F;myboot#自定义key&#x3D;valueschool.name&#x3D;动力节点school.website&#x3D;www.bjpowernode.comschool.address&#x3D;北京的大兴区site&#x3D;www.bjpowernode.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-7-使用jsp"><a href="#2-7-使用jsp" class="headerlink" title="2.7  使用jsp"></a>2.7  使用jsp</h2><p>SpringBoot不推荐使用jsp ，而是使用模板技术代替jsp</p><p>使用jsp需要配置：</p><p>1） 加入一个处理jsp的依赖。 负责编译jsp文件</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.tomcat.embed<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>tomcat-embed-jasper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>如果需要使用servlet， jsp，jstl的功能</li></ol><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jstl<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>javax.servlet-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.servlet.jsp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>javax.servlet.jsp-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.3.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>创建一个存放jsp的目录，一般叫做webapp</li></ol><p>​    index.jsp</p><ol start="4"><li>需要在pom.xml指定jsp文件编译后的存放目录。</li></ol><p>  META-INF&#x2F;resources</p><p>5）创建Controller， 访问jsp</p><p>6）在application.propertis文件中配置视图解析器</p><h2 id="2-8-使用容器"><a href="#2-8-使用容器" class="headerlink" title="2.8 使用容器"></a>2.8 使用容器</h2><p>你想通过代码，从容器中获取对象。</p><p>通过SpringApplication.run(Application.class, args); 返回值获取容器。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">ConfigurableApplicationContext</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> primarySource<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span>primarySource<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">ConfigurableApplicationContext</span> <span class="token operator">:</span> 接口，是<span class="token class-name">ApplicationContext</span>的子接口<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ConfigurableApplicationContext</span> <span class="token keyword">extends</span> <span class="token class-name">ApplicationContext</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-9-ComnandLineRunner-接口-，-ApplcationRunner接口"><a href="#2-9-ComnandLineRunner-接口-，-ApplcationRunner接口" class="headerlink" title="2.9 ComnandLineRunner 接口 ，  ApplcationRunner接口"></a>2.9 ComnandLineRunner 接口 ，  ApplcationRunner接口</h2><p>这两个接口都 有一个run方法。 执行时间在容器对象创建好后， 自动执行run（）方法。</p><p>可以完成自定义的在容器对象创建好的一些操作。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@FunctionalInterface</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">CommandLineRunner</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@FunctionalInterface</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ApplicationRunner</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">ApplicationArguments</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="第三章-Web组件"><a href="#第三章-Web组件" class="headerlink" title="第三章 Web组件"></a>第三章 Web组件</h1><p>讲三个内容： 拦截器， Servlet ，Filter</p><h2 id="3-1-拦截器"><a href="#3-1-拦截器" class="headerlink" title="3.1 拦截器"></a>3.1 拦截器</h2><p>拦截器是SpringMVC中一种对象，能拦截器对Controller的请求。</p><p>拦截器框架中有系统的拦截器， 还可以自定义拦截器。  实现对请求预先处理。</p><p>实现自定义拦截器：</p><ol><li><p>创建类实现SpringMVC框架的HandlerInterceptor接口</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">HandlerInterceptor</span> <span class="token punctuation">&#123;</span> <span class="token keyword">default</span> <span class="token keyword">boolean</span> <span class="token function">preHandle</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">Object</span> handler<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">postHandle</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">Object</span> handler<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">ModelAndView</span> modelAndView<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span> <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">afterCompletion</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">Object</span> handler<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><p>2.需在SpringMVC的配置文件中，声明拦截器</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>interceptors</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>interceptor</span><span class="token punctuation">></span></span>    &lt;mvc:path="url" />        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>拦截器类全限定名称<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>interceptor</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>interceptors</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>SpringBoot中注册拦截器：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyAppConfig</span> <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//添加拦截器对象， 注入到容器中</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addInterceptors</span><span class="token punctuation">(</span><span class="token class-name">InterceptorRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//创建拦截器对象</span>        <span class="token class-name">HandlerInterceptor</span> interceptor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LoginInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//指定拦截的请求uri地址</span>        <span class="token class-name">String</span> path <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"/user/**"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token comment">//指定不拦截的地址</span>        <span class="token class-name">String</span> excludePath  <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"/user/login"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        registry<span class="token punctuation">.</span><span class="token function">addInterceptor</span><span class="token punctuation">(</span>interceptor<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">addPathPatterns</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">excludePathPatterns</span><span class="token punctuation">(</span>excludePath<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-2-Servlet"><a href="#3-2-Servlet" class="headerlink" title="3.2  Servlet"></a>3.2  Servlet</h2><p>在SpringBoot框架中使用Servlet对象。</p><p>使用步骤：</p><ol><li>创建Servlet类。 创建类继承HttpServlet</li><li>注册Servlet ，让框架能找到Servlet</li></ol><p> 例子：</p><p>1.创建自定义Servlet</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//创建Servlet类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token function">doPost</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>resp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>       <span class="token comment">//使用HttpServletResponse输出数据，应答结果</span>        resp<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"text/html;charset=utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">PrintWriter</span> out  <span class="token operator">=</span> resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"===执行的是Servlet=="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        out<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        out<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>注册Servlet</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebApplictionConfig</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//定义方法， 注册Servlet对象</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">ServletRegistrationBean</span> <span class="token function">servletRegistrationBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//public ServletRegistrationBean(T servlet, String... urlMappings)</span>        <span class="token comment">//第一个参数是 Servlet对象， 第二个是url地址</span>        <span class="token comment">//ServletRegistrationBean bean =</span>                <span class="token comment">//new ServletRegistrationBean( new MyServlet(),"/myservlet");</span>        <span class="token class-name">ServletRegistrationBean</span> bean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServletRegistrationBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bean<span class="token punctuation">.</span><span class="token function">setServlet</span><span class="token punctuation">(</span> <span class="token keyword">new</span> <span class="token class-name">MyServlet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bean<span class="token punctuation">.</span><span class="token function">addUrlMappings</span><span class="token punctuation">(</span><span class="token string">"/login"</span><span class="token punctuation">,</span><span class="token string">"/test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &lt;url-pattern></span>        <span class="token keyword">return</span> bean<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-3-过滤器Filter"><a href="#3-3-过滤器Filter" class="headerlink" title="3.3 过滤器Filter"></a>3.3 过滤器Filter</h2><p>Filter是Servlet规范中的过滤器，可以处理请求， 对请求的参数， 属性进行调整。 常常在过滤器中处理字符编码</p><p>在框架中使用过滤器：</p><ol><li>创建自定义过滤器类</li><li>注册Filter过滤器对象</li></ol><p>例子：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 自定义过滤器</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyFilter</span> <span class="token keyword">implements</span> <span class="token class-name">Filter</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> servletRequest<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> servletResponse<span class="token punctuation">,</span> <span class="token class-name">FilterChain</span> filterChain<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ServletException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行了MyFilter，doFilter "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        filterChain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>servletRequest<span class="token punctuation">,</span>servletResponse<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注册Filter</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebApplicationConfig</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">FilterRegistrationBean</span> <span class="token function">filterRegistrationBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">FilterRegistrationBean</span> bean  <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FilterRegistrationBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bean<span class="token punctuation">.</span><span class="token function">setFilter</span><span class="token punctuation">(</span> <span class="token keyword">new</span> <span class="token class-name">MyFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bean<span class="token punctuation">.</span><span class="token function">addUrlPatterns</span><span class="token punctuation">(</span><span class="token string">"/user/*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> bean<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-4-字符集过滤器"><a href="#3-4-字符集过滤器" class="headerlink" title="3.4 字符集过滤器"></a>3.4 字符集过滤器</h2><p>CharacterEncodingFilter : 解决post请求中乱码的问题</p><p>在SpringMVC框架， 在web.xml 注册过滤器。 配置他的属性。 </p><p>第一种方式：</p><p>使用步骤：</p><ol><li><p>配置字符集过滤器</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebSystemConfig</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//注册Servlet</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">ServletRegistrationBean</span> <span class="token function">servletRegistrationBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">MyServlet</span> myServlet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyServlet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ServletRegistrationBean</span> reg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServletRegistrationBean</span><span class="token punctuation">(</span>myServlet<span class="token punctuation">,</span><span class="token string">"/myservlet"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> reg<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//注册Filter</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">FilterRegistrationBean</span> <span class="token function">filterRegistrationBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">FilterRegistrationBean</span> reg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FilterRegistrationBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//使用框架中的过滤器类</span>        <span class="token class-name">CharacterEncodingFilter</span> filter  <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CharacterEncodingFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//指定使用的编码方式</span>        filter<span class="token punctuation">.</span><span class="token function">setEncoding</span><span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//指定request ， response都使用encoding的值</span>        filter<span class="token punctuation">.</span><span class="token function">setForceEncoding</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        reg<span class="token punctuation">.</span><span class="token function">setFilter</span><span class="token punctuation">(</span>filter<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//指定 过滤的url地址</span>        reg<span class="token punctuation">.</span><span class="token function">addUrlPatterns</span><span class="token punctuation">(</span><span class="token string">"/*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> reg<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>修改application.properties文件， 让自定义的过滤器起作用</p></li></ol><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token comment">#SpringBoot中默认已经配置了CharacterEncodingFilter。 编码默认ISO-8859-1</span><span class="token comment">#设置enabled=false 作用是关闭系统中配置好的过滤器， 使用自定义的CharacterEncodingFilter</span><span class="token key attr-name">server.servlet.encoding.enabled</span><span class="token punctuation">=</span><span class="token value attr-value">false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>第二种方式</p><p>修改application.properties文件</p><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token key attr-name">server.port</span><span class="token punctuation">=</span><span class="token value attr-value">9001</span><span class="token key attr-name">server.servlet.context-path</span><span class="token punctuation">=</span><span class="token value attr-value">/myboot</span><span class="token comment">#让系统的CharacterEncdoingFilter生效</span><span class="token key attr-name">server.servlet.encoding.enabled</span><span class="token punctuation">=</span><span class="token value attr-value">true</span><span class="token comment">#指定使用的编码方式</span><span class="token key attr-name">server.servlet.encoding.charset</span><span class="token punctuation">=</span><span class="token value attr-value">utf-8</span><span class="token comment">#强制request，response都使用charset属性的值</span><span class="token key attr-name">server.servlet.encoding.force</span><span class="token punctuation">=</span><span class="token value attr-value">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="第四章-ORM-操作-MySQL"><a href="#第四章-ORM-操作-MySQL" class="headerlink" title="第四章 ORM 操作 MySQL"></a>第四章 ORM 操作 MySQL</h1><p>使用MyBatis框架操作数据，  在SpringBoot框架集成MyBatis</p><p>使用步骤：</p><ol><li><p>mybatis起步依赖 ： 完成mybatis对象自动配置， 对象放在容器中</p></li><li><p>pom.xml 指定把src&#x2F;main&#x2F;java目录中的xml文件包含到classpath中</p></li><li><p>创建实体类Student</p></li><li><p>创建Dao接口 StudentDao , 创建一个查询学生的方法 </p></li><li><p>创建Dao接口对应的Mapper文件， xml文件， 写sql语句</p></li><li><p>创建Service层对象， 创建StudentService接口和他的实现类。 去dao对象的方法。完成数据库的操作</p></li><li><p>创建Controller对象，访问Service。</p></li><li><p>写application.properties文件</p><p>配置数据库的连接信息。</p></li></ol><h3 id="第一种方式-：-Mapper"><a href="#第一种方式-：-Mapper" class="headerlink" title="第一种方式 ： @Mapper"></a>第一种方式 ： @Mapper</h3><p>@Mapper：放在dao接口的上面， 每个接口都需要使用这个注解。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @Mapper：告诉MyBatis这是dao接口，创建此接口的代理对象。 *     位置：在类的上面 */</span><span class="token annotation punctuation">@Mapper</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">StudentDao</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Student</span> <span class="token function">selectById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"stuId"</span><span class="token punctuation">)</span> <span class="token class-name">Integer</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第二种方式-MapperScan"><a href="#第二种方式-MapperScan" class="headerlink" title="第二种方式  @MapperScan"></a>第二种方式  @MapperScan</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @MapperScan: 找到Dao接口和Mapper文件 *     basePackages：Dao接口所在的包名 */</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@MapperScan</span><span class="token punctuation">(</span>basePackages <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"com.bjpowernode.dao"</span><span class="token punctuation">,</span><span class="token string">"com.bjpowernode.mapper"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Application</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第三种方式：-Mapper文件和Dao接口分开管理"><a href="#第三种方式：-Mapper文件和Dao接口分开管理" class="headerlink" title="第三种方式： Mapper文件和Dao接口分开管理"></a>第三种方式： Mapper文件和Dao接口分开管理</h3><p> 现在把Mapper文件放在resources目录下</p><p>1）在resources目录中创建子目录 （自定义的） ， 例如mapper</p><p>2）把mapper文件放到 mapper目录中</p><p>3）在application.properties文件中，指定mapper文件的目录</p><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token comment">#指定mapper文件的位置</span><span class="token key attr-name">mybatis.mapper-locations</span><span class="token punctuation">=</span><span class="token value attr-value">classpath:mapper/*.xml</span><span class="token comment">#指定mybatis的日志</span><span class="token key attr-name">mybatis.configuration.log-impl</span><span class="token punctuation">=</span><span class="token value attr-value">org.apache.ibatis.logging.stdout.StdOutImpl</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li>在pom.xml中指定 把resources目录中的文件 ， 编译到目标目录中</li></ol><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--resources插件--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resources</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">></span></span>src/main/resources<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includes</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>includes</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resources</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第四个-事务"><a href="#第四个-事务" class="headerlink" title="第四个  事务"></a>第四个  事务</h3><p>Spring框架中的事务：</p><p>1） 管理事务的对象： 事务管理器（接口， 接口有很多的实现类）</p><p>​      例如：使用Jdbc或mybatis访问数据库，使用的事务管理器：DataSourceTransactionManager</p><p>2 ) 声明式事务：  在xml配置文件或者使用注解说明事务控制的内容</p><p>​     控制事务： 隔离级别，传播行为， 超时时间</p><p>3）事务处理方式：</p><p>​      1） Spring框架中的@Transactional</p><p>​      2)    aspectj框架可以在xml配置文件中，声明事务控制的内容</p><p>​    </p><p>SpringBoot中使用事务： 上面的两种方式都可以。</p><p>1）在业务方法的上面加入@Transactional ,  加入注解后，方法有事务功能了。</p><p>2）明确的在 主启动类的上面 ，加入@EnableTransactionManager</p><p>例子：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @Transactional: 表示方法的有事务支持 *       默认：使用库的隔离级别， REQUIRED 传播行为； 超时时间  -1 *       抛出运行时异常，回滚事务 */</span><span class="token annotation punctuation">@Transactional</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">addStudent</span><span class="token punctuation">(</span><span class="token class-name">Student</span> student<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"业务方法addStudent"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> rows  <span class="token operator">=</span>  studentDao<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行sql语句"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//抛出一个运行时异常， 目的是回滚事务</span>    <span class="token comment">//int m   = 10 / 0 ;</span>    <span class="token keyword">return</span> rows<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="第五章-接口架构风格-—RESTful"><a href="#第五章-接口架构风格-—RESTful" class="headerlink" title="第五章 接口架构风格 —RESTful"></a>第五章 接口架构风格 —RESTful</h1><p>接口： API（Application Programming Interface，应用程序接口）是一些预先定义的接口（如函数、HTTP接口），或指<a href="https://baike.baidu.com/item/%E8%BD%AF%E4%BB%B6%E7%B3%BB%E7%BB%9F/224122">软件系统</a>不同组成部分衔接的约定。 用来提供<a href="https://baike.baidu.com/item/%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F">应用程序</a>与开发人员基于某<a href="https://baike.baidu.com/item/%E8%BD%AF%E4%BB%B6">软件</a>或硬件得以访问的一组<a href="https://baike.baidu.com/item/%E4%BE%8B%E7%A8%8B/2390628">例程</a>，而又无需访问源码，或理解内部<a href="https://baike.baidu.com/item/%E5%B7%A5%E4%BD%9C%E6%9C%BA%E5%88%B6/9905789">工作机制</a>的细节。</p><p>接口（API）： 可以指访问servlet， controller的url，   调用其他程序的 函数</p><p>架构风格： api组织方式（样子）</p><p>   就是一个传统的：    <a href="http://localhost:9002/mytrans/addStudent?name=lisi&amp;age=26">http://localhost:9002/mytrans/addStudent?name=lisi&amp;age=26</a> </p><p>​                                      在地址上提供了 访问的资源名称addStudent, 在其后使用了get方式传递参数。</p><h3 id="5-1-REST"><a href="#5-1-REST" class="headerlink" title="5.1  REST"></a>5.1  REST</h3><p>RESTful架构风格</p><p>1)REST :  （英文： Representational State Transfer , 中文： 表现层状态转移)。</p><p>   REST：是一种接口的架构风格和设计的理念，不是标准。</p><p>   优点： 更简洁，更有层次</p><p>   表现层状态转移: </p><p>​         表现层就是视图层， 显示资源的， 通过视图页面，jsp等等显示操作资源的结果。</p><p>​          状态： 资源变化</p><p>​         转移： 资源可以变化的。 资源能创建，new状态，  资源创建后可以查询资源， 能看到资源的内容，</p><p>这个资源内容 ，可以被修改， 修改后资源 和之前的不一样。  </p><p>2）REST中的要素：</p><p>   用REST表示资源和对资源的操作。  在互联网中，表示一个资源或者一个操作。 </p><p>   资源使用url表示的， 在互联网， 使用的图片，视频， 文本，网页等等都是资源。</p><p>   资源是用名词表示。</p><p>  对资源： </p><p>​        查询资源： 看，通过url找到资源。 </p><p>​        创建资源： 添加资源</p><p>​        更新资源：更新资源 ，编辑</p><p>​        删除资源： 去除</p><p>​       </p><p> 资源使用url表示，通过名词表示资源。</p><p>​     在url中，使用名词表示资源， 以及访问资源的信息,  在url中，使用“ &#x2F; “ 分隔对资源的信息</p><p>​     <a href="http://localhost:8080/myboot/student/1001">http://localhost:8080/myboot/student/1001</a></p><p> 使用http中的动作（请求方式）， 表示对资源的操作（CURD）</p><p>   GET:  查询资源  –  sql select</p><p>​                 处理单个资源： 用他的单数方式</p><p>​                  <a href="http://localhost:8080/myboot/student/1001">http://localhost:8080/myboot/student/1001</a></p><p>​                 <a href="http://localhost:8080/myboot/student/1001/1">http://localhost:8080/myboot/student/1001/1</a></p><p>​                处理多个资源：使用复数形式</p><p>​                  <a href="http://localhost:8080/myboot/students/1001/1002">http://localhost:8080/myboot/students/1001/1002</a></p><p>​                </p><p>   POST: 创建资源  – sql insert</p><p>​                <a href="http://localhost:8080/myboot/student">http://localhost:8080/myboot/student</a></p><p>​                在post请求中传递数据</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://localhost:8080/myboot/student<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>姓名：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    年龄：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>   PUT： 更新资源  –  sql  update</p>   <pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://localhost:8080/myboot/student/1<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>姓名：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    年龄：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>_method<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>PUT<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>   DELETE: 删除资源  – sql delete</p><pre><code><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://localhost:8080/myboot/student/1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>删除1的数据<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none"> 需要的分页，  排序等参数，依然放在  url的后面， 例如  http:&#x2F;&#x2F;localhost:8080&#x2F;myboot&#x2F;students?page&#x3D;1&amp;pageSize&#x3D;20   &#96;  3） 一句话说明REST： ​    使用url表示资源 ，使用http动作操作资源。4) 注解  @PathVariable :  从url中获取数据  @GetMapping:    支持的get请求方式，  等同于 @RequestMapping( method&#x3D;RequestMethod.GET)  @PostMapping:  支持post请求方式 ，等同于 @RequestMapping( method&#x3D;RequestMethod.POST)  @PutMapping:  支持put请求方式，  等同于 @RequestMapping( method&#x3D;RequestMethod.PUT)   @DeleteMapping: 支持delete请求方式，  等同于 @RequestMapping( method&#x3D;RequestMethod.DELETE)    @RestController:  符合注解， 是@Controller 和@ResponseBody组合。​               在类的上面使用@RestController ， 表示当前类者的所有方法都加入了 @ResponseBody5) Postman : 测试工具   使用Postman : 可以测试 get ，post ， put ，delete 等请求### 5.2  在页面中或者ajax中，支持put，delete请求在SpringMVC中 有一个过滤器， 支持post请求转为put ,delete过滤器： org.springframework.web.filter.HiddenHttpMethodFilter作用： 把请求中的post请求转为 put ， delete实现步骤：1. application.properties(yml) : 开启使用 HiddenHttpMethodFilter 过滤器2. 在请求页面中，包含 _method参数， 他的值是 put， delete  ，  发起这个请求使用的post方式# 第六章 RedisRedis ： 一个NoSQL数据库，  常用作 缓存使用 （cache）Redis的数据类型： string  ,  hash  ,set  ,zset , listRedis是一个中间件： 是一个独立的服务器。java中著名的客户端： Jedis ，  lettuce ， RedissonSpring,SpringBoot中有 一个RedisTemplate（StringRedisTemplate） ，处理和redis交互  ## 6.1  配置Windows版本的redisRedis-x64-3.2.100.rar 解压缩到一个 非中文 的目录redis-server.exe：服务端， 启动后，不要关闭redis-cli.exe：客户端， 访问redis中的数据redisclient-win32.x86_64.2.0.jar : Redis图形界面客户端执行方式： 在这个文件所在的目录，  执行 java -jar redisclient-win32.x86_64.2.0.jarRedisTemplate 使用的  lettuce 客户端库&#96;&#96;&#96;xml&lt;!--redis起步依赖： 直接在项目中使用RedisTemplate(StringRedisTemplate)--&gt;&lt;dependency&gt;   &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;   &lt;artifactId&gt;spring-boot-starter-data-redis&lt;&#x2F;artifactId&gt;&lt;&#x2F;dependency&gt;data-redis使用的   lettuce 客户端库在程序中使用RedisTemplate类的方法 操作redis数据， 实际就是调用的lettuce 客户端的中的方法<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></code></pre><h2 id="6-2-对比-StringRedisTemplate-和-RedisTemplate"><a href="#6-2-对比-StringRedisTemplate-和-RedisTemplate" class="headerlink" title="6.2 对比 StringRedisTemplate 和 RedisTemplate"></a>6.2 对比 StringRedisTemplate 和 RedisTemplate</h2><p>StringRedisTemplate ： 把k，v 都是作为String处理， 使用的是String的序列化 ， 可读性好</p><p>RedisTemplate ： 把k，v 经过了序列化存到redis。 k，v 是序列化的内容， 不能直接识别.</p><p>​                                 默认使用的jdk序列化， 可以修改为前提的序列化</p><p> 序列化：把对象转化为可传输的字节序列过程称为序列化。</p><p>反序列化：把字节序列还原为对象的过程称为反序列化。</p><p>为什么需要序列化</p><p>序列化最终的目的是为了对象可以跨平台存储，和进行网络传输。而我们进行跨平台存储和网络传输的方式就是IO，而我们的IO支持的数据格式就是字节数组。我们必须在把对象转成字节数组的时候就制定一种规则（序列化），那么我们从IO流里面读出数据的时候再以这种规则把对象还原回来（反序列化）。</p><p>什么情况下需要序列化</p><p>通过上面我想你已经知道了凡是需要进行“跨平台存储”和”网络传输”的数据，都需要进行序列化。</p><p>本质上存储和网络传输 都需要经过 把一个对象状态保存成一种跨平台识别的字节格式，然后其他的平台才可以通过字节信息解析还原对象信息。</p><p>序列化的方式</p><p>序列化只是一种拆装组装对象的规则，那么这种规则肯定也可能有多种多样，比如现在常见的序列化方式有：</p><p>JDK（不支持跨语言）、JSON、XML、Hessian、Kryo（不支持跨语言）、Thrift、Protofbuff、</p><p>Student( name&#x3D;zs, age&#x3D;20)   —-  { “name”:”zs”, “age”:20 }</p><p>java的序列化： 把java对象转为byte[], 二进制数据</p><p>json序列化：json序列化功能将对象转换为 JSON 格式或从 JSON 格式转换对象。例如把一个Student对象转换为JSON字符串{“name”:”李四”, “age”:29} )，反序列化(将JSON字符串 {“name”:”李四”, “age”:29} 转换为Student对象)</p><p>设置key或者value的序列化方式</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 使用RedisTemplate ，在存取值之前，设置序列化</span><span class="token comment">// 设置 key 使用String的序列化</span>redisTemplate<span class="token punctuation">.</span><span class="token function">setKeySerializer</span><span class="token punctuation">(</span> <span class="token keyword">new</span> <span class="token class-name">StringRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 设置 value 的序列化</span>redisTemplate<span class="token punctuation">.</span><span class="token function">setValueSerializer</span><span class="token punctuation">(</span> <span class="token keyword">new</span> <span class="token class-name">StringRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="第八章-打包"><a href="#第八章-打包" class="headerlink" title="第八章  打包"></a>第八章  打包</h1><h2 id="8-1-打包war"><a href="#8-1-打包war" class="headerlink" title="8.1 打包war"></a>8.1 打包war</h2><p>1.创建了一个jsp应用</p><p>2.修改pom.xml</p><p> 1)指定打包后的文件名称</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>   <span class="token comment">&lt;!--打包后的文件名称--></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>finalName</span><span class="token punctuation">></span></span>myboot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>finalName</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>2)指定jsp编译目录</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--resources插件， 把jsp编译到指定的目录--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resources</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">></span></span>src/main/webapp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>targetPath</span><span class="token punctuation">></span></span>META-INF/resources<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>targetPath</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includes</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>includes</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">></span></span>   <span class="token comment">&lt;!--使用了mybatis ，而且mapper文件放在src/main/java目录--></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">></span></span>src/main/java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includes</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>includes</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">></span></span>   <span class="token comment">&lt;!--把src/main/resources下面的所有文件，都包含到classes目录--></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">></span></span>src/main/resources<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includes</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>includes</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resources</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3）执行打包是war</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--打包类型--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>packaging</span><span class="token punctuation">></span></span>war<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>packaging</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>4）主启动类继承SpringBootServletInitializer</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * SpringBootServletInitializer: 继承这个类， 才能使用独立tomcat服务器 */</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JspApplication</span>  <span class="token keyword">extends</span> <span class="token class-name">SpringBootServletInitializer</span>  <span class="token punctuation">&#123;</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">JspApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token annotation punctuation">@Override</span>   <span class="token keyword">protected</span> <span class="token class-name">SpringApplicationBuilder</span> <span class="token function">configure</span><span class="token punctuation">(</span><span class="token class-name">SpringApplicationBuilder</span> builder<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> builder<span class="token punctuation">.</span><span class="token function">sources</span><span class="token punctuation">(</span><span class="token class-name">JspApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>5）部署war</p><p> 把war放到tomcat等服务器的发布目录中。  tomcat为例， myboot.war放到tomcat&#x2F;webapps目录。</p><h2 id="8-2-打包为jar"><a href="#8-2-打包为jar" class="headerlink" title="8.2 打包为jar"></a>8.2 打包为jar</h2><p>1.创建了一个包含了jsp的项目</p><p>2.修改pom.xml</p><p>​     1) 指定打包后的文件名称</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>   <span class="token comment">&lt;!--打包后的文件名称--></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>finalName</span><span class="token punctuation">></span></span>myboot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>finalName</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>指定springboot-maven-plugin版本</li></ol><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token comment">&lt;!--打包jar， 有jsp文件时，必须指定maven-plugin插件的版本是 1.4.2.RELEASE--></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.4.2.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3）最后执行 maven clean package</p><p>​       在target目录中，生成jar 文件， 例子是myboot.jar</p><p>​       执行独立的springboot项目  在cmd中 java  -jar  myboot.jar</p><h1 id="第九章-总结"><a href="#第九章-总结" class="headerlink" title="第九章 总结"></a>第九章 总结</h1><h2 id="9-1-注解"><a href="#9-1-注解" class="headerlink" title="9.1 注解"></a>9.1 注解</h2><p>Spring + SpringMVC + SpringBoot </p><pre class="line-numbers language-java" data-language="java"><code class="language-java">创建对象的：<span class="token annotation punctuation">@Controller</span><span class="token operator">:</span> 放在类的上面，创建控制器对象，注入到容器中<span class="token annotation punctuation">@RestController</span><span class="token operator">:</span> 放在类的上面，创建控制器对象，注入到容器中。             作用：复合注解是<span class="token annotation punctuation">@Controller</span> <span class="token punctuation">,</span> <span class="token annotation punctuation">@ResponseBody</span><span class="token punctuation">,</span> 使用这个注解类的，里面的控制器方法的返回值                   都是数据<span class="token annotation punctuation">@Service</span> ： 放在业务层的实现类上面，创建service对象，注入到容器<span class="token annotation punctuation">@Repository</span> <span class="token operator">:</span> 放在dao层的实现类上面，创建dao对象，放入到容器。 没有使用这个注解，是因为现在使用<span class="token class-name">MyBatis</span>框               架，  dao对象是<span class="token class-name">MyBatis</span>通过代理生成的。 不需要使用<span class="token annotation punctuation">@Repository</span>、 所以没有使用。<span class="token annotation punctuation">@Component</span><span class="token operator">:</span>  放在类的上面，创建此类的对象，放入到容器中。 赋值的：<span class="token annotation punctuation">@Value</span> ： 简单类型的赋值， 例如 在属性的上面使用<span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"李四"</span><span class="token punctuation">)</span> <span class="token keyword">private</span> <span class="token class-name">String</span> name          还可以使用<span class="token annotation punctuation">@Value</span><span class="token punctuation">,</span>获取配置文件者的数据（properties或yml）。           <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"$&#123;server.port&#125;"</span><span class="token punctuation">)</span> <span class="token keyword">private</span> <span class="token class-name">Integer</span> port<span class="token annotation punctuation">@Autowired</span><span class="token operator">:</span> 引用类型赋值自动注入的，支持byName<span class="token punctuation">,</span> byType<span class="token punctuation">.</span> 默认是byType 。 放在属性的上面，也可以放在构造             方法的上面。 推荐是放在构造方法的上面<span class="token annotation punctuation">@Qualifer</span><span class="token operator">:</span>  给引用类型赋值，使用byName方式。               <span class="token annotation punctuation">@Autowird</span><span class="token punctuation">,</span> <span class="token annotation punctuation">@Qualifer</span>都是<span class="token class-name">Spring</span>框架提供的。<span class="token annotation punctuation">@Resource</span> ： 来自jdk中的定义， javax<span class="token punctuation">.</span>annotation。 实现引用类型的自动注入， 支持byName<span class="token punctuation">,</span> byType<span class="token punctuation">.</span>             默认是byName<span class="token punctuation">,</span> 如果byName失败， 再使用byType注入。 在属性上面使用其他：<span class="token annotation punctuation">@Configuration</span> ： 放在类的上面，表示这是个配置类，相当于xml配置文件<span class="token annotation punctuation">@Bean</span>：放在方法的上面， 把方法的返回值对象，注入到spring容器中。<span class="token annotation punctuation">@ImportResource</span> ： 加载其他的xml配置文件， 把文件中的对象注入到spring容器中<span class="token annotation punctuation">@PropertySource</span> ： 读取其他的properties属性配置文件<span class="token annotation punctuation">@ComponentScan</span>： 扫描器 ，指定包名，扫描注解的<span class="token annotation punctuation">@ResponseBody</span><span class="token operator">:</span> 放在方法的上面，表示方法的返回值是数据， 不是视图<span class="token annotation punctuation">@RequestBody</span> <span class="token operator">:</span> 把请求体中的数据，读取出来， 转为java对象使用。<span class="token annotation punctuation">@ControllerAdvice</span><span class="token operator">:</span>  控制器增强， 放在类的上面， 表示此类提供了方法，可以对controller增强功能。<span class="token annotation punctuation">@ExceptionHandler</span> <span class="token operator">:</span> 处理异常的，放在方法的上面<span class="token annotation punctuation">@Transcational</span> <span class="token operator">:</span>  处理事务的， 放在service实现类的<span class="token keyword">public</span>方法上面， 表示此方法有事务<span class="token class-name">SpringBoot</span>中使用的注解    <span class="token annotation punctuation">@SpringBootApplication</span> ： 放在启动类上面， 包含了<span class="token annotation punctuation">@SpringBootConfiguration</span>                          <span class="token annotation punctuation">@EnableAutoConfiguration</span>， <span class="token annotation punctuation">@ComponentScan</span><span class="token class-name">MyBatis</span>相关的注解<span class="token annotation punctuation">@Mapper</span> ： 放在类的上面 ， 让<span class="token class-name">MyBatis</span>找到接口， 创建他的代理对象    <span class="token annotation punctuation">@MapperScan</span> <span class="token operator">:</span>放在主类的上面 ， 指定扫描的包， 把这个包中的所有接口都创建代理对象。 对象注入到容器中<span class="token annotation punctuation">@Param</span> ： 放在dao接口的方法的形参前面， 作为命名参数使用的。   <span class="token class-name">Dubbo</span>注解<span class="token annotation punctuation">@DubboService</span><span class="token operator">:</span> 在提供者端使用的，暴露服务的， 放在接口的实现类上面<span class="token annotation punctuation">@DubboReference</span><span class="token operator">:</span>  在消费者端使用的， 引用远程服务， 放在属性上面使用。<span class="token annotation punctuation">@EnableDubbo</span> <span class="token operator">:</span> 放在主类上面， 表示当前引用启用<span class="token class-name">Dubbo</span>功能。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 后端开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redisson分布式锁</title>
      <link href="/2022/10/29/redisson-fen-bu-shi-suo/"/>
      <url>/2022/10/29/redisson-fen-bu-shi-suo/</url>
      
        <content type="html"><![CDATA[<h1 id="1-分布式锁"><a href="#1-分布式锁" class="headerlink" title="1.分布式锁"></a>1.分布式锁</h1><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Bean</span> <span class="token keyword">public</span> <span class="token class-name">Redisson</span> <span class="token function">redisson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>     <span class="token comment">//单机配置</span>     <span class="token class-name">Config</span> config <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     config<span class="token punctuation">.</span><span class="token function">useSingleServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAddress</span><span class="token punctuation">(</span><span class="token string">"redis://localhost:6379"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setDatabase</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">Redisson</span><span class="token punctuation">)</span> <span class="token class-name">Redisson</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-data-redis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--        分布式锁--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.redisson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>redisson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.6.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Resource</span><span class="token keyword">private</span> <span class="token class-name">Redisson</span> redisson<span class="token punctuation">;</span><span class="token class-name">String</span> key <span class="token operator">=</span> xxx<span class="token class-name">Rlock</span> lock <span class="token operator">=</span> redisson<span class="token punctuation">.</span><span class="token function">getLock</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token comment">//上锁</span>lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//解锁</span>lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="2-读写锁"><a href="#2-读写锁" class="headerlink" title="2.读写锁"></a>2.读写锁</h1><ul><li>保证一定能读取到最新的数据，修改期间，写锁是一个互斥锁，读锁是一个共享锁<ul><li>读+读：相当于无锁，并发读</li><li>写+读：等待写锁释放，在执行读锁</li><li>写+写：阻塞</li><li>读+写：等待读锁释放，在执行写锁</li></ul></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">RReadWriteLock</span> lock <span class="token operator">=</span> redisson<span class="token punctuation">.</span><span class="token function">getReadWriteLock</span><span class="token punctuation">(</span><span class="token string">"锁名"</span><span class="token punctuation">)</span><span class="token comment">//写锁</span><span class="token class-name">Rlock</span> lock <span class="token operator">=</span> lock<span class="token punctuation">.</span><span class="token function">writeLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//读锁</span><span class="token class-name">Rlock</span> lock <span class="token operator">=</span> lock<span class="token punctuation">.</span><span class="token function">readLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="3-信号量锁"><a href="#3-信号量锁" class="headerlink" title="3.信号量锁"></a>3.信号量锁</h1><ul><li>指定一个信号量锁，然后自己赋值，只有获取到有设定的值不为0的情况才能执行业务</li><li>比如卖东西使用这个锁就不错</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">RSeaphore</span> park <span class="token operator">=</span> redisson<span class="token punctuation">.</span><span class="token function">getSemaphore</span><span class="token punctuation">(</span><span class="token string">"指定key"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//尝试获取信号量锁（信号量锁-1）</span><span class="token keyword">boolean</span> b <span class="token operator">=</span> park<span class="token punctuation">.</span><span class="token function">tryAcquire</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//业务逻辑</span>xxx<span class="token punctuation">&#125;</span><span class="token comment">//信号量锁+1</span><span class="token class-name">RSeaphore</span> park <span class="token operator">=</span> redisson<span class="token punctuation">.</span><span class="token function">getSemaphore</span><span class="token punctuation">(</span><span class="token string">"指定key"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//释放一个锁</span>park<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="4-闭锁"><a href="#4-闭锁" class="headerlink" title="4.闭锁"></a>4.闭锁</h1><ul><li>指定一个数，然后等待，等这个数的锁全部释放完毕执行业务</li><li>用于等待别的业务全部执行完在执行当前业务的场景</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">RCountDownLatch</span> lock <span class="token operator">=</span> redisson<span class="token punctuation">.</span><span class="token function">getCountDownLatch</span><span class="token punctuation">(</span><span class="token string">"闭锁名"</span><span class="token punctuation">)</span>lock<span class="token punctuation">.</span><span class="token function">trySetCount</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>lock<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//等待闭锁都完成</span><span class="token class-name">RCountDownLatch</span> lock <span class="token operator">=</span> redisson<span class="token punctuation">.</span><span class="token function">getCountDownLatch</span><span class="token punctuation">(</span><span class="token string">"闭锁名"</span><span class="token punctuation">)</span>lock<span class="token punctuation">.</span><span class="token function">countDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//计数减1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> nosql </category>
          
          <category> redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 分布式 </tag>
            
            <tag> nosql </tag>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis中的Wrapper</title>
      <link href="/2022/10/17/mybati-plus/"/>
      <url>/2022/10/17/mybati-plus/</url>
      
        <content type="html"><![CDATA[<h1 id="1-Wrapper"><a href="#1-Wrapper" class="headerlink" title="1.Wrapper"></a>1.Wrapper</h1><p>用于sql中where的查询条件</p><p>实例</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">QueryWrapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">QueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">></span></span> wrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//        组装条件</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> map<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//map&lt;key,value> key列名，value查询的值</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span><span class="token string">"吕飞扬"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">,</span><span class="token string">"22"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        wrapper<span class="token punctuation">.</span><span class="token function">allEq</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//调用map自己的查询方法</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">></span></span> students <span class="token operator">=</span> studentMapper<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Student</span> student <span class="token operator">:</span> students<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其实就是和Mybatis逆向工程差不多的东西，Wrapper是一个工具，用于封装条件，然后使用MP自带的查询，把Wrapper作为参数传进去就可以了</p><h1 id="2-方法解读"><a href="#2-方法解读" class="headerlink" title="2.方法解读"></a>2.方法解读</h1><h4 id="2-1）select篇：QueryWrapper"><a href="#2-1）select篇：QueryWrapper" class="headerlink" title="2.1）select篇：QueryWrapper"></a>2.1）select篇：QueryWrapper</h4><ul><li><h5 id="allEq-：基于map的相等"><a href="#allEq-：基于map的相等" class="headerlink" title="allEq()：基于map的相等"></a>allEq()：基于map的相等</h5><ul><li>参数map（），用于封装查询条件</li><li>如果Map对象中有key的value是null，则需要传入第二个参数boolean<ul><li>这个参数是用于判断是否考察是否要将null作为条件</li><li>true：处理空值，where条件加入字段is null</li><li>false：忽略空值,不作为where条件</li></ul></li></ul></li><li><h5 id="last-拼接sql语句"><a href="#last-拼接sql语句" class="headerlink" title="last:拼接sql语句"></a>last:拼接sql语句</h5><ul><li>可以在QueryWrapper调用方法之后在调用last(SQL语句片段)</li></ul></li><li><h5 id="eq-：-x3D"><a href="#eq-：-x3D" class="headerlink" title="eq()：&#x3D;"></a>eq()：&#x3D;</h5><ul><li>参数（“列名”，“值”）</li><li>查询条件相等的</li></ul></li><li><h5 id="ne-：！-x3D"><a href="#ne-：！-x3D" class="headerlink" title="ne()：！&#x3D;"></a>ne()：！&#x3D;</h5><ul><li>参数（“列名”，“值”）</li><li>查询条件不相等的</li></ul></li><li><h5 id="gt-gt"><a href="#gt-gt" class="headerlink" title="gt(): &gt;"></a>gt(): &gt;</h5><ul><li>参数（“列名”，“值”）</li></ul></li><li><h5 id="ge-gt-x3D"><a href="#ge-gt-x3D" class="headerlink" title="ge(): &gt;&#x3D;"></a>ge(): &gt;&#x3D;</h5><ul><li>参数（“列名”，“值”）</li></ul></li><li><h5 id="lt-lt"><a href="#lt-lt" class="headerlink" title="lt(): &lt;"></a>lt(): &lt;</h5><ul><li>参数（“列名”，“值”）</li></ul></li><li><h5 id="le-lt-x3D"><a href="#le-lt-x3D" class="headerlink" title="le(): &lt;&#x3D;"></a>le(): &lt;&#x3D;</h5><ul><li>参数（“列名”，“值”）</li></ul></li><li><h5 id="between-在（？-and-？）"><a href="#between-在（？-and-？）" class="headerlink" title="between(): 在（？ and ？）"></a>between(): 在（？ and ？）</h5><ul><li>参数（“列名”，“初始值”，“结束值”）</li><li>包含等于</li><li>where 列名&gt;&#x3D;初始值 and 列名&lt;&#x3D;结束值</li></ul></li><li><h5 id="nobetween-不在（？and？）"><a href="#nobetween-不在（？and？）" class="headerlink" title="nobetween(): 不在（？and？）"></a>nobetween(): 不在（？and？）</h5><ul><li>参数（“列名”，“初始值”，“结束值”）</li><li>where 列名&lt;初始值 and 列名&gt;结束值</li></ul></li><li><h5 id="like-：匹配值"><a href="#like-：匹配值" class="headerlink" title="like()：匹配值"></a>like()：匹配值</h5><ul><li>参数（“列名”，“值”）</li><li>like ‘%值%’</li></ul></li><li><h5 id="notlike-：不匹配值"><a href="#notlike-：不匹配值" class="headerlink" title="notlike()：不匹配值"></a>notlike()：不匹配值</h5><ul><li>参数（“列名”，“值”）</li><li>not like ‘%值%’</li></ul></li><li><h5 id="likeLeft"><a href="#likeLeft" class="headerlink" title="likeLeft"></a>likeLeft</h5><ul><li>like ‘%值’</li></ul></li><li><h5 id="likerRight"><a href="#likerRight" class="headerlink" title="likerRight"></a>likerRight</h5><ul><li>like ‘值%’</li></ul></li><li><h5 id="is-null"><a href="#is-null" class="headerlink" title="is null"></a>is null</h5><ul><li>参数（“列名”）</li></ul></li><li><h5 id="is-not-null"><a href="#is-not-null" class="headerlink" title="is not null"></a>is not null</h5><ul><li>参数（“列名”）</li></ul></li><li><h5 id="in"><a href="#in" class="headerlink" title="in"></a>in</h5><ul><li>参数（“列名”，“值”，“值”，…..）</li></ul></li><li><h5 id="not-in"><a href="#not-in" class="headerlink" title="not in"></a>not in</h5><ul><li>参数（“列名”，“值”，“值”，…….）</li></ul></li><li><h5 id="inSql：子查询"><a href="#inSql：子查询" class="headerlink" title="inSql：子查询"></a>inSql：子查询</h5><ul><li>参数（“列名”，“sql语句”）</li><li>where 列名 in sql语句结果</li></ul></li><li><h5 id="notInSql：子查询"><a href="#notInSql：子查询" class="headerlink" title="notInSql：子查询"></a>notInSql：子查询</h5><ul><li>参数（“列名”，“sql语句”）</li><li>where 列名 not in sql语句结果</li></ul></li><li><h5 id="groupBy：自己写吧，没必要用MP框架写这个"><a href="#groupBy：自己写吧，没必要用MP框架写这个" class="headerlink" title="groupBy：自己写吧，没必要用MP框架写这个"></a>groupBy：自己写吧，没必要用MP框架写这个</h5></li><li><h5 id="OderByAsc：按字段升序"><a href="#OderByAsc：按字段升序" class="headerlink" title="OderByAsc：按字段升序"></a>OderByAsc：按字段升序</h5><ul><li>参数（“列名”，……）</li></ul></li><li><h5 id="OderByDesc：按字段降序"><a href="#OderByDesc：按字段降序" class="headerlink" title="OderByDesc：按字段降序"></a>OderByDesc：按字段降序</h5><ul><li>参数（“列名”，……）</li></ul></li><li><h5 id="orderBy-："><a href="#orderBy-：" class="headerlink" title="orderBy()："></a>orderBy()：</h5><ul><li>参数<ul><li>boolean condition：条件内容是否加入到sql语句的后面。</li><li>boolean isAsc：升序true 降序 false</li><li>colums：“列名”</li></ul></li></ul></li><li><h5 id="exists：拼接sql"><a href="#exists：拼接sql" class="headerlink" title="exists：拼接sql"></a>exists：拼接sql</h5><ul><li><p>参数（“SQL语句”）</p></li><li><p>实例</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">qw<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token string">"select * from student where age > 20"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>判断子查询条件是否成立</li></ul></li></ul></li><li><h5 id="not-exists-和上面的相反"><a href="#not-exists-和上面的相反" class="headerlink" title="not exists: 和上面的相反"></a>not exists: 和上面的相反</h5></li></ul><h3 id="2-2）分页"><a href="#2-2）分页" class="headerlink" title="2.2）分页"></a>2.2）分页</h3><ol><li><h5 id="配置分页插件，实现物理分页，默认是内存分页"><a href="#配置分页插件，实现物理分页，默认是内存分页" class="headerlink" title="配置分页插件，实现物理分页，默认是内存分页"></a>配置分页插件，实现物理分页，默认是内存分页</h5><ol><li><p>&#96;&#96;&#96;java</p><p>@Configuration<br>public class Config{<br>@Bean<br>public PaginationInterceptor paginationInterceptor(){<br>    return new PaginationInterceptor();<br>}<br>}</p><pre class="line-numbers language-none"><code class="language-none">2. ##### 分页查询   1. &#96;&#96;&#96;java          @Test          public void testpage() &#123;              &#x2F;&#x2F;创建qw              QueryWrapper&lt;Student&gt; wq &#x3D; new QueryWrapper&lt;&gt;();              &#x2F;&#x2F;创建page              Page&lt;Student&gt; page &#x3D; new Page&lt;&gt;();              &#x2F;&#x2F;指定分页数据              page.setCurrent(1);&#x2F;&#x2F;第一页              page.setSize(3);&#x2F;&#x2F;每页记录数              Page&lt;Student&gt; result &#x3D; studentMapper.selectPage(page, wq);              &#x2F;&#x2F;获取分页后的记录              List&lt;Student&gt; students &#x3D; result.getRecords();              System.out.println(&quot;当前页分隔线&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);              for (Student student : students) &#123;                  System.out.println(student);              &#125;              System.out.println(&quot;当前页分隔线&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);              &#x2F;&#x2F;有多少页              System.out.println(&quot;有多少页&quot;+result.getPages());              &#x2F;&#x2F;总记录数              System.out.println(&quot;总记录数&quot;+result.getTotal());              &#x2F;&#x2F;当前页码              System.out.println(&quot;当前页码&quot;+result.getCurrent());              &#x2F;&#x2F;每页的记录数              System.out.println(&quot;每页的记录数&quot;+result.getSize());          &#125;      &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="3-创建对象时自动赋值"><a href="#3-创建对象时自动赋值" class="headerlink" title="3.创建对象时自动赋值"></a>3.创建对象时自动赋值</h1><h3 id="3-1）实体类"><a href="#3-1）实体类" class="headerlink" title="3.1）实体类"></a>3.1）实体类</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dept</span> <span class="token keyword">extends</span> <span class="token class-name">Model</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Dept</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token number">1L</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@TableId</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"id"</span><span class="token punctuation">,</span> type <span class="token operator">=</span> <span class="token class-name">IdType</span><span class="token punctuation">.</span><span class="token constant">AUTO</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> mobile<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> manager<span class="token punctuation">;</span>    <span class="token annotation punctuation">@TableField</span><span class="token punctuation">(</span>fill <span class="token operator">=</span> <span class="token class-name">FieldFill</span><span class="token punctuation">.</span><span class="token constant">INSERT</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">Date</span> create_time<span class="token punctuation">;</span>    <span class="token annotation punctuation">@TableField</span><span class="token punctuation">(</span>fill <span class="token operator">=</span> <span class="token class-name">FieldFill</span><span class="token punctuation">.</span><span class="token constant">INSERT_UPDATE</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">Date</span> update_time<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>在属性上面添加 <strong>@TableField(fill &#x3D; FieldFill.INSERT_UPDATE)<strong>用来指定什么时候</strong>触发自动填充值</strong></li></ul><h3 id="3-2）配置类"><a href="#3-2）配置类" class="headerlink" title="3.2）配置类"></a>3.2）配置类</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyBatisConfig</span> <span class="token keyword">implements</span> <span class="token class-name">MetaObjectHandler</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insertFill</span><span class="token punctuation">(</span><span class="token class-name">MetaObject</span> metaObject<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setFieldValByName</span><span class="token punctuation">(</span><span class="token string">"create_time"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>metaObject<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">updateFill</span><span class="token punctuation">(</span><span class="token class-name">MetaObject</span> metaObject<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setFieldValByName</span><span class="token punctuation">(</span><span class="token string">"update_time"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>metaObject<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href=""></a>实现MetaObjectHandler接口重写更新和创建的方法</p><ul><li>两个方法用于创建和更新时触发</li><li><strong>方法中参数为  字段名，填充值，metaObject</strong></li></ul></li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> 框架 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringCache</title>
      <link href="/2022/10/09/springcache/"/>
      <url>/2022/10/09/springcache/</url>
      
        <content type="html"><![CDATA[<h1 id="1-Spring-Cache-环境"><a href="#1-Spring-Cache-环境" class="headerlink" title="1.Spring Cache 环境"></a>1.Spring Cache 环境</h1><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-cache<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>使用redis 作为缓存 ， 在yml文件中</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">cache</span><span class="token punctuation">:</span>    <span class="token key atrule">type</span><span class="token punctuation">:</span> redis <span class="token comment">#指定缓存类型</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>开启缓存功能注解 @EnableChing</strong></p><h3 id="1-1）为什么使用Spring-Cache"><a href="#1-1）为什么使用Spring-Cache" class="headerlink" title="1.1）为什么使用Spring Cache"></a>1.1）为什么使用Spring Cache</h3><p>通常在使用到缓存时，业务逻辑通常为  查缓存， 有缓存？直接返回缓存，无缓存？从db中查数据，放入缓存，在返回数据。代码毫无技术可言且每个方法流程几乎一致，非常繁琐</p><p>使用Cache 的注解即可帮我们自动实现，省去了繁琐的代码</p><h3 id="1-2）配置类"><a href="#1-2）配置类" class="headerlink" title="1.2）配置类"></a>1.2）配置类</h3><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">cache</span><span class="token punctuation">:</span>    <span class="token key atrule">type</span><span class="token punctuation">:</span> redis    <span class="token key atrule">redis</span><span class="token punctuation">:</span>      <span class="token comment">#指定key 前缀，如果没指定，则用注解上的value作为前缀 </span>      <span class="token key atrule">key-prefix</span><span class="token punctuation">:</span> CACH_      <span class="token comment">#是否开启前缀，默认true</span>      <span class="token key atrule">use-key-prefix</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>      <span class="token comment">#是否存储空值，防止缓存穿透</span>      <span class="token key atrule">cache-null-values</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@EnableCaching</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CacheConfig</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">RedisCacheConfiguration</span> <span class="token function">redisCacheConfiguration</span><span class="token punctuation">(</span><span class="token class-name">CacheProperties</span> cacheProperties<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">RedisCacheConfiguration</span> config <span class="token operator">=</span> <span class="token class-name">RedisCacheConfiguration</span><span class="token punctuation">.</span><span class="token function">defaultCacheConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//序列化key</span>        config <span class="token operator">=</span> config<span class="token punctuation">.</span><span class="token function">serializeKeysWith</span><span class="token punctuation">(</span><span class="token class-name">RedisSerializationContext<span class="token punctuation">.</span>SerializationPair</span><span class="token punctuation">.</span><span class="token function">fromSerializer</span><span class="token punctuation">(</span><span class="token keyword">new</span>   <span class="token class-name">StringRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//序列化value</span>       config <span class="token operator">=</span>  config<span class="token punctuation">.</span><span class="token function">serializeValuesWith</span><span class="token punctuation">(</span><span class="token class-name">RedisSerializationContext<span class="token punctuation">.</span>SerializationPair</span><span class="token punctuation">.</span><span class="token function">fromSerializer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">GenericJackson2JsonRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">CacheProperties<span class="token punctuation">.</span>Redis</span> redisProperties <span class="token operator">=</span> cacheProperties<span class="token punctuation">.</span><span class="token function">getRedis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//将配置文件中的所有配置都生效</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>redisProperties<span class="token punctuation">.</span><span class="token function">getTimeToLive</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            config <span class="token operator">=</span> config<span class="token punctuation">.</span><span class="token function">entryTtl</span><span class="token punctuation">(</span>redisProperties<span class="token punctuation">.</span><span class="token function">getTimeToLive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>redisProperties<span class="token punctuation">.</span><span class="token function">getKeyPrefix</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            config <span class="token operator">=</span> config<span class="token punctuation">.</span><span class="token function">prefixKeysWith</span><span class="token punctuation">(</span>redisProperties<span class="token punctuation">.</span><span class="token function">getKeyPrefix</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>redisProperties<span class="token punctuation">.</span><span class="token function">isCacheNullValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            config <span class="token operator">=</span> config<span class="token punctuation">.</span><span class="token function">disableCachingNullValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>redisProperties<span class="token punctuation">.</span><span class="token function">isUseKeyPrefix</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            config <span class="token operator">=</span> config<span class="token punctuation">.</span><span class="token function">disableKeyPrefix</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> config<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="2-基本使用"><a href="#2-基本使用" class="headerlink" title="2.基本使用"></a>2.基本使用</h1><p>redis中的会以分区名为文件夹，放入的缓存 ，key为 分区名：：缓存名</p><h4 id="2-1）缓存读模式"><a href="#2-1）缓存读模式" class="headerlink" title="2.1）缓存读模式"></a>2.1）缓存读模式</h4><p><strong>@Cacheable</strong></p><ul><li><p>属性</p><ul><li><p>value：分区，放入同一分区的缓存可以统一管理</p></li><li><p>key：缓存名，默认是表达式，列如#root.method.name 就是指定缓存名为方法名，如果需要使用字符串指定，需要加上单引号</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Cacheable</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">"分区"</span><span class="token punctuation">,</span>key<span class="token operator">=</span><span class="token string">"'缓存名'"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li><li><p>一般用于查询方法上，表示这个方法有了缓存功能</p></li><li><p>如果缓存中有，方法不调用，缓存中没有，才会调用方法</p></li><li><p>key默认自动生成，指定key可以在注解属性中指定key</p></li><li><p>缓存的value值，默认使用jdk自带的序列化机制</p></li><li><p>默认ttl时间为-1</p></li></ul><p>示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token annotation punctuation">@Cacheable</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"catygory"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>key <span class="token operator">=</span> <span class="token string">"#root.method.name"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">CategoryEntity</span><span class="token punctuation">></span></span> <span class="token function">getParentCate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"从数据库中查询"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>categoryDao<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">CategoryEntity</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">CategoryEntity</span><span class="token operator">::</span><span class="token function">getParentCid</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>经过测试，发起多个请求时，方法只会执行一次，剩下的都去redis 中 查询</p><p><img src="https://lfymall.oss-cn-fuzhou.aliyuncs.com/image-20221107155902706.png"></p><p><img src="https://lfymall.oss-cn-fuzhou.aliyuncs.com/image-20221107160058256.png"></p><h4 id="2-2）缓存写模式"><a href="#2-2）缓存写模式" class="headerlink" title="2.2）缓存写模式"></a>2.2）缓存写模式</h4><p><strong>@CachePut</strong></p><ul><li>在方法上添加@CachePut注解，会把方法返回值放入redis缓存中，供其他地方使用了，它通常用于新增的方法中。</li></ul><h4 id="2-3-）失效模式"><a href="#2-3-）失效模式" class="headerlink" title="2.3 ）失效模式"></a>2.3 ）失效模式</h4><p><strong>@CacheEvict</strong></p><ul><li><p>属性</p><ul><li>value：分区</li><li>key：缓存名</li><li>allEntries &#x3D; true <strong>删除分区中所有缓存</strong></li></ul></li><li><p>方法上添加@CacheEvict注解，方法完成之后会删除缓存</p></li><li><p><strong>注意</strong>，在高并发下可能会造成缓存数据不一致问题，因为底层使用此注解的执行步骤是，对数据库进行修改，然后删除缓存</p><ul><li>列如有三个线程</li><li>第一个线程进入方法修改数据，然后删除redis缓存，这时缓存为空</li><li>第二个线程进入方法修改数据，因为网络延迟还没修改完成的时候，第三个线程过来读取数据（读取旧数据），发现缓存为空，就去数据库查询，查询完准备填充进redis缓存时，第二个线程修改完成并删除了缓存，第三个线程填充缓存。这时数据库最新的数据就和redis缓存中的数据造成了不一致</li></ul></li><li><p><strong>解决办法</strong>：</p><ul><li>1.不使用此注解，手写逻辑、2.去底层重写接口</li><li>（可以容忍几秒的数据不一致）延迟双删，删除完，使用定时器异步等待3秒在删一次</li><li>（不能容忍）使用分布式锁，如果在进行了数据修改，则让对数据库查询的线程阻塞，等修改完成之后才让查询</li></ul></li></ul><h4 id="2-4）多个操作"><a href="#2-4）多个操作" class="headerlink" title="2.4）多个操作"></a>2.4）多个操作</h4><p><strong>@Caching</strong> </p><p>示例</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Caching</span><span class="token punctuation">(</span>evict<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token annotation punctuation">@CacheEvict</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">"分区1"</span>，key<span class="token operator">=</span><span class="token string">"'xxx1号'"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token annotation punctuation">@CacheEvict</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">"分区2"</span>，key<span class="token operator">=</span><span class="token string">"'xxx2号'"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>可以使用Caching注解来让多个Cache注解执行</p><h1 id="3-SpringCache的不足"><a href="#3-SpringCache的不足" class="headerlink" title="3.SpringCache的不足"></a>3.SpringCache的不足</h1><h4 id="3-1）读模式"><a href="#3-1）读模式" class="headerlink" title="3.1）读模式"></a>3.1）读模式</h4><ul><li><p>缓存穿透：查询一个永不存在的数据(null)，访问流量进入方法中，会进入redis中查询，发现没缓存，进入mysql中查询，还是没数据，大量消耗了程序性能</p><ul><li><p>解决方案：缓存空数据，yml文件夹中可以进行配置</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">cache-null-values</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>   <span class="token comment">#是否存储空值，防止缓存穿透</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li><li><p>缓存击穿：大量并发请求进入，同时查询一个过期的数据，由于没有缓存，大量请求打入数据库，造成数据库压力过大崩溃</p><ul><li>解决方案：SpringCache 默认没有提供锁，加锁需要给@Cacheable加上sync&#x3D;true属性，而这个锁是本地锁，分布式因为负载均衡会出现锁不住的情况（但是对缓存击穿问题足够用），如果是对锁要求极高的情况，还是需要手写分布式锁（双检锁）</li></ul></li><li><p>缓存雪崩：大量缓存同时过期，大量请求直达数据库，造成数据库崩溃</p><ul><li><p>解决方案：设置过期时间加随机时间</p><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token key attr-name">spring.cache.redis.time-to-live</span><span class="token punctuation">:</span> <span class="token value attr-value">36000</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li></ul><h4 id="3-2）写模式"><a href="#3-2）写模式" class="headerlink" title="3.2）写模式"></a>3.2）写模式</h4><ul><li>读写加锁</li><li>引入Canal，感知到mysql的更新去更新缓存</li><li>读多写多，直接去查询数据库</li></ul><h1 id="4-）总结"><a href="#4-）总结" class="headerlink" title="4.）总结"></a>4.）总结</h1><p>常规数据：（读多写少，及时性，一致性要求不高）完全可以使用springcache</p><p>特殊数据：（实时性要求高的数据）自己手写</p>]]></content>
      
      
      <categories>
          
          <category> nosql </category>
          
          <category> redis </category>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> nosql </tag>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sql调优</title>
      <link href="/2022/10/07/jin-jie-pian-diao-you/"/>
      <url>/2022/10/07/jin-jie-pian-diao-you/</url>
      
        <content type="html"><![CDATA[<h1 id="1-存储引擎"><a href="#1-存储引擎" class="headerlink" title="1.存储引擎"></a>1.存储引擎</h1><h4 id="1-1）mysql体系结构"><a href="#1-1）mysql体系结构" class="headerlink" title="1.1）mysql体系结构"></a>1.1）mysql体系结构</h4><ul><li>连接层<ul><li>主要完成一些类似连接处理，授权认证，及相关的安全方案</li></ul></li><li>服务层<ul><li>主要完成大多数的核心服务功能，如SQL接口，并完成缓存的查询，SQL分析和优化，部分内置函数的执行</li></ul></li><li>引擎层<ul><li>索引是在引擎层实现的，不同的存储引擎有不同的功能，我们可以根据自己需要，来选取合适的存储引擎</li></ul></li><li>存储层<ul><li>主要是将数据存储到文件系统之上，并完成与存储引擎的交互</li></ul></li></ul><h4 id="1-2）存储引擎简介"><a href="#1-2）存储引擎简介" class="headerlink" title="1.2）存储引擎简介"></a>1.2）存储引擎简介</h4><ul><li>存储引擎就是存储数据，建立索引，更新&#x2F;查询数据等技术的实现方式，存储引擎是基于表的，而不是基于库的，所以存储引擎也可被称为表类型</li><li>创表时指定engine&#x3D;’’   如果不指定引擎，mysql5.5版本后默认为innodb引擎</li><li>查询当前数据库支持的存储引擎：show engines;</li></ul><h4 id="1-3）存储引擎特点"><a href="#1-3）存储引擎特点" class="headerlink" title="1.3）存储引擎特点"></a>1.3）存储引擎特点</h4><ol><li><h6 id="InnoDB"><a href="#InnoDB" class="headerlink" title="InnoDB"></a>InnoDB</h6><ol><li>DML操作遵循ACID模型，支持事务</li><li>行级锁，提高并发访问性能</li><li>支持外键FOREIGN KEY约束</li><li>文件<ol><li>xxx.ibd：xxx代表的是表名，innoDB引擎的每张表都会对应这样一个表空间文件，存储该表的表结构（frm,sai）数据和索引。</li></ol></li></ol></li><li><h6 id="MyISAM"><a href="#MyISAM" class="headerlink" title="MyISAM"></a>MyISAM</h6><ol><li>早期的默认存储引擎</li><li>不支持事务，不支持外键</li><li>支持表锁，不支持行锁</li><li>访问速度快</li></ol></li><li><h6 id="Memory"><a href="#Memory" class="headerlink" title="Memory"></a>Memory</h6><ol><li>内存存放</li><li>hash索引（默认）</li></ol></li><li><p><img src="F:\前端学习测试\hexo个人博客\source_posts\img\E09D202358D685744F97AA5C71E94FAC.png" alt="E09D202358D685744F97AA5C71E94FAC"></p></li><li><p>行锁就是在开启事务时，操作的那一行数据会被锁住，别的事务如果对这张表的这行数据操作是就会阻塞</p></li></ol><p>​表锁就是开启事务时，整张表都会被锁住，别的事务无法对这张表进行操作</p><h4 id="1-4）存储引擎选择"><a href="#1-4）存储引擎选择" class="headerlink" title="1.4）存储引擎选择"></a>1.4）存储引擎选择</h4><ol><li>innoDB:是mysql的默认存储引擎，支持事务，外键。如果应用对事务的完整性有比较高的要求，在并发条件下要求数据的一致性，数据库操作除了插入和查询之外，还包含很多更新，删除操作，那么innoDB存储引擎是比较合适的选择<ul><li>实际开发中，使用最多</li></ul></li><li>MyISAM：如果应用是以读操作和插入操作为主，只有很少的更新和删除操作，并且为事务的完整性，并发性要求不是很高，那么选择这个存储引擎是非常合适的<ul><li>实际开发中，这种存储引擎已经被Mongodb取代了</li></ul></li><li>MEMORY:将所有数据保存在内存中，访问速度快，通常用于临时表及缓存，memory的缺陷是对表的大小有限制，太大的表无法缓存在内存中，而且无法保证数据的安全性。<ul><li>实际开发中，这种存储引擎已经被redis取代了</li></ul></li></ol><h1 id="2-索引-重点"><a href="#2-索引-重点" class="headerlink" title="2.索引(重点)"></a>2.索引(重点)</h1><h4 id="2-1）索引概述"><a href="#2-1）索引概述" class="headerlink" title="2.1）索引概述"></a>2.1）索引概述</h4><ul><li><h6 id="索引是帮助mysql高效获取数据的数据结构（有序），在数据之外，数据库系统还维护这满足特定查找算法的数据结构，这些数据结构以某种方式引用（指向）数据，这样就可以在这些数据结构上实现高级查找算法，这种数据结构就是索引"><a href="#索引是帮助mysql高效获取数据的数据结构（有序），在数据之外，数据库系统还维护这满足特定查找算法的数据结构，这些数据结构以某种方式引用（指向）数据，这样就可以在这些数据结构上实现高级查找算法，这种数据结构就是索引" class="headerlink" title="索引是帮助mysql高效获取数据的数据结构（有序），在数据之外，数据库系统还维护这满足特定查找算法的数据结构，这些数据结构以某种方式引用（指向）数据，这样就可以在这些数据结构上实现高级查找算法，这种数据结构就是索引"></a>索引是帮助mysql高效获取数据的数据结构（有序），在数据之外，数据库系统还维护这满足特定查找算法的数据结构，这些数据结构以某种方式引用（指向）数据，这样就可以在这些数据结构上实现高级查找算法，这种数据结构就是索引</h6></li><li><p>优缺点：</p><ul><li>优点：提高数据检索的效率，降低数据库的IO成本，通过索引列对数据进行排序，降低数据排序的成本，降低cpu的消耗</li><li>缺点：索引列也是要占用空间的，索引大大提高了查询效率，同时却也降低更新表的速度，如对表进行insert，update,delete时，效率降低。</li></ul></li></ul><h4 id="2-2）索引结构"><a href="#2-2）索引结构" class="headerlink" title="2.2）索引结构"></a>2.2）索引结构</h4><ul><li>B+Tree索引(默认)：最常见的索引类型，大部分引擎都支持B+树索引</li><li>Hash索引：底层数据结构使用哈希表实现的，只有精确匹配索引列的查询才有效，不支持范围查询</li><li>R-tree：空间索引是MyISAM引擎的一个特殊引擎类型，主要用于地理空间数据类型，通常较少使用</li><li>Full-text(全文索引)：是一种通过建立倒排索引，快速匹配文档的方式，类似于Lucene,Solr,Es</li><li><img src="C:\Users\吕飞扬\Desktop\SQL调优\img\D817D5CD513634902A377E3638D666CF.png" alt="D817D5CD513634902A377E3638D666CF"></li></ul><h4 id="2-3）索引分类"><a href="#2-3）索引分类" class="headerlink" title="2.3）索引分类"></a>2.3）索引分类</h4><ul><li><h5 id="主键索引：针对于表中主键创建的索引"><a href="#主键索引：针对于表中主键创建的索引" class="headerlink" title="主键索引：针对于表中主键创建的索引"></a>主键索引：针对于表中主键创建的索引</h5><ul><li>特点：默认自动创建，只能有一个</li><li>关键字：PRIMARY</li></ul></li><li><h5 id="唯一索引：避免同一表中某数据列中的值重复"><a href="#唯一索引：避免同一表中某数据列中的值重复" class="headerlink" title="唯一索引：避免同一表中某数据列中的值重复"></a>唯一索引：避免同一表中某数据列中的值重复</h5><ul><li>特点：可以有多个</li><li>关键字：UNIQUE</li></ul></li><li><h5 id="常规索引：快速定位特定数据"><a href="#常规索引：快速定位特定数据" class="headerlink" title="常规索引：快速定位特定数据"></a>常规索引：快速定位特定数据</h5><ul><li>特点：可以有多个</li></ul></li><li><h5 id="全文索引：全文索引查找的是文本中的关键词，而不是比较索引中的值"><a href="#全文索引：全文索引查找的是文本中的关键词，而不是比较索引中的值" class="headerlink" title="全文索引：全文索引查找的是文本中的关键词，而不是比较索引中的值"></a>全文索引：全文索引查找的是文本中的关键词，而不是比较索引中的值</h5><ul><li>特点：可以有多个</li><li>关键字：FULLTEXT</li></ul></li><li><h5 id="在Innodb存储引擎中，根据索引的存储形式，可以分为两种"><a href="#在Innodb存储引擎中，根据索引的存储形式，可以分为两种" class="headerlink" title="在Innodb存储引擎中，根据索引的存储形式，可以分为两种"></a>在Innodb存储引擎中，根据索引的存储形式，可以分为两种</h5><ul><li>聚焦索引：将数据存储与索引放到了一块，索引结构的叶子节点保存了行数据<ul><li>特点：必须有，而且只有一个</li></ul></li><li>二级索引：将数据与索引分开存储，索引结构的叶子节点关联的是对应的主键<ul><li>特点：可以存在多个</li></ul></li><li>如果存在主键，主键索引就是聚集索引。如果不存在主键，将使用第一个唯一（UNIQUE）索引作为聚集索引。</li><li>如果表没有主键，或没有合适的唯一索引，则innoDB会自动生成一个eowid作为隐藏的聚集索引</li></ul></li></ul><h4 id="2-4）索引语法"><a href="#2-4）索引语法" class="headerlink" title="2.4）索引语法"></a>2.4）索引语法</h4><ul><li><h5 id="创建索引：create-unique-fulltext-index-index-name-ON-table-name-index-col-name…"><a href="#创建索引：create-unique-fulltext-index-index-name-ON-table-name-index-col-name…" class="headerlink" title="创建索引：create [unique] [fulltext] index index_name ON table_name(index_col_name…..)"></a>创建索引：create [unique] [fulltext] index index_name ON table_name(index_col_name…..)</h5><ul><li>解读：可以添加unique和fulltext字段 unique代表创建唯一索引，代表该字段不能出现重复的  fulltext代表创建全文索引，如果什么都不加则是行级索引<ul><li>index后面跟索引名，然后ON表名（字段），一个索引是可以关联多个字段的。</li></ul></li></ul></li><li><h5 id="查看索引"><a href="#查看索引" class="headerlink" title="查看索引"></a>查看索引</h5><ul><li>show index from table_name</li></ul></li><li><h5 id="删除索引"><a href="#删除索引" class="headerlink" title="删除索引"></a>删除索引</h5><ul><li>drop index index_name ontable_n</li></ul></li></ul><h4 id="2-5）SQL性能分析"><a href="#2-5）SQL性能分析" class="headerlink" title="2.5）SQL性能分析"></a>2.5）SQL性能分析</h4><ul><li><h5 id="SQL执行频率（第一种工具）："><a href="#SQL执行频率（第一种工具）：" class="headerlink" title="SQL执行频率（第一种工具）："></a>SQL执行频率（第一种工具）：</h5><ul><li><p>mysql客户端连接成功后，通过show [session|global] status 命令可以提供服务器状态信息。通过如下指令，可以查看当前数据库的INSERT,UPDATE,DELETE,SELECT的访问频次</p></li><li><p>第一个指令：查看SQL执行频次</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">show global status like &#39;Com_______&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>第二个指令：查看慢查询日志是否开启</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">show variables like <span class="token string">'slow_query_log'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li><li><h5 id="慢查询日志（第二种工具）："><a href="#慢查询日志（第二种工具）：" class="headerlink" title="慢查询日志（第二种工具）："></a>慢查询日志（第二种工具）：</h5><ul><li><p>慢查询日志记录了所有执行时间超过指定参数（lon_query_time,单位：秒，默认10秒）的所有SQL语句的日志。MYSQL的慢查询日志默认没有开启，需要在Mysql的配置文件（&#x2F;etc&#x2F;my.cnf）中配置如下信息：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#开启Mysql慢日志查询开关</span><span class="token assign-left variable">slow_query_log</span><span class="token operator">=</span><span class="token number">1</span><span class="token comment">#设置慢日志的时间为2秒，sql语句执行时间超过2秒，就会视为慢查询，记录慢查询日志</span><span class="token assign-left variable">long_query_time</span><span class="token operator">=</span><span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>配置完毕之后，通过以下指令重新启动MYSQL服务器进行测试，查看慢日志文件中记录的信息&#x2F;var&#x2F;lib&#x2F;mysql&#x2F;localhost-slow.log</p></li></ul></li><li><h5 id="profile（第三种工具）"><a href="#profile（第三种工具）" class="headerlink" title="profile（第三种工具）:"></a>profile（第三种工具）:</h5><ul><li><p>show profiles能够在做SQL优化时帮助我们了解时间都耗费到了哪里，通过have_profiling参数，能够看到当前Mysql是否支持</p></li><li><h6 id="profile操作"><a href="#profile操作" class="headerlink" title="profile操作"></a>profile操作</h6><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select @@have_profiling  #查看是否支持profile<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p>默认profiling是关闭的，可以通过set语句在session&#x2F;global级别开启profiling：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">set profiling &#x3D;1;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>通过如下指令查看执行耗时</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">#查看每一条sql的耗时基本情况show profiles;#查看指定的query_id的sql语句的各个阶段耗时情况show profile for query query_id;#查看指定query_id的SQL语句CPU的使用情况show profile cpu for query query_id;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul></li><li><h5 id="explain执行计划（重点-第四种工具）："><a href="#explain执行计划（重点-第四种工具）：" class="headerlink" title="explain执行计划（重点-第四种工具）："></a>explain执行计划（重点-第四种工具）：</h5><ul><li><p>EXPLAIN或者DESC命令获取Mysql如何执行select语句的信息，包括在select语句执行过程中表如何连接和连接的顺序。</p></li><li><p>语法：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">#直接在select语句之前加上关键字explain&#x2F;desc，意思就是在普通查询语句前面价格explain或者desc就行EXPLAIN SELECT 字段列表 FROM 表名 WHERE 条件;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>explain查询到的各字段含义：</p><ul><li><p>id：select 查询的序列号，表示查询执行select子句或者是操作表的顺序（id相同，执行顺序从上到下，id不同，值越大，越先执行）</p></li><li><p>select_type：表示查询的类型，常见的有（SIMPLE（简单表，即不使用表连接或子查询）），PRIMARY（主查询），UNION（UNION中的第二个或者和面的查询语句），SUBQUERY（SELECT&#x2F;WHERE之后包含了子查询）等</p></li><li><h5 id="type（重点关注）：表示连接类型，性能由好到差的连接类型为：NULL-system-const-eq-ref-ref-range-index-all-。"><a href="#type（重点关注）：表示连接类型，性能由好到差的连接类型为：NULL-system-const-eq-ref-ref-range-index-all-。" class="headerlink" title="type（重点关注）：表示连接类型，性能由好到差的连接类型为：NULL , system , const , eq_ref , ref , range , index , all 。"></a>type（重点关注）：表示连接类型，性能由好到差的连接类型为：NULL , system , const , eq_ref , ref , range , index , all 。</h5><ul><li><h6 id="解读："><a href="#解读：" class="headerlink" title="解读："></a>解读：</h6></li><li><p>NULL ：实际开发中几乎可能做到优化成NULL，因为一般只有select ‘A’ 这种不访问指定库的语句才能是NULL</p></li><li><p>system：一般访问系统表才会是这个</p></li><li><p>const：一般通过唯一索引或主键查询的会是这个</p></li><li><p>ref：如果使用非唯一的索引会是这个</p></li><li><p>index：表示用了索引但是会对整个索引进行遍历索引数</p></li><li><p>all：全表扫描，出现这个就得好好优化一下了</p></li></ul></li><li><h5 id="possible-key（重点关注）：显示可能应用在这张表上的索引，一个或多个"><a href="#possible-key（重点关注）：显示可能应用在这张表上的索引，一个或多个" class="headerlink" title="possible_key（重点关注）：显示可能应用在这张表上的索引，一个或多个"></a>possible_key（重点关注）：显示可能应用在这张表上的索引，一个或多个</h5></li><li><h5 id="key（重点关注）：实际使用的索引，如果为NULL，则没有使用索引。"><a href="#key（重点关注）：实际使用的索引，如果为NULL，则没有使用索引。" class="headerlink" title="key（重点关注）：实际使用的索引，如果为NULL，则没有使用索引。"></a>key（重点关注）：实际使用的索引，如果为NULL，则没有使用索引。</h5></li><li><p>key_len：表示索引中使用的字节数，该值为索引字段的最大可能长度，并非实际使用长度，在不损失精确性的前提下，长度越短越好</p></li><li><p>rows：mysql认为必须要执行查询的行数，在innodb引擎的表中，是一个估计值，可能并不准确</p></li><li><p>filtered：表示返回结果的行数占需读取行数的百分比，filtered的值越大越好。</p></li></ul></li></ul></li></ul><h4 id="2-6）索引使用"><a href="#2-6）索引使用" class="headerlink" title="2.6）索引使用"></a>2.6）索引使用</h4><ul><li><h5 id="最左前缀法则："><a href="#最左前缀法则：" class="headerlink" title="最左前缀法则："></a>最左前缀法则：</h5><ul><li>如果索引了多例（联合索引），要遵守最左前缀法则，最左前缀法则是指查询从索引的最左列开始，并且不跳过索引中的列。如果跳跃某一列，索引将部分失效（后面的字段索引失效）</li></ul></li><li><h5 id="范围查询：联合索引中，出现范围查询，范围查询右侧的索引列失效"><a href="#范围查询：联合索引中，出现范围查询，范围查询右侧的索引列失效" class="headerlink" title="范围查询：联合索引中，出现范围查询，范围查询右侧的索引列失效"></a>范围查询：联合索引中，出现范围查询，范围查询右侧的索引列失效</h5><ul><li>也就是说业务允许的情况下，尽量用&gt;&#x3D;而不是&gt;</li></ul></li><li><h5 id="索引列运算"><a href="#索引列运算" class="headerlink" title="索引列运算"></a>索引列运算</h5><ul><li>不要在索引列上进行运算操作，否则索引将失效</li></ul></li><li><h5 id="字符串类型字段使用时，不加引号，索引将失效"><a href="#字符串类型字段使用时，不加引号，索引将失效" class="headerlink" title="字符串类型字段使用时，不加引号，索引将失效"></a>字符串类型字段使用时，不加引号，索引将失效</h5></li><li><h5 id="模糊查询"><a href="#模糊查询" class="headerlink" title="模糊查询"></a>模糊查询</h5><ul><li><p>如果仅仅是尾部模糊匹配，索引不会失效，如果是头部模糊匹配索引将失效</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">like &#39;xxx%&#39;  #索引不失效like &#39;%xxx&#39;  #索引失效like &#39;%xxx%&#39;  #索引失效<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul></li><li><h5 id="or连接的条件"><a href="#or连接的条件" class="headerlink" title="or连接的条件:"></a>or连接的条件:</h5><ul><li>如果or前的条件中有列有索引，而后面的列中没有索引，那么涉及的索引都不会被用到</li><li>使用or必须所有条件字段都有索引，不然索引失效</li></ul></li><li><h5 id="数据分布影响"><a href="#数据分布影响" class="headerlink" title="数据分布影响"></a>数据分布影响</h5><ul><li>如果MYSQL评估使用索引比全表扫描更慢，则不使用索引</li></ul></li><li><h5 id="SQL提示"><a href="#SQL提示" class="headerlink" title="SQL提示"></a>SQL提示</h5><ul><li><p>SQL提示，是优化数据库的一个重要手段，简单来说，就是在SQL语句中加入一些认为的提示来达到优化操作的目的。</p></li><li><p>use index：告诉数据库建议使用哪个索引</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select * from xxx use index(index_name)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>ignore index：告诉数据库不使用哪个索引</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select * from xxx ignore index(index_name)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>force index ：告诉数据库必须使用这个索引</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select * from xxx force index(index_name)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li><li><h5 id="覆盖索引"><a href="#覆盖索引" class="headerlink" title="覆盖索引"></a>覆盖索引</h5><ul><li><p>尽量使用覆盖索引（查询使用了索引，并且需要返回的列，在该索引中已经全部能找到），减少select *。</p></li><li><p>比如：当查询多个字段时，有些字段没有索引，就会产生回表查询的步骤，先是根据条件查询二级（辅助）索引中拿到主键和查询相应的字段信息，然后回到聚集（主键）索引，用主键查询二级（辅助）索引中没有的字段值</p><p>​而如果索引覆盖了这个字段，就直接返回，不用进行回表查询</p><ul><li><h5 id="那么问题来了，为什么说要少使用select-呢？"><a href="#那么问题来了，为什么说要少使用select-呢？" class="headerlink" title="那么问题来了，为什么说要少使用select * 呢？"></a>那么问题来了，为什么说要少使用select * 呢？</h5><ul><li>因为除非你创建了一个覆盖了全部字段的联合索引，不然select * 就会查询所有字段，必然会触发回表查询，影响效率</li></ul></li><li><p>面试题：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">#一张表，有四个字段（id,username,passwdord,status）,由于数据量大，需要对以下的SQL语句进行优化，该如何进行？select id,username,password from tb_user where username&#x3D;&#39;itcast&#39;#答：创建username和password的联合索引，这样提升了效率并且联合索引避免了回表查询的步骤，这就是（覆盖索引）#如果只创建一个username的索引，那么password字段没有索引覆盖，则会发生回表查询#MYSQL底层执行步骤则会是先去二级索引中根据username&#x3D;&#39;itcast&#39;查询，并且在二级索引中拿到username和id的数据，但是这时候没有password这个字段的数据，然后底层会拿着id去聚集索引中根据id查询password的值在返回，这就是（回表查询）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul></li><li><h5 id="前缀索引"><a href="#前缀索引" class="headerlink" title="前缀索引"></a>前缀索引</h5><ul><li><p>当字段类型为字符串时，有时候需要索引很长的字符串，这会让索引变得很大，查询时浪费大量的磁盘IO，影响查询效率，此时可以只将字符串的一部分前缀，建立索引，这样可以大大节约索引空间，从而提高索引效率。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">#语法create index index_name on table_name(column(n))#index_name索引名 table_name表名  column字段名  n前缀长度（提取n个字符构建索引）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>前缀长度</p><ul><li>可以根据索引的选择性来决定，而选择性值不重复的索引值和数据表的记录总数的比值，索引选择性越高则查询效率越高</li></ul><p>​       唯一索引的选择性是1，也是效率最高的</p><ul><li><p>可以通过以下SQL语句来判断前缀长度设置多少比较好</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select count(distinct substring(字段名,1,xxx))&#x2F;count(*) from 表名#因为count(distinct 字段名)&#x2F;count(*)如果字段设置了不能重复，这个查出来肯定是1，然后我们通过substring截取字符串，看截取多少的时候会发生数据重复，根据这个来建立前缀索引<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>底层：</p><ul><li>创建前缀索引时底层会创建二级索引B+树，每个叶子节点挂着的是对应的id,首先会根据传入的参数值进行查找对应的叶子节点，找到后拿着id去聚集索引中进行回表查询，最终拿到一行的数据并且拿到查询字段的值和传入的查询字段的值进行对比，如果正确则返回数据，然后二级索引会继续在链表的下一个节点进行查询，看看是不是还有和传入参数值相同的字段</li></ul></li></ul></li></ul></li><li><p>单列索引与联合索引</p><ul><li>单列索引：即一个索引只包含了单个列</li><li>联合索引：即一个索引包含了多个列</li></ul></li></ul><h4 id="2-7）索引设计原则"><a href="#2-7）索引设计原则" class="headerlink" title="2.7）索引设计原则"></a>2.7）索引设计原则</h4><ol><li>针对于数据量较大，且查询比较频繁的表建立索引</li><li>针对于常作为查询条件，排序，分组操作的字段建立索引</li><li>尽量选择区分度高的列作为索引，尽量建立唯一索引，区分度越高，使用索引的效率越高</li><li>如果是字符串类型的字段，字段的长度较长，可以针对字段的特点，建立前缀索引</li><li>尽量使用联合索引，减少单利索引，查询时，联合索引很多时候可以覆盖索引，节省存储空间，避免回表，提高查询效率</li><li>要控制索引的数量，索引并不是多多益善，索引越多，维护索引结构的代价也就越大，会影响增删改的效率</li><li>如果索引列不能存储null值，请在创建表时使用NOT NULL 约束他，当优化器知道没列是否包含NULL值时，他可以更好的确定哪个索引最有效的用于查询</li></ol><h4 id="2-8）总结"><a href="#2-8）总结" class="headerlink" title="2.8）总结"></a>2.8）总结</h4><ol><li><h5 id="索引概述"><a href="#索引概述" class="headerlink" title="索引概述"></a>索引概述</h5><ul><li>索引是高效获取数据的数据结构</li></ul></li><li><p>索引结构</p><ul><li>B+Tree</li><li>Hash</li></ul></li><li><p>索引分类</p><ul><li>主键索引：建表时如果指定了主键，自动创建的索引</li><li>唯一索引：字段值不重复的</li><li>常规索引：常规创建的索引</li><li>全文索引：不需要知道</li><li>innoDB存储引擎中全部索引分为两类<ul><li>聚集索引：聚集索引必须存在并且只能有一个，默认主键索引就是聚集索引，如果没有主键，会选择第一个唯一索引作为聚集索引，如果没有唯一索引，MYSQL会设置一个隐藏的id作为索引<ul><li>B+树的叶子节点挂着全部的数据</li></ul></li><li>二级索引：B+树的叶子节点挂着主键</li></ul></li></ul></li><li><p>索引语法</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">create [unique] index xxx on xxx(xxx)show index from xxx;drop index xxx on xxx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>SQL性能分析</p><ul><li>执行频次，慢日志查询，profile，explain（使用最多）</li></ul></li><li><p>索引使用原则</p><ul><li>联合索引，索引失效，SQL提示，覆盖索引，前缀索引，单列&#x2F;集合索引</li></ul></li></ol><h1 id="3-SQL优化"><a href="#3-SQL优化" class="headerlink" title="3.SQL优化"></a>3.SQL优化</h1><h4 id="3-1）插入数据"><a href="#3-1）插入数据" class="headerlink" title="3.1）插入数据"></a>3.1）插入数据</h4><ul><li><p>insert优化：</p><ul><li><p>批量插入</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">insert into 表名 values （xxx）,(xxxx)#建议插入语句直接写一句话批量插入，减少与数据库的连接，单次建议1000条数据以下<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>手动提交事务</p><ul><li>如果自动提交事务每次都会开启事务提交事务，事务的频繁开启与关闭影响了效率</li></ul></li><li><p>主键顺序插入</p><ul><li>主键按顺序插入性能会比乱序高</li></ul></li></ul></li><li><p>大批量插入数据</p><ul><li><p>如果一次性需要插入大批量数据，使用insert语句插入性能比较低，此时可以使用Mysql数据库提供的load指令进行插入，操作如下：</p></li><li><p><img src="C:\Users\吕飞扬\Desktop\SQL调优\img\C30A70BD28BD247EAFEEE9D91E340453.png" alt="C30A70BD28BD247EAFEEE9D91E340453"></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">#客户端连接服务端时，加上参数--local-infilemysql--local-infile -u root -p#设置全局参数local_infile为1，开启从本地加载文件导入数据的开关set global local_infile&#x3D;1;#执行load指令将准备好的数据，加载到表结构中load data local infile &#39;&#x2F;root&#x2F;sql1.log&#39; into table &#39;tb_user&#39; fields terminated by &#39;,&#39; lines terminated by &#39;\n&#39;#load data local infile 文件路径 into table 表名 fields terminated by 文件中数据只用什么分隔 lines terminated by （每一行使用什么分隔）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><h4 id="3-2）主键优化"><a href="#3-2）主键优化" class="headerlink" title="3.2）主键优化"></a>3.2）主键优化</h4><ul><li>数据组织方式<ul><li>在InnoDB存储引擎中，表数据都是根据主键顺序组织存放的，这种存储方式的表称为索引组织表</li></ul></li><li>页分裂<ul><li>页可以为空，也可以填充一半，每个页包含了2-N行数据</li></ul></li><li>页合并<ul><li>当删除一行记录时，实际上记录并没有被物理删除，只是记录被标记为删除并且它的空间变得允许被其他记录声明使用，当页中删除的记录打到（默认是50%），innoDB会开始寻找最靠近页（前或后）看看是否可以合并两个页优化空间使用</li></ul></li><li>主键设计原则<ul><li>尽量降低主键的长度</li><li>插入数据时，尽量选择顺序插入，选择使用AUTO_INCREMENT自增主键。<ul><li>乱序插入可能会发生页分裂现象，影响效率</li></ul></li><li>尽量不要使用UUID做主键或者是其他自然主键，如身份证号<ul><li>因为UUID是无序的，并且很长，所以可能会发生页分裂现象</li></ul></li><li>业务操作时，避免对主键的修改</li></ul></li></ul><h4 id="3-3）order-by优化"><a href="#3-3）order-by优化" class="headerlink" title="3.3）order by优化"></a>3.3）order by优化</h4><ul><li><p>Using filesort：通过表的索引或全表扫描，读取满足条件的数据行，然后在排序缓冲区sort buffer 中完成排序操作，所有不是通过索引直接返回排序结果的排序都叫filesort排序</p></li><li><p>Using index：通过有序索引顺序扫描直接返回有序数据，这种情况即为using index ,不需要额外排序，操作效率高</p></li><li><p>就是说排序的时候，因为索引建立默认都是升序排，如果你进行排序使用一个升序一个降序，就会出现Using filesort，这时候你需要而外建立一个相应的索引才会走索引 </p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">create index 索引名 on 表名（字段名 asc,字段名 desc）<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p>总结：</p><ul><li>根据字段建立合适的索引，多字段排序时，也遵循最左前缀法则</li><li>尽量使用覆盖索引</li><li>多字段排序，一个升序一个降序，此时需要注意联合索引在创建时的规则</li><li>如果不可避免的出现filesort，大数据量排序时，可以适当增加排序缓冲器大小（默认256kb）</li></ul></li><li></li></ul></li></ul><h4 id="3-4）group-by-优化"><a href="#3-4）group-by-优化" class="headerlink" title="3.4）group by 优化"></a>3.4）group by 优化</h4><ul><li>和前面的一样，满足最左前缀法则，尽量使用覆盖索引即可</li></ul><h4 id="3-5）limit-优化"><a href="#3-5）limit-优化" class="headerlink" title="3.5）limit 优化"></a>3.5）limit 优化</h4><ul><li><p>一个常见又非常头疼的问题就是limit 2000000,10 ,此时需要Mysql排序前200000记录，仅仅返回10条记录，其他记录，查询排序的代价非常大</p><ul><li><p>通过覆盖索引和子查询的方式优化</p><ul><li><p>优化思路：一般分页查询时，通过创建覆盖索引能够比较好的提高性能，可以通过覆盖索引加子查询形式进行优化</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">#先查询这张表的主键select id from xxx order by id limit 200000,10#把上面那张表看做另外一张表，进行一个连表查询select a.* from xxx a join (select id from xxx order by id limit 200000,10 ) b on a.id&#x3D;b.id<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul></li></ul><h4 id="3-6）count-优化"><a href="#3-6）count-优化" class="headerlink" title="3.6）count 优化"></a>3.6）count 优化</h4><ul><li><pre><code class="mysql">select count(*) from tb_user<pre class="line-numbers language-none"><code class="language-none">  - MyISam引擎把一个表的总行数存在了磁盘上，因此执行count（*）的时候会直接返回个数，效率很高  - InnoDB引擎就很麻烦了，它执行count（*）需要把数据一行一行的从引擎里面读出来，然后累积数  - 优化思路    - 自己计数：利用redis，每当我们插入一条数据时，往redis里增加一个数，自己维护，一般没有很好的手段来优化count字段  - count的几种用法    - count()是一个聚合函数，对于返回的结果集，一行行的判断，如果count函数的参数不是null,累计值就加1，否则不加，最后返回累计值    - 用法：count（*）、count（主键）、count（字段）、count（1）      - 哪个效率高呢？      - count（主键）：InnoDB引擎会遍历整张表，把每一行的主键id值都取出来，返回给服务层。服务层拿到主键后，直接按行进行累加（因为主键不可能为null）      - count（字段）：没有not null约束，InnoDB会遍历整张表把每一行的字段值都取出来，返回给服务层，服务层判断是否为null，不为null,计数累加，如果有not null约束，和主键一样，直接遍历累加      - count（1）：innoDB会遍历整张表，但不取值，服务层对于返回的每一行，放一个数字1进行，直接按行进行累加      - count（*）：InnoDB并不会把全部字段取出来，而是专门做了优化，不取值，服务层直接按行进行累加。      - 所以效率最高的是count（*）其次是count（1）然后是count（主键）或带有not null的count(字段),最后是没有not null的count（字段）#### 3.7）update 优化- InnoDB的行锁是针对索引加的锁，不是针对记录加的锁，并且该索引不能失效，否则就会从行锁升级成表锁  - 通俗点说，就是进行update 表名 set xxx&#x3D;xxx where 条件   这个条件必须是有索引的，不然就会锁住整个表（从行锁升级成表锁）#### 3.8）总结- 插入数据的优化：  - 如果批量插入，最好使用load data local infile- 主键优化：  - 页分裂  - 页合并  - 主键长度最好短，主键最好顺序插入，不然容易发生页分裂影响效率  - 推荐使用主键自增- order by优化：  - using index：直接通过索引返回数据，效率高  - using filesort：需要将返回的结果在排序缓冲区排序  - 尽量使用覆盖索引，并且索引在创建时默认为asc，如果查询时一个asc一个desc或者是desc需要指定索引创建时的排序方式- group by优化：  - 索引，多字段满足最左前缀法则- limit优化：  - limit越往后性能越低，因为他会把所有的记录查询出来，然后在丢掉不用的。  - 覆盖索引+子查询- count优化  - 没什么优化手段，如果要优化只能用非关系数据库自己计数  - count（）各种的性能对比- update优化  - 一定要根据索引字段为条件进行更新，避免行锁升级成表锁# 4.视图&#x2F;存储过程&#x2F;触发器#### 4.1）视图- ##### 介绍：  - 视图是一种虚拟存在的表，视图中的数据并不存在数据库中，行和列数据来自定义事务的查询中使用的表，并且是在使用视图时动态生成的。    通俗的讲，视图只保存了查询的SQL逻辑，不保存查询结果。所以我们在创建视图的时候，主要的工作就落在创建这条SQL查询语句上。- ##### 创建：  &#96;&#96;&#96;mysql  create view 视图名称 as select 语句 [with cascaded check option]  #比如创建视图的select指定id&lt;10，如果创建完之后通过视图添加数据一个id为11的数据，视图是不会显示这条数据的（主表中会显示），需要在创建的时候后面加上with cascaded check option来检查选项，如果在通过视图添加id&gt;10的数据就会报错，不会往主表中加数据了  视图检查选项中看详情<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></code></pre></li><li><h5 id="查询："><a href="#查询：" class="headerlink" title="查询："></a>查询：</h5><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">#查看创建视图语句show create view 视图名称；#查看视图数据select * from 视图名称；<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><h5 id="修改："><a href="#修改：" class="headerlink" title="修改："></a>修改：</h5><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">#方式一create view 视图名称[(列名列表)] as select语句#方式二alter view 视图名称[(列名列表)] as select语句#其实就是创建一个新的视图，取和要修改的视图一样的名字，然后mysql会直接帮你覆盖原来名字的视图，起到修改作用<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><h5 id="删除："><a href="#删除：" class="headerlink" title="删除："></a>删除：</h5><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">drop view 视图名称，视图名称<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><h5 id="视图的检查选项"><a href="#视图的检查选项" class="headerlink" title="视图的检查选项"></a>视图的检查选项</h5><ul><li><p>当使用with check option 子句创建视图时，Mysql会通过视图检查正在更改的每个行，例如：插入、更新、删除，以使其符合视图的定义。mysql允许基于另一个视图创建视图，它还会检查依赖视图中的规则以保持一致性。为了确定检查的范围，mysql提供了两个选项：cascaded和local,默认是cascaded</p></li><li><p>cascaded：比如，基于没有指定with cascaded check option的视图1创建的视图2，视图2中有指定with cascaded check option，那么进行增删改的时候，会对视图2和视图1的条件进行联合判断，也就是说会自动给视图1也指定with cascaded check option</p><ul><li>如果这时候在来一个没有指定视图检查选项的视图3来基于视图2创建视图，那么如果符合视图2的select语句条件则插入成功，如果符合视图2不符合视图3，则视图3中看不见，但是基表中数据还是会有</li></ul></li><li><p>local：比如基于视图1创建的视图2，视图2指定了with local check option,视图1没有指定，那么只会根据视图2的条件判断是否能插入数据，如果视图1也指定了检查选项才会判断条件</p></li><li><p>cascaded和local的区别：cascaded会自动把基于的那个视图加上检查选项，并需要满足所有的视图条件才能插入，而local不会自动添加检查选项，有那个视图指定了检查选项才会进行判定</p></li></ul></li><li><h5 id="视图的更新"><a href="#视图的更新" class="headerlink" title="视图的更新"></a>视图的更新</h5><ul><li>要使视图可更新，视图中的行与基础表中的行之间必须存在一一对应关系，如果视图包含以下任何一项，则不能更新：<ul><li>聚合函数或串口函数（SUM() 、MIN()、MAX()、COUNT()等）</li><li>DISTINCT</li><li>GROUP BY</li><li>HAVING</li><li>UNION或者UNION ALL</li></ul></li></ul></li><li><h5 id="作用："><a href="#作用：" class="headerlink" title="作用："></a>作用：</h5><ul><li><p>简单</p><ul><li>视图不仅可以简化用户对数据的理解，也可以简化他们的操作。那些被经常使用的查询可以被定义为视图，从而使的用户不必为以后的操作每次指定全部的条件</li></ul></li><li><p>安全</p><ul><li>数据库可以授权，但不能授权到数据库特定行和特定的列上，通过视图用户只能查询和修改他们所能见到的数据</li></ul></li><li><p>数据独立</p><ul><li>视图可帮助用户屏蔽真实表结构变化带来的影响</li></ul></li></ul></li><li><p>案例</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">#1.为了保证数据库表的安全性，开发人员在操作tb_user表时，只能看到用户的基本字段，屏蔽手机号和邮箱两个字段create view tb_user_view as select id,name,profession,age,gender,status from tb_user#2.查询每个学生所选修的课程（三张表联查），这个功能在很多业务中都有使用到，为了简化操作，定义一个视图create view tb_three as select s.name as studentname,s.no,c.name as coursename from student_course sc,student s, course c where sc.id&#x3D;s.id and s.id&#x3D;c.id <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="4-2）存储过程"><a href="#4-2）存储过程" class="headerlink" title="4.2）存储过程"></a>4.2）存储过程</h4><ul><li><h5 id="介绍："><a href="#介绍：" class="headerlink" title="介绍："></a>介绍：</h5><ul><li>存储过程是事先经过编译并存储在数据库中的一段SQL语句的集合，调用存储过程可以简化应用开发人员的很多工作，减少数据的数据库和应用服务器之间的传输，对于提高数据处理的效率是有好处的。</li><li>存储过程思想上很简单，就是数据库SQL语言层面的代码封装与重用</li></ul></li><li><h5 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h5><ul><li>封装、复用</li><li>可以接收参数，也可以返回数据</li><li>减少网络交互、提升效率</li></ul></li><li><h5 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h5><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">create procedure 存储过程名称(参数列表)begin    --SQL语句;end;#注意：在命令行中，执行创建存储过程的SQL时，需要通过关键字delimiter指定SQL语句的结束符<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><h5 id="调用"><a href="#调用" class="headerlink" title="调用"></a>调用</h5><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">call 名称(参数)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><h5 id="查看"><a href="#查看" class="headerlink" title="查看"></a>查看</h5><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select * from information_schema.routines where routine_schema&#x3D;&#39;xxx&#39; #查询指定数据库的存储过程及状态信息 xxx是数据库名show create procedure 存储过程名称  #查询某个存储过程的定义<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><h5 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h5><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">drop procedure if exists 存储过程名字;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><h5 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h5><ul><li><p>系统变量是MYSQL服务器提供，不是用户定义的，属于服务器层面，分为全局变量GLOBAL、会话变量SESSION</p></li><li><p>查看系统变量</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">#查看所有的系统变量show [session|global] variables#可以通过like模糊匹配方式查找变量show [session|global] varibales like &#39;...&#39;#查看指定变量的值select @@[session|global] 系统变量名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>设置系统变量</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">set [session|global] 系统变量名&#x3D;值;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>重新启动之后设置的值会恢复初始值，如果想永久修改，在&#x2F;etc&#x2F;my.cnf中配置</p></li></ul></li><li><h5 id="用户自定义变量：是用户根据需要自己定义的变量，用户变量不用提前声明，在用的时候直接用”-变量名“就可以使用，其作用域为当前连接"><a href="#用户自定义变量：是用户根据需要自己定义的变量，用户变量不用提前声明，在用的时候直接用”-变量名“就可以使用，其作用域为当前连接" class="headerlink" title="用户自定义变量：是用户根据需要自己定义的变量，用户变量不用提前声明，在用的时候直接用”@变量名“就可以使用，其作用域为当前连接"></a>用户自定义变量：是用户根据需要自己定义的变量，用户变量不用提前声明，在用的时候直接用”@变量名“就可以使用，其作用域为当前连接</h5><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">#赋值set @var_name &#x3D; expr 或 select 变量名 :&#x3D; 值#通过查询出来的数据赋值给变量select 字段名 into @var_name from 表名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">#使用select @var_name;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><h5 id="局部变量：是根据需要定义的在局部生效的变量，访问之前，需要declare声明。可用作存储过程内的局部变量和输入参数，局部变量的范围是在其内声明的begin…end块。"><a href="#局部变量：是根据需要定义的在局部生效的变量，访问之前，需要declare声明。可用作存储过程内的局部变量和输入参数，局部变量的范围是在其内声明的begin…end块。" class="headerlink" title="局部变量：是根据需要定义的在局部生效的变量，访问之前，需要declare声明。可用作存储过程内的局部变量和输入参数，局部变量的范围是在其内声明的begin…end块。"></a>局部变量：是根据需要定义的在局部生效的变量，访问之前，需要declare声明。可用作存储过程内的局部变量和输入参数，局部变量的范围是在其内声明的begin…end块。</h5><ul><li><p>声明</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">declare 变量名 变量类型<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>示例</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">create procedure p2()begindeclare stu_cont int default 0;select count (*) into stu_count from student;select stu_count;end;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><h5 id="if"><a href="#if" class="headerlink" title="if"></a>if</h5><ul><li><pre><code class="mysql">if 条件1 then 变量赋值语句elseif 条件 then 变量赋值语句else 条件 then 变量赋值语句end if;select xxx; #返回展示结果<pre class="line-numbers language-none"><code class="language-none">      - ##### 参数：  - in（默认）：该类参数作为输入，也就是需要调用时传入值  - out：该类参数作为输出，也就是该参数可以作为返回值  - inout：既可以作为输入参数，也可以作为输出参数  - 语法：    &#96;&#96;&#96;mysql    create procedure 存储过程名称（in&#x2F;out&#x2F;inout）    begin    --SQL语句    end;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></code></pre></li><li><p>案例</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">#一、根据传入参数score,判定当前分数对应的分数等级，并返回#1. score&gt;&#x3D;85等级为优秀#2. score&gt;&#x3D;60分且score&lt;85分，等级为及格。#3. score&lt;60分，等级为不及格。create procedure p4(in score int,out result varchar)beginif score &gt;&#x3D;85 thanset result:&#x3D;&#39;优秀&#39;;elseif score &gt;&#x3D;60 thanset result:&#x3D;&#39;及格&#39;;else result:&#x3D;&#39;不及格&#39;;end if;end;#调用p4call p4(68,@result);select @result;#二、将传入的200分制的分数，进行换算，换成百分制，然后返回create procedure p5(inout score double)begin set score:&#x3D;score*0.5;end;#调用p5set @score&#x3D;78;call p5(@score);select @score;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><h5 id="case"><a href="#case" class="headerlink" title="case:"></a>case:</h5><ul><li><p>语法</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">case case_valuewhen when_value1 then sql语句when when_value2 then sql语句else sql语句end case<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>案例</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">#根据传入的月份，判定月份所属的季节#1-3月份为第一季度，4-6月份为第二季度，7-9月份为第三季度，10-12月份为第四季度create procedure p6(in month int)begin declare result varchar(10);    case     when month&gt;&#x3D;1 and month&lt;&#x3D;3 then    set result:&#x3D;&#39;第一季度&#39;;    when month&gt;&#x3D;4 and month &lt;&#x3D;6 thenset result:&#x3D;&#39;第二季度&#39;;when month&gt;&#x3D;7 and month &lt;&#x3D;9 thenset result:&#x3D;&#39;第三季度&#39;;when month&gt;&#x3D;10 and month &lt;&#x3D;12 thenset result:&#x3D;&#39;第四季度&#39;;elseset result :&#x3D;&#39;非法参数&#39;;end case;select concat(&#39;你输入的月份为&#39;，month,&#39;所属季度为&#39;，result);#concat函数是字符串拼接函数end<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><h5 id="while"><a href="#while" class="headerlink" title="while"></a>while</h5><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">#先判定条件，如果天剑为true则执行逻辑，否则，不执行逻辑，和java中的while相似while 条件 doSQL逻辑end while;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>案例</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">#计算从1累加到n的值，n为传入的参数值create procedure p7(in n int)begindeclare total int default 0;while n&gt;0 doset total:&#x3D;total+n;set n :&#x3D; n-1;end while;select total;end;call p7(100);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><h5 id="repeat"><a href="#repeat" class="headerlink" title="repeat"></a>repeat</h5><ul><li><p>repeat是有条件的循环控制语句，当满足条件的时候退出循环，具体语法为：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">#先执行一次逻辑，然后判定逻辑是否满足，如果满足，则退出，如果不满足，则继续下一次循环repeatsql逻辑until 条件end repeat;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>案例</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">#计算从1累加到n的值，n为传入的参数值create procedure p8(in n int)begin  declare total int default 0;  repeat  set total :&#x3D; total +n;  set n:&#x3D;n-1;  until n&lt;&#x3D;0;  end repeat;end;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><h5 id="loop"><a href="#loop" class="headerlink" title="loop"></a>loop</h5><ul><li><p>loop实现简单的循环，如果不再sql逻辑中增加退出循环的条件，可以用其来实现简单的死循环，loop可以配合一下两个语句使用：</p><ul><li><p>leave：配合循环使用，退出循环。</p></li><li><p>iterate：必须用在循环中，作用是跳过当前循环剩下的语句，直接进入下一次循环。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">loopSQL逻辑end loop leave label; --退出指定标记的循环体iterate label; --直接进入下一次循环<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>案例</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">#计算从1累加到n的值，n为传入的参数值create procedure p9(in n int)begin declare total int default 0;sum:loopif n&lt;&#x3D;0 then leave sum;end if;set total :&#x3D;total +n;set n:&#x3D;n-1;end loop sum;select total;#计算从1到n之间的偶数累加的值，n为传入的参数值<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><h5 id="游标"><a href="#游标" class="headerlink" title="游标"></a>游标</h5><ul><li><p>游标是用来存储查询结果集的数据类型，在存储过程和函数中可以使用游标对结果进行循环的处理。游标的使用包括游标的声明、open、fetch和close </p></li><li><p>语法</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">#创建游标declare 游标名称 cursor for 查询语句#打开游标open 游标名称;#获取游标记录fetch 游标名称 into 变量[，变量];#关闭游标close 游标名称;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>案例</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">#根据传入的参数uage ,来查询用户表tb_user中，所有的用户年龄小于等于uage的用户姓名和专业，并将用户的姓名和专业插入到所创建的一张新表中create peocedure p11(in uage int)begin#要先声明变量在声明游标，否则报错declare name varchar;declare upro varchar;declare u_cursor cursor for select name,profession from tb_user where age&lt;&#x3D;uage;#声明条件处理程序,当满足状态码为02000时触发declare exit handler for SQLSTATE &#39;02000&#39; close u_cursorfrop table if exists tb_user_pro;create table if ont exists tb_user_pro(    id int primary key,      name varchar,        profession varchar    );        open u_cursor;    while true do    fetch u_cursor into uname,upro;    insert into tb_user_pro values(null,uname,upro);    end while;    close u_cursor;endcall p11(40)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>条件处理程序</p><ul><li><p>可以用来定义在流程控制结构执行过程中遇到的问题时响应的处理步骤。具体语法为：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">declare handler_action handler for confition_value [condition_value...] statement;handler_action continue：继续执行当前程序 exit:终止执行当前程序condition_valuesqlstate sqlstate_value：状态码，如02000SQLWARNING:所有以01开头的SQLSTATE代码的简写not found ：所有以02开头的SQLSTATE代码的简写sqlexception：所有没有被SQLWARNING或NOT FOUND捕获的SQLSTATE代码的简写<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><h4 id="4-3）存储函数-用的少，因为他能的做到的存储过程都能"><a href="#4-3）存储函数-用的少，因为他能的做到的存储过程都能" class="headerlink" title="4.3）存储函数(用的少，因为他能的做到的存储过程都能)"></a>4.3）存储函数(用的少，因为他能的做到的存储过程都能)</h4><ul><li><p>存储函数就是有返回值的存储过程，存储函数的参数只能是in类型的。具体语法如下：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">create function 存储函数名称（参数列表）returns type [characteristic]beginsql语句retuen ...end;characteristic说明：DETERMINISTIC：相同的输入参数总是产生相同的结果NO SQL：不包含SQL语句READS SQL DATA：包含读取数据的语句，但不包含写入数据的语句。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>案例</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">#从1到n的累加create function fun1(n int)return int deterministicbegindeclare total int default 0;while n&gt;0 do set total:&#x3D;total+n;     set n：&#x3D;n-1;    end while;         return total;end;select fun1(100);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><h4 id="4-4）触发器"><a href="#4-4）触发器" class="headerlink" title="4.4）触发器"></a>4.4）触发器</h4><ul><li><h5 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h5><ul><li>触发器是与表有关的数据库对象，是指在增删改之后或之前，触发并执行触发器中定义的SQL语句集合，触发器的这种特性可以协助应用在数据库端确保数据的完整性，日志纪律，数据校验等操作。</li><li>使用别名OLD和NEW来引用触发器中发生变化的记录内容，这与其他的数据库时相似的。现在触发器还只支持行级触发，不支持语句级触发。<img src="C:\Users\吕飞扬\Desktop\SQL调优\img\D4D22C7376FCAFF5ECE126BDB8B7D879.png" alt="D4D22C7376FCAFF5ECE126BDB8B7D879"></li></ul></li><li><p>语法</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">#创建create trigger trigger_name before&#x2F;after insert&#x2F;update&#x2F;delete #before和after 指定sql执行前或执行后执行触发器on tbl_name from each row #--行级触发器,监控表的namebeginsqlend;#查看show trigger;#删除drop trigger[数据库名] trigger_name;   不指定数据库名默认当前数据库<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>案例<img src="C:\Users\吕飞扬\Desktop\SQL调优\img\IMG_7950.PNG" alt="IMG_7950"></p></li></ul><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">create trigger tb_user_insert_triggerafter insert on tb_user for each rowbegininsert into user_logs(id,operation,operate_time,operate_id,operate_params) values(null,&#39;insert&#39;,now(),new.id,concat(&#39;插入的数据内容为:id&#x3D;&#39;，new.id,&#39;name&#x3D;&#39;,new.name,&#39;phone&#x3D;&#39;,new.phone))end;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>修改数据的触发器</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">create trigger tb_user_update_triggerafter update on tb_user for each rowbegininsert into user_logs(id,operation,operate_time,operate_id,operate_params) values(null,&#39;update&#39;,now(),new.id,concat(&#39;更新之前的插入的数据内容为:id&#x3D;&#39;，old.id,&#39;name&#x3D;&#39;,old.name,&#39;phone&#x3D;&#39;,old.phone，    &#39;更新之后的插入的数据内容为:id&#x3D;&#39;，new.id,&#39;name&#x3D;&#39;,new.name,&#39;phone&#x3D;&#39;,new.phone))end;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>删除数据的触发器</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">create trigger tb_user_delete_triggerafter delete on tb_user for each rowbegininsert into user_logs(id,operation,operate_time,operate_id,operate_params) values(null,&#39;insert&#39;,now(),old.id,concat(&#39;删除数据内容为:id&#x3D;&#39;，old.id,&#39;name&#x3D;&#39;,old.name,&#39;phone&#x3D;&#39;,old.phone))end;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="4-5）总结"><a href="#4-5）总结" class="headerlink" title="4.5）总结"></a>4.5）总结</h4><ul><li><h5 id="视图view："><a href="#视图view：" class="headerlink" title="视图view："></a>视图view：</h5><ul><li>虚拟存在的表，不保存查询结果，只保存查询的SQL逻辑</li><li>简单、安全、数据独立</li></ul></li><li><h5 id="存储过程procedure："><a href="#存储过程procedure：" class="headerlink" title="存储过程procedure："></a>存储过程procedure：</h5><ul><li>事先定义并存储在数据库的一段SQL语句的集合。</li><li>减少网络交互，提高性能、封装重用</li><li>变量、if、case、参数（in&#x2F;out&#x2F;inout）、while、repeat、loop、cursor、handler</li></ul></li><li><h5 id="存储函数function："><a href="#存储函数function：" class="headerlink" title="存储函数function："></a>存储函数function：</h5><ul><li>存储函数就是有返回值的存储过程，参数类型只能为in类型</li><li>存储函数可以被存储过程替代</li></ul></li><li><h5 id="触发器trigger："><a href="#触发器trigger：" class="headerlink" title="触发器trigger："></a>触发器trigger：</h5><ul><li>可以在表数据进行insert、update、delete、之前或者之后触发</li><li>保证数据完整性、日志记录、数据校验</li></ul></li></ul><h1 id="5-锁"><a href="#5-锁" class="headerlink" title="5.锁"></a>5.锁</h1><ul><li><h5 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h5><ul><li>锁是计算机协调多个进程或线程并发访问某一资源的机制。在数据库中，除传统计算资源（cpu、RAM、I&#x2F;O）的争用之外，数据也是一种供许多用户共享的资源。如何保证数据并发访问的一致性、有效性是所有数据库必须解决的一个问题，锁冲突也是影响数据库并发访问性能的一个重要因素。从这个角度说，锁对数据库而言显得尤其重要，也更加复杂</li></ul></li><li><h5 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h5><ul><li><h6 id="全局锁：锁定数据库中的所有表"><a href="#全局锁：锁定数据库中的所有表" class="headerlink" title="全局锁：锁定数据库中的所有表"></a>全局锁：锁定数据库中的所有表</h6><ul><li><p>介绍：</p><ul><li>全局锁就是对整个数据库实例加锁，加锁后整个实例就处于只读状态，后续的DML的写语句，DDL语句，已经更新操作的事务提交语句都将被阻塞</li><li>其典型的使用场景是做全库的逻辑备份，对所有的表进行锁定，从而获取一致性视图，保证数据的完整性</li></ul></li><li><p>对当前数据库加全局锁</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">#加锁flush tables with read lock;#备份mysqldump -uroot -p1234 备份的数据库名&gt;存放的路径&#x2F;名字.sql#注mysqldump命令不是mysql中使用的命令，直接在命令行中输入，不要在MYSQL中输入#解锁unlock tables;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>因为全局锁是一个比较重的操作存在很多问题</p><ul><li><p>在innoDB引擎中，我们可以在备份时加上参数–single-transaction参数来完成不加锁的一致性数据备份</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysqldump --single-transaction -uroot -p1234 备份的数据库名&gt;存放的路径&#x2F;名字.sql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li></ul></li></ul></li><li><h6 id="表级锁：每次操作锁住整张表"><a href="#表级锁：每次操作锁住整张表" class="headerlink" title="表级锁：每次操作锁住整张表"></a>表级锁：每次操作锁住整张表</h6><ul><li><p>介绍</p><ul><li>表级锁，每次操作锁住整张表。锁定粒度大，发生锁冲突的概率最高，并发度最低，应用在MySIAM、InnoDB、BDB等存储引擎中</li></ul></li><li><p>分类</p><ul><li><p>表锁</p><ul><li>表共享读锁（read lock）：加锁的客户端只读状态如果进行更新等操作直接报错，别的客户端可以读但写时会处于阻塞状态，当解锁时在执行SQL</li><li>表独占写锁（write lock）：加锁的客户端加了写锁，既可以读也可以写，而别的客户端来访问即不能读也不能写</li><li>加锁语法<ul><li>lock tables 表名 read&#x2F;write</li></ul></li><li>释放锁<ul><li>unlock tables &#x2F;客户端断开连接</li></ul></li></ul></li><li><p>元数据锁（meta data lock,MDL）</p><ul><li>MDL加锁过程是系统自动控制，无需显示使用，在访问一张表的时候会自动加上，DML锁主要作用是维护表元数据的数据一致性，在表上又活动事务的时候，不可以对元数据进行操作。<ul><li>简单来说就是，如果这张表存在未提交的事务，则我们不能对这张表进行修改（避免了DML和DDL语句的冲突）<img src="C:\Users\吕飞扬\Desktop\SQL调优\img\3F69321A90C2EB3820D2A07889845109.png" alt="3F69321A90C2EB3820D2A07889845109"></li></ul></li></ul></li><li><p>意向锁</p><ul><li><p>意向共享锁（ls）：由语句select…lock inshare mode添加</p><ul><li>语法</li></ul><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select * from xxx where xxx&#x3D; xxx lock inshare mode<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>与表锁共享锁（read）兼容，与表锁排它锁（write）互斥</li></ul></li><li><p>意向排他锁（lx）:由insert、update、delete、select…for update 添加</p><ul><li>与表锁共享锁（read）级排他锁（write）都互斥，意向锁之间不会互相互斥</li></ul></li></ul></li></ul></li></ul></li><li><h6 id="行级锁：每次操作锁住对应的行数据"><a href="#行级锁：每次操作锁住对应的行数据" class="headerlink" title="行级锁：每次操作锁住对应的行数据"></a>行级锁：每次操作锁住对应的行数据</h6><ul><li><p>介绍：</p><ul><li><p>行级锁，每次操作锁住对应的行数据，锁定粒度最小，发生锁冲突的概率最低，并发度最高。应用在InnoDB存储引擎中。</p><p>InnoDB的数据是基于索引组织的，行锁是通过对索引上的索引项加锁来实现的，而不是对记录加的锁，对于行级锁主要分为以下三类：</p><ul><li><p>行锁：锁定单个行记录的锁，防止其他事务对此进行update和delete。在RC、RR隔离级别下都支持</p><ul><li>innoDB实现了以下两种类型的行锁<img src="C:\Users\吕飞扬\Desktop\SQL调优\img\7999B4666F422CCF839DAE2357DD4C80.png" alt="7999B4666F422CCF839DAE2357DD4C80"><ul><li>共享锁：允许一个事务去读一行，阻止其他事务获得相同的数据集的排他锁</li><li>排他锁：允许获取排它锁的事务更新数据，阻止其他事务获得相同数据集的共享锁和排他锁<img src="C:\Users\吕飞扬\Desktop\SQL调优\img\1151F5A6EB7253F2FAD173BE117659CD.png" alt="1151F5A6EB7253F2FAD173BE117659CD"></li><li>也就是说增删改会自动加排它锁，查的话如果不指定不加任何锁</li></ul></li></ul></li><li><p>间隙锁：锁定索引记录间隙（不含该记录），确保索引记录间隙不变，防止其他事务在这个间隙进行insert,产生幻读，在RR隔离级别下都支持</p><ul><li>索引上给等值查询（唯一索引），给不存在的记录加锁时，优化为间隙锁</li><li>索引上的等值查询（普通索引），向右遍历最后一个值不满足查询需求时，退化为间隙锁</li><li>索引上的范围查询（唯一索引）–会访问到不满足条件的第一个值为止。</li></ul></li><li><p>临键锁：行锁和间隙锁的组合，同时锁住数据，并锁住数据前面的间隙Gap,在RR隔离级别下支持</p></li></ul></li></ul></li></ul></li></ul></li></ul><h4 id="5-1）总结"><a href="#5-1）总结" class="headerlink" title="5.1）总结"></a>5.1）总结</h4><p>间隙锁就是锁住两条数据的间隙，临键锁就是锁住两条数据包括间隙，并且如果是范围查询，还会把范围后面无限大的数据锁住。</p><ul><li>概述<ul><li>在并发访问时，解决数据访问一致性、有效性问题</li><li>全局锁，表级锁，行级锁</li></ul></li><li>全局锁<ul><li>对整个数据库实例加锁，加锁后整个实例就处于只读状态</li><li>性能较差，数据备份时使用</li></ul></li><li>表级锁<ul><li>操作锁住整张表，锁定粒度大，发生锁冲突的概率高</li><li>表锁、元数据锁、意向锁</li></ul></li><li>行级锁<ul><li>操作锁住对应行数据，锁定粒度小，发生锁冲突的概率最低</li><li>行锁，间隙锁，临键锁</li></ul></li></ul><h1 id="6-innoDB引擎"><a href="#6-innoDB引擎" class="headerlink" title="6.innoDB引擎"></a>6.innoDB引擎</h1><h4 id="6-1）逻辑存储原理"><a href="#6-1）逻辑存储原理" class="headerlink" title="6.1）逻辑存储原理"></a>6.1）逻辑存储原理</h4><h4 id="6-2）架构"><a href="#6-2）架构" class="headerlink" title="6.2）架构"></a>6.2）架构</h4><ul><li><h5 id="内存架构"><a href="#内存架构" class="headerlink" title="内存架构"></a>内存架构</h5><ul><li><h6 id="Butter-Pool：缓冲池是主内存中的一个区域，里面可以存储缓存磁盘上经常操作的真实数据，在执行增删改查操作时，先操作缓冲池中的数据（若缓冲池没有数据，则从磁盘加载并缓存），然后再以一定频率刷新到磁盘，从而减少磁盘IO，加快处理速度。"><a href="#Butter-Pool：缓冲池是主内存中的一个区域，里面可以存储缓存磁盘上经常操作的真实数据，在执行增删改查操作时，先操作缓冲池中的数据（若缓冲池没有数据，则从磁盘加载并缓存），然后再以一定频率刷新到磁盘，从而减少磁盘IO，加快处理速度。" class="headerlink" title="Butter Pool：缓冲池是主内存中的一个区域，里面可以存储缓存磁盘上经常操作的真实数据，在执行增删改查操作时，先操作缓冲池中的数据（若缓冲池没有数据，则从磁盘加载并缓存），然后再以一定频率刷新到磁盘，从而减少磁盘IO，加快处理速度。"></a>Butter Pool：缓冲池是主内存中的一个区域，里面可以存储缓存磁盘上经常操作的真实数据，在执行增删改查操作时，先操作缓冲池中的数据（若缓冲池没有数据，则从磁盘加载并缓存），然后再以一定频率刷新到磁盘，从而减少磁盘IO，加快处理速度。</h6><ul><li>缓冲池以Page页为单位，底层采用链表数据结构管理Page，根据状态，将Page分为三种类型：<ul><li>free page：空闲page,未被使用</li><li>clean page：被使用page,数据没有被修改过。</li><li>dirty page：脏页，被使用page,数据被修改过，也中数据与磁盘的数据产生了不一致。</li></ul></li></ul></li><li><h6 id="Change-Buffer：更改缓冲区（针对非唯一二级索引页），在执行DML语句时，如果这些数据Page没有在Buffer-Pool中，不会直接操作磁盘，而会将数据变更存在更改缓冲区Change-Buffer中，在未来数据被读取时，在将数据合并恢复到Buffer-Pool中，在将合并后的数据刷新到磁盘中。"><a href="#Change-Buffer：更改缓冲区（针对非唯一二级索引页），在执行DML语句时，如果这些数据Page没有在Buffer-Pool中，不会直接操作磁盘，而会将数据变更存在更改缓冲区Change-Buffer中，在未来数据被读取时，在将数据合并恢复到Buffer-Pool中，在将合并后的数据刷新到磁盘中。" class="headerlink" title="Change Buffer：更改缓冲区（针对非唯一二级索引页），在执行DML语句时，如果这些数据Page没有在Buffer Pool中，不会直接操作磁盘，而会将数据变更存在更改缓冲区Change Buffer中，在未来数据被读取时，在将数据合并恢复到Buffer Pool中，在将合并后的数据刷新到磁盘中。"></a>Change Buffer：更改缓冲区（针对非唯一二级索引页），在执行DML语句时，如果这些数据Page没有在Buffer Pool中，不会直接操作磁盘，而会将数据变更存在更改缓冲区Change Buffer中，在未来数据被读取时，在将数据合并恢复到Buffer Pool中，在将合并后的数据刷新到磁盘中。</h6></li><li><h6 id="Adaptive-Hash-index-：自适应hash索引，用于优化Buffer-Pool数据的查询，InnoDB存储引擎会架空对表上各索引页的查询，如果观察到hash索引可以提升速度，则建立自适应hash索引。"><a href="#Adaptive-Hash-index-：自适应hash索引，用于优化Buffer-Pool数据的查询，InnoDB存储引擎会架空对表上各索引页的查询，如果观察到hash索引可以提升速度，则建立自适应hash索引。" class="headerlink" title="Adaptive Hash index ：自适应hash索引，用于优化Buffer Pool数据的查询，InnoDB存储引擎会架空对表上各索引页的查询，如果观察到hash索引可以提升速度，则建立自适应hash索引。"></a>Adaptive Hash index ：自适应hash索引，用于优化Buffer Pool数据的查询，InnoDB存储引擎会架空对表上各索引页的查询，如果观察到hash索引可以提升速度，则建立自适应hash索引。</h6><ul><li>自适应哈希索引，无需人工干预，是系统根据情况自动完成。</li><li>参数 adaptive_hash_index</li></ul></li><li><h6 id="Log-Buffer：日志缓冲区，用来保存要写入磁盘中log日志的数据（redo-log、undo-log）-默认大小为16MB，日志缓冲区的日志会定期刷新到磁盘中，如果需要更新、插入或删除许多行的事务，增加日志缓冲区的大小可以节省磁盘IO。"><a href="#Log-Buffer：日志缓冲区，用来保存要写入磁盘中log日志的数据（redo-log、undo-log）-默认大小为16MB，日志缓冲区的日志会定期刷新到磁盘中，如果需要更新、插入或删除许多行的事务，增加日志缓冲区的大小可以节省磁盘IO。" class="headerlink" title="Log Buffer：日志缓冲区，用来保存要写入磁盘中log日志的数据（redo log、undo log）,默认大小为16MB，日志缓冲区的日志会定期刷新到磁盘中，如果需要更新、插入或删除许多行的事务，增加日志缓冲区的大小可以节省磁盘IO。"></a>Log Buffer：日志缓冲区，用来保存要写入磁盘中log日志的数据（redo log、undo log）,默认大小为16MB，日志缓冲区的日志会定期刷新到磁盘中，如果需要更新、插入或删除许多行的事务，增加日志缓冲区的大小可以节省磁盘IO。</h6><ul><li>参数：<ul><li>innodb_log_bufer_size：缓冲区大小</li><li>innodb_flush_log_at_trx_commit：日志刷新到磁盘时机<ul><li>1：日志在每次事务提交时写入并刷新到磁盘</li><li>0：每秒将日志写入并刷新到磁盘一次</li><li>2：日志在每次事务提交后写入，并每秒刷新到磁盘一次</li></ul></li></ul></li></ul></li></ul></li><li><h5 id="磁盘结构"><a href="#磁盘结构" class="headerlink" title="磁盘结构"></a>磁盘结构</h5><ul><li>System Tablespace：系统表空间是更改缓冲区的存储区域，如果表时在系统表空间而不是每个表文件或通用表空间中创建的，它也可能包含表和索引数据。（在Mysql5.x版本中还包含innoDB数据字典、undolog等）<ul><li>参数innodb_data_file_path</li></ul></li><li>File_Per_table_tablespaces：每个表的文件表空间包含单个InnoDB表的数据和索引，并存储在文件系统上的单个数据文件中。<ul><li>参数：Innodb_file_per_table</li></ul></li><li>Doublewirte Buffer Files：双写缓冲区，InnoDB引擎将数据也从Buffer Pool引擎将数据也从Buffer Pool刷新到磁盘前，先将数据页写入双写缓冲区文件中，便于系统异常时恢复数据<ul><li>ib_16384_0.dblwr</li><li>ib_16384_1.dbwr</li></ul></li><li>Redo Log：重做日志，是用来实现事务的持久性，该日志文件由两部分组成：重做日志缓冲以及重做日志文件，前者是在内存中，后者是在磁盘中。当事务提交之后会把所有修改信息都会存到该日志中，用于在刷新脏页到磁盘时，发生错误时，进行数据恢复<ul><li>以循环方式写入重做日志文件，涉及两个文件：<ul><li>ib_logfile0</li><li>ib_logfile1</li></ul></li></ul></li></ul></li></ul><h4 id="6-3）事务原理"><a href="#6-3）事务原理" class="headerlink" title="6.3）事务原理"></a>6.3）事务原理</h4><ul><li><p>事务</p><ul><li>一组操作的集合，这些操作要么同时成功，要么同时失败</li></ul></li><li><p>redo log</p><ul><li><p>重做日志，记录的是事务提交时数据页的物理修改，是用来实现事务的持久性</p><p>该日志文件由两部分组成：重做日志缓冲以及重做日志文件，前者是在内存中，后者是在磁盘中。当事务提交之后会把所有修改信息都存到该日志文件中，用于在刷新脏页到磁盘，发生错误时，进行数据恢复使用。</p></li></ul></li><li><p>undo log</p><ul><li><p>回滚日志，用于记录数据被修改前的信息，作用包含两个：提供回滚和MVCC（多版本并发控制）</p><p>undo log 和redo log 记录物理日志不一样，它是逻辑日志。可以认为当delete一条记录时，undo log中会纪录一条对应的insert记录，反之亦然，当update一条记录时，它记录一条对应相反的update记录。当执行rollback时，就可以从undo log中的逻辑记录读取到相应的内容并进行回滚</p><ul><li>Undo log 销毁：undo log在事务执行时产生，事务提交时并不会立即删除undo log,因为这些日志可能还用于MVCC的快照读</li><li>Undo log 存储：undo log 采用段的方式进行管理和记录，存放在前面介绍的 rollback segement 回滚段中，内部包含1024个undo log segment。</li></ul></li></ul></li></ul><h4 id="6-4）MVCC"><a href="#6-4）MVCC" class="headerlink" title="6.4）MVCC"></a>6.4）MVCC</h4><ul><li><p>当前读：</p><ul><li>读取的是记录的最新版本，读取时还要保证其他并发事务不能修改当前记录，会对读取的记录进行加锁。对于我们日常的操作，如：增删改（排它锁）查（共享锁）都是一中当前读</li></ul></li><li><p>快照读</p><ul><li>简单的select(不加锁)就是快照读，快照读，读取的是记录数据的可见版本，有可能是历史数据，不加锁，是非阻塞读。<ul><li>Read Committed：每次select，都生成一个快照读。</li><li>Repeatable Read ：开启事务后第一个select语句才是快照读的地方</li><li>Serializable：快照读会退化为当前读</li></ul></li></ul></li><li><p>MVCC</p><ul><li><p>多版本并发控制。指维护一个数据的多个版本，使得读写操作没有冲突</p><p><img src="C:\Users\吕飞扬\Desktop\SQL调优\img\83690A9E86445AC2BC3D1E8504555ACC.png" alt="83690A9E86445AC2BC3D1E8504555ACC"></p><ul><li>undo log 版本链</li><li>readview<ul><li>是快照读SQL执行时mvcc提前数据的一句，记录并维护系统当前活跃的事务id。</li><li>ReadView包含了四个核心字段<img src="C:\Users\吕飞扬\Desktop\SQL调优\img\311D44ED073B9136895C80580E21BD51.png" alt="311D44ED073B9136895C80580E21BD51"><img src="C:\Users\吕飞扬\Desktop\SQL调优\img\5363E1BEFD70460184C36E2526E07888.png" alt="5363E1BEFD70460184C36E2526E07888"></li></ul></li></ul></li></ul></li></ul><h1 id="7-Mysql管理"><a href="#7-Mysql管理" class="headerlink" title="7.Mysql管理"></a>7.Mysql管理</h1><h5 id="7-1）系统数据库"><a href="#7-1）系统数据库" class="headerlink" title="7.1）系统数据库"></a>7.1）系统数据库</h5><ul><li>Mysql数据库自带4个<ul><li>mysql：存储Mysql服务器正常运行所需要的各种信息（时区、主从、用户、权限）</li><li>information_schema：提供了访问数据库元数据的各种表和视图，包含数据库、表、字段类型及访问权限等</li><li>performance_schema：为Mysql服务器运行时状态提供了一个底层监控功能，主要用于收集数据库服务器性能参数</li><li>sys：包含了一系列方便DBA和开发人员利用performance_schema性能数据库进行性能调优和诊断的视图</li></ul></li></ul><h4 id="7-2）常用工具"><a href="#7-2）常用工具" class="headerlink" title="7.2）常用工具"></a>7.2）常用工具</h4><p><img src="C:\Users\吕飞扬\Desktop\SQL调优\img\999B4ACDA644A7ADF716AB87EDAD1406.png" alt="999B4ACDA644A7ADF716AB87EDAD1406"></p><ul><li>-e参数：可以不用登录进数据库直接查询</li></ul><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql -h192.168.xxx.xxx -uroot -p123456 db01 -e &quot;select * from xxx&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p>mysqladmin</p><ul><li><p>它是一个执行管理操作客户端程序。可以用来检查服务器的配置和当前状态、创建并删除数据库等。</p><ul><li><p>mysqladmin –help：查看帮助文档</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysqladmin [options] 指令<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li></ul></li><li><p>mysqlbinlog：由于服务器生成的二进制日志文件以二进制格式保存，所以如果想要检查这些文本的文本格式，就会使用mysqlbinlog日志管理工具<img src="C:\Users\吕飞扬\Desktop\SQL调优\img\4EE0714E4BDE2ADD1B9B5C7B5C202185.png" alt="4EE0714E4BDE2ADD1B9B5C7B5C202185"></p></li><li><p>mysqlshow</p><ul><li>客户端对象查找工具<img src="C:\Users\吕飞扬\Desktop\SQL调优\img\0AEEE330BD35DB847623BBC11C55FDC5.png" alt="0AEEE330BD35DB847623BBC11C55FDC5"></li></ul></li><li><p>mysqldump</p><ul><li>客户端工具用来备份数据库或数据迁移</li></ul></li></ul><p><img src="C:\Users\吕飞扬\Desktop\SQL调优\img\4EED89C23DBA79F0BC575F886154C84E.png" alt="4EED89C23DBA79F0BC575F886154C84E"></p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分布式 </tag>
            
            <tag> 数据库 </tag>
            
            <tag> 调优 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringCloud</title>
      <link href="/2022/10/02/springcloud/"/>
      <url>/2022/10/02/springcloud/</url>
      
        <content type="html"><![CDATA[<h3 id="主从选举理解"><a href="#主从选举理解" class="headerlink" title="主从选举理解"></a>主从选举理解</h3><p>当列表没有主机时，所有的服务器进入150-300毫秒的沉睡，然后谁先醒谁给自己投一票，然后告诉别的服务器自己要当主机了，别的主机也会投票给自己</p><p>如果有两台从机同时醒，则两台从机继续进入150-300随机沉睡，直到有一个先醒</p><h3 id="更新数据理解"><a href="#更新数据理解" class="headerlink" title="更新数据理解"></a>更新数据理解</h3><p>当主机接收到客户端的数据时，会先把数据写进日志，但是不提交，然后告诉从机，从机如果大部分没有响应，主机就不更新数据，为了数据一致性</p><p>如果从机大部分有响应，则主机写入数据后，从机在写入数据</p><h1 id="1-Eureka集群"><a href="#1-Eureka集群" class="headerlink" title="1.Eureka集群"></a>1.Eureka集群</h1><p>版本</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                主要就是这个2.3.12            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.3.12.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>relativePath</span><span class="token punctuation">/></span></span> <span class="token comment">&lt;!-- lookup parent from repository --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.lfy<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>EurekaServer<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.0.1-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>02-EurekaServer<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>02-EurekaServer<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>java.version</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>java.version</span><span class="token punctuation">></span></span>                还有这个Hoxton    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>spring-cloud.version</span><span class="token punctuation">></span></span>Hoxton.SR12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>spring-cloud.version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其实就是几个server端服务器之间相互注册</p><p>然后Client注册到Server端</p><p>集群peer1</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8761</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> Eureka<span class="token punctuation">-</span>Server <span class="token comment">#服务名称</span><span class="token key atrule">eureka</span><span class="token punctuation">:</span>  <span class="token key atrule">server</span><span class="token punctuation">:</span>    <span class="token key atrule">eviction-interval-timer-in-ms</span><span class="token punctuation">:</span> <span class="token number">10000</span> <span class="token comment">#服务端间隔多少毫秒做定期删除操作</span>    <span class="token key atrule">renewal-percent-threshold</span><span class="token punctuation">:</span> <span class="token number">0.85</span> <span class="token comment">#续约百分比，超过百分之85的应用没和你续约，那么eureka会保护服务 不会剔除任何一个服务</span>    <span class="token comment">#注册实例</span>  <span class="token key atrule">instance</span><span class="token punctuation">:</span>  <span class="token comment">#windows模拟多台服务器，把host文件夹127.0.0.1 改成peer1 pper2 peer3模拟三台服务器</span>    <span class="token key atrule">hostname</span><span class="token punctuation">:</span> peer1 <span class="token comment">#本机ip</span>    <span class="token key atrule">instance-id</span><span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span>eureka.instance.hostname<span class="token punctuation">&#125;</span><span class="token punctuation">:</span>$<span class="token punctuation">&#123;</span>spring.application.name<span class="token punctuation">&#125;</span><span class="token punctuation">:</span>$<span class="token punctuation">&#123;</span>server.port<span class="token punctuation">&#125;</span> <span class="token comment">#主机名称</span>    <span class="token key atrule">prefer-ip-address</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment">#以ip的形式显示具体的服务信息</span>    <span class="token key atrule">lease-renewal-interval-in-seconds</span><span class="token punctuation">:</span> <span class="token number">5</span> <span class="token comment">#服务器实例的续约时间间隔</span>  <span class="token key atrule">client</span><span class="token punctuation">:</span>    <span class="token key atrule">service-url</span><span class="token punctuation">:</span>    <span class="token comment">#多态服务器相互注册，如果是peer2主机就注册peer1和peer3 </span>      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//peer2<span class="token punctuation">:</span>8762/eureka<span class="token punctuation">,</span>http<span class="token punctuation">:</span>//peer3<span class="token punctuation">:</span>8763/eureka<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>peer2</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8762</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> Eureka<span class="token punctuation">-</span>Server<span class="token key atrule">eureka</span><span class="token punctuation">:</span>  <span class="token key atrule">client</span><span class="token punctuation">:</span>    <span class="token key atrule">service-url</span><span class="token punctuation">:</span>    <span class="token comment">#注册多台Server端部署集群</span>      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//peer1<span class="token punctuation">:</span>8761/eureka<span class="token punctuation">,</span>http<span class="token punctuation">:</span>//peer3<span class="token punctuation">:</span>8763/eureka  <span class="token key atrule">server</span><span class="token punctuation">:</span>    <span class="token key atrule">eviction-interval-timer-in-ms</span><span class="token punctuation">:</span> <span class="token number">10000</span>  <span class="token key atrule">instance</span><span class="token punctuation">:</span>  <span class="token comment">#其实就是ip,等同于127.0.0.1，这里是windows模拟多态主机</span>    <span class="token key atrule">hostname</span><span class="token punctuation">:</span> peer3    <span class="token key atrule">prefer-ip-address</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">lease-renewal-interval-in-seconds</span><span class="token punctuation">:</span> <span class="token number">5</span>    <span class="token key atrule">instance-id</span><span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span>eureka.instance.hostname<span class="token punctuation">&#125;</span><span class="token punctuation">:</span>$<span class="token punctuation">&#123;</span>spring.application.name<span class="token punctuation">&#125;</span><span class="token punctuation">:</span>$<span class="token punctuation">&#123;</span>server.port<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>peer3省略，同理</p><p>然后client端也注册到三个集群服务</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8081</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> eureka<span class="token punctuation">-</span>client<span class="token punctuation">-</span>a<span class="token key atrule">eureka</span><span class="token punctuation">:</span>  <span class="token key atrule">client</span><span class="token punctuation">:</span>    <span class="token key atrule">service-url</span><span class="token punctuation">:</span>    <span class="token comment">#上面搭建的集群peer1，peer2，peer3</span>      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//peer1<span class="token punctuation">:</span>8761/eureka<span class="token punctuation">,</span>http<span class="token punctuation">:</span>//peer2<span class="token punctuation">:</span>8762/eureka<span class="token punctuation">,</span>http<span class="token punctuation">:</span>//peer3<span class="token punctuation">:</span>8763/eureka<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="2-ribbon"><a href="#2-ribbon" class="headerlink" title="2.ribbon"></a>2.ribbon</h1><p>是fegin的底层，fegin是封装了的ribbon</p><p>ribbon</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">ribbon</span><span class="token punctuation">:</span>   <span class="token key atrule">ReadTimeout</span><span class="token punctuation">:</span> <span class="token number">3000</span> <span class="token comment">#给服务执行3S超时时间</span>   <span class="token key atrule">ConnectTimeout</span><span class="token punctuation">:</span> <span class="token number">3000</span> <span class="token comment">#连接服务的超时时间</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@EnableEurekaClient</span><span class="token keyword">public</span> <span class="token keyword">class</span> consumerApplication <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>consumerApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//首先想让RestTemplate工具可以实现轮循之类的策略需要加上 @LoadBalanced 交给ribbon托管</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@LoadBalanced</span>    <span class="token keyword">public</span> <span class="token class-name">RestTemplate</span> <span class="token function">restTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RestTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">//我们可以通过配置IRule来改变负载均衡策略，常见的有RoundRobinRule()随机，以及默认的轮循，又或是这个Wei开头的权重</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">IRule</span> <span class="token function">myrule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">WeightedResponseTimeRule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-1RestTemplate"><a href="#2-1RestTemplate" class="headerlink" title="2.1RestTemplate"></a>2.1RestTemplate</h3><p>接上文，在主配置类中定义了bean即可直接注入使用rest工具常见方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">restTemplate<span class="token punctuation">.</span><span class="token function">getForObject</span><span class="token punctuation">(</span><span class="token string">"http://服务名称（spring.application.name）/test"</span><span class="token punctuation">,</span> 返回值类型：例如<span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//平常我们访问都需要指定http://localhost:xxx/xxx来访问，为什么这里我们可以直接使用服务名称呢</span><span class="token comment">//因为在框架底层会在我们写上服务名称时，自动去获取服务名称的ip地址与端口号，所以无需我们指定</span> <span class="token class-name">ResponseEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> forEntity <span class="token operator">=</span> restTemplate<span class="token punctuation">.</span><span class="token function">getForEntity</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//这个getForEntity是获取一些接口信息的，比如服务名称之类的</span>restTemplate<span class="token punctuation">.</span><span class="token function">postForObject</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span>user<span class="token punctuation">,</span> <span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//postForObject接口传参，是JSON格式的，接口需要使用requestBody注解接收</span><span class="token comment">//那么如果想提交表单数据，不是JSON的格式的数据怎么传参？使用LinkedMultiValueMap注意是用add方法添加数据</span>        <span class="token class-name">LinkedMultiValueMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> lvmap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedMultiValueMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        lvmap<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span><span class="token string">"lfy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        lvmap<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        lvmap<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"price"</span><span class="token punctuation">,</span><span class="token number">8000D</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">User</span> u <span class="token operator">=</span> restTemplate<span class="token punctuation">.</span><span class="token function">postForObject</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span>lvmap<span class="token punctuation">,</span><span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestContrller</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> <span class="token class-name">RestTemplate</span> restTemplate<span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/test"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> s <span class="token operator">=</span> restTemplate<span class="token punctuation">.</span><span class="token function">getForObject</span><span class="token punctuation">(</span><span class="token string">"http://privode/test"</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> s<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="3-Fegin-调用提供者接口"><a href="#3-Fegin-调用提供者接口" class="headerlink" title="3.Fegin 调用提供者接口"></a>3.Fegin 调用提供者接口</h1><p>当然作为消费者也是需要和提供者一起注册Server端的，从而实现<strong>client的互相调用</strong>，Fegin是一种封装了的调用策略，底层还是ribbon</p><p>需要添加openFegin的依赖</p><p>启动类注解</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@EnableEurekaClient</span><span class="token annotation punctuation">@EnableFeignClients</span><span class="token keyword">public</span> <span class="token keyword">class</span> consumerBApplication <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>consumerBApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>写一个Fegin接口类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//添加@FeignClient("服务名称（spring.application.name）")</span><span class="token annotation punctuation">@FeignClient</span><span class="token punctuation">(</span><span class="token string">"privode"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">TestFegin</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//直接把要调用的接口把他的方法体去掉，转为抽象方法，在把地址注解写上即可</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/test"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用时就可以直接在controller调用别的服务中的接口了</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Resource</span> <span class="token keyword">private</span> <span class="token class-name">TestFegin</span> testFegin<span class="token punctuation">;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/fegintest"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//直接使用接口点方法</span>        <span class="token class-name">String</span> test <span class="token operator">=</span> testFegin<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> test<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-1传参"><a href="#2-1传参" class="headerlink" title="2.1传参"></a>2.1传参</h3><p>当Fegin调用提供者的接口时，如果传参，</p><p><strong>post请求传入对象要用@RequestBody注解 接收</strong>，<strong>单个数据需要用@RequestParams，并且使用@RequestParams注解后必须传参，如果不是必须传参可以@RequestParam(required &#x3D; false)</strong></p><p><strong>Get请求传参每个参数都要使用@RequestParams</strong></p><p>不然无法调用提供者的接口</p><p><strong>总结：调用提供者的接口传参，对象参数使用@RequestBody，单个字段参数使用@RequestParams；</strong></p><p><strong>并且不仅是在提供者的接口参数前面要写注解，在Fegin接口中参数前面也得写上</strong></p><h3 id="2-2日志"><a href="#2-2日志" class="headerlink" title="2.2日志"></a>2.2日志</h3><p>启动类中定义日志级别</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">Logger<span class="token punctuation">.</span>Level</span> <span class="token function">level</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">/** NONE:所有* BASICE：只打印请求方法路径，响应状态码和执行时间* HEADERS：* FULL：所有信息都打印* */</span>        <span class="token keyword">return</span> <span class="token class-name">Logger<span class="token punctuation">.</span>Level</span><span class="token punctuation">.</span><span class="token constant">FULL</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>去配置文件中开启日志输出</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> consumer<span class="token punctuation">-</span>B<span class="token key atrule">eureka</span><span class="token punctuation">:</span>  <span class="token key atrule">client</span><span class="token punctuation">:</span>    <span class="token key atrule">service-url</span><span class="token punctuation">:</span>      <span class="token key atrule">dufaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>8761/eureka  <span class="token key atrule">instance</span><span class="token punctuation">:</span>    <span class="token key atrule">ip-address</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">instance-id</span><span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span>spring.application.name<span class="token punctuation">&#125;</span><span class="token punctuation">:</span>$<span class="token punctuation">&#123;</span>eureka.instance.hostname<span class="token punctuation">&#125;</span><span class="token punctuation">:</span>$<span class="token punctuation">&#123;</span>server.port<span class="token punctuation">&#125;</span>    <span class="token key atrule">hostname</span><span class="token punctuation">:</span> localhost<span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8087</span><span class="token comment">#开启日志输出</span><span class="token key atrule">logging</span><span class="token punctuation">:</span>  <span class="token key atrule">level</span><span class="token punctuation">:</span>    <span class="token key atrule">com.lfy.fegin</span><span class="token punctuation">:</span> debug <span class="token comment">#包名com.lfy.fegin</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>开启日志的日志级别<ul><li>debug：只有在debug的时候能看见日志</li><li>info：打印记录日志</li><li>trace：打印跟踪日志</li><li>warn：打印警告日志</li><li>error：打印错误日志</li></ul></li></ul><h3 id="2-3Fegin性能优化，连接池配置、"><a href="#2-3Fegin性能优化，连接池配置、" class="headerlink" title="2.3Fegin性能优化，连接池配置、"></a>2.3Fegin性能优化，连接池配置、</h3><p>依赖</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.github.openfeign<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>feign-httpclient<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>配置连接池</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">feign</span><span class="token punctuation">:</span>  <span class="token key atrule">client</span><span class="token punctuation">:</span>    <span class="token key atrule">default</span><span class="token punctuation">:</span>      <span class="token key atrule">loggerLevel</span><span class="token punctuation">:</span> BASIC  <span class="token key atrule">httpclient</span><span class="token punctuation">:</span>    <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment">#开启feign对连接池的支持</span>    <span class="token key atrule">max-connections</span><span class="token punctuation">:</span> <span class="token number">200</span> <span class="token comment">#最大连接数</span>    <span class="token key atrule">max-connections-per-route</span><span class="token punctuation">:</span> 50 %每个路径的最大连接数    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="4-Hystrix熔断器"><a href="#4-Hystrix熔断器" class="headerlink" title="4.Hystrix熔断器"></a>4.Hystrix熔断器</h1><p><strong>依赖：</strong>openFegin依赖，Hystrix依赖</p><p>场景：比如我们有一个链式调用服务，A-&gt;B-&gt;C 此时C服务宕机了，<strong>B服务会等C服务，就这样卡着，然后这时候如果有别的用户访问B就会进不来</strong>，此时就需要熔断，（就意思把关系剪断）</p><ul><li><strong>熔断器没法完成业务，但是可以保护服务</strong></li><li><strong>因为熔断器是切断与宕机服务的调用联系，所以一般与openFegin，ribbon一起使用</strong></li></ul><pre class="line-numbers language-none"><code class="language-none">有三个状态。打开，关闭，半开，当用户调用fegin报错超过3次（默认)，就会开启断路器，并创建一个异步线程过20s把状态改为半开，用随机数取值的方式，让少量的的流量进来尝试访问，如果访问成功则关闭断路器。然后还会有一个异步线程定时清除fegin报错的次数计数。不然一年访问失败三次也会开始断路器了<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">就是调服务，然后多少秒内失败多少次，默认是3次，可以同过配置文件更改的，就会开启熔断器，开启之后会异步创建一个线程，去过20秒把断路器状态改成半开，然后让少量流量进来试探，如果服务正常了就关闭断路器<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p>依赖</p><ul><li>&#96;&#96;&#96;xml   <dependency>            <groupId>org.springframework.cloud</groupId>            <artifactId>spring-cloud-starter-netflix-hystrix</artifactId>        </dependency><pre class="line-numbers language-none"><code class="language-none">    在使用Fegin的基础上- 写个.Hystrix包，然后继承Fegin的接口，带上@Component，，重写的方法中的内容，就是服务调用失败后熔断后走的内容- &#96;&#96;&#96;java  @Component  public class ShopfeginHystrix implements Shopfegin &#123;        @Override      public String shop() &#123;          return &quot;备胎方法&quot;;      &#125;  &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>列如在Fegin的接口类中，在<strong>注解上指定fallback回调方法</strong></p></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@FeignClient</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"shop-service"</span><span class="token punctuation">,</span>fallback <span class="token operator">=</span> <span class="token class-name">ShopfeginHystrix</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Shopfegin</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/shop"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> shop <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>最后在配置类中开启熔断器</p></li><li><p>&#96;&#96;&#96;yml<br>spring:<br>  application:<br>name: cusomer-service<br>eureka:<br>  client:<br>service-url:<br>  defaultZone: <a href="http://localhost:8761/eureka">http://localhost:8761/eureka</a><br>  instance:<br>instance-id: ${spring.application.name}:${eureka.instance.hostname}:${server.port}<br>ip-address: true<br>hostname: localhost<br>server:<br>  port: 7091<br>  #开启熔断<br>feign:<br>  hystrix:<br>enabled: true #cloud的F版以前，是默认开启的，现在需要手动，是因为有了微服务保护框架sen什么的，所以有选择了就自己开启</p><pre class="line-numbers language-none"><code class="language-none">  配置![image-20220911012910111](C:\Users\吕飞扬\AppData\Roaming\Typora\typora-user-images\image-20220911012910111.png)# 5.admin监控**依赖：**eureka依赖，admin依赖&#96;&#96;&#96;xml        &lt;dependency&gt;            &lt;groupId&gt;de.codecentric&lt;&#x2F;groupId&gt;            &lt;artifactId&gt;spring-boot-admin-starter-server&lt;&#x2F;artifactId&gt;        &lt;&#x2F;dependency&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>对应springcloud2.3.12版本对应admin2.3.0版本</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>java.version</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>java.version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>spring-cloud.version</span><span class="token punctuation">></span></span>Hoxton.SR12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>spring-cloud.version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>spring-boot-admin.version</span><span class="token punctuation">></span></span>2.3.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>spring-boot-admin.version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencyManagement</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$&#123;spring-cloud.version&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">></span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>import<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>de.codecentric<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-admin-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$&#123;spring-boot-admin.version&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">></span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>import<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencyManagement</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li><p>在启动类中加入注解@EnableAdminServer</p></li><li><p>把admin的springboot模块注册进eureka-server端</p></li><li><p>在yml文件中配置</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">management</span><span class="token punctuation">:</span>  <span class="token key atrule">endpoints</span><span class="token punctuation">:</span>    <span class="token key atrule">web</span><span class="token punctuation">:</span>      <span class="token key atrule">exposure</span><span class="token punctuation">:</span>        <span class="token key atrule">include</span><span class="token punctuation">:</span> <span class="token string">'*'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>打开项目网页即可</p></li></ol><h1 id="6-gateway网关"><a href="#6-gateway网关" class="headerlink" title="6.gateway网关"></a>6.gateway网关</h1><p><strong>依赖</strong>：eureka依赖（动态路由），gateway依赖</p><ol><li><p>首先加依赖时注意不要把web依赖加进来，因为gateway自带web并且和springboot-web有冲突</p></li><li><p><strong>静态路由</strong>——其次来分析yml配置文件</p><ol><li><p>​</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> gateway  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">gateway</span><span class="token punctuation">:</span>      <span class="token key atrule">routes</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> user<span class="token punctuation">-</span>service<span class="token punctuation">-</span>route          <span class="token key atrule">uri</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span><span class="token number">8086</span>          <span class="token key atrule">predicates</span><span class="token punctuation">:</span>            <span class="token punctuation">-</span> Path=/user/test<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>这里的网关配置主要是<strong>静态</strong>路由 如果这时候通过浏览器访问 <a href="http://localhost/user/test">http://localhost/user/test</a> 这个路径会自动到网关里面跑成<a href="http://localhost:8086/user/test">http://localhost:8086/user/test</a></li><li>相当于一个拼接，用户访问时就可以不用输入端口号了</li></ul></li></ol></li></ol><h3 id="6-1动态路由"><a href="#6-1动态路由" class="headerlink" title="6.1动态路由"></a>6.1动态路由</h3><p>动态路由就是在静态路由的基础上，把gateway网关也注册进eureka-server端</p><p>开启动态路由</p><p>把uri改成 lb:&#x2F;&#x2F;服务名称</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> gateway  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">gateway</span><span class="token punctuation">:</span>      <span class="token key atrule">routes</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> user<span class="token punctuation">-</span>service<span class="token punctuation">-</span>route<span class="token comment">#          uri: http://localhost:8086</span>          <span class="token key atrule">uri</span><span class="token punctuation">:</span> lb<span class="token punctuation">:</span>//user<span class="token punctuation">-</span>service <span class="token comment">#lb://服务名称</span>          <span class="token key atrule">predicates</span><span class="token punctuation">:</span>            <span class="token punctuation">-</span> Path=/user/test      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>        <span class="token key atrule">locator</span><span class="token punctuation">:</span>          <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment">#开启动态路由</span>          <span class="token key atrule">lower-case-service-id</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment">#开启服务名称小写</span><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">80</span><span class="token key atrule">eureka</span><span class="token punctuation">:</span>  <span class="token key atrule">client</span><span class="token punctuation">:</span>    <span class="token key atrule">service-url</span><span class="token punctuation">:</span>      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>8761/eureka  <span class="token key atrule">instance</span><span class="token punctuation">:</span>    <span class="token key atrule">hostname</span><span class="token punctuation">:</span> localhost    <span class="token key atrule">ip-address</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">instance-id</span><span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span>spring.application.name<span class="token punctuation">&#125;</span><span class="token punctuation">:</span>$<span class="token punctuation">&#123;</span>eureka.instance.hostname<span class="token punctuation">&#125;</span><span class="token punctuation">:</span>$<span class="token punctuation">&#123;</span>server.port<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>动态路由有什么用呢？<ul><li>我们访问地址时可以通过http:&#x2F;&#x2F;服务名称&#x2F;接口路径 访问路由<ul><li>通过lb(负载均衡) 服务名称，会自动获取服务名称的域名和端口号，在把后面的请求路径拼接上去，形成一个完整的路径</li></ul></li><li>也就是<a href="http://localhost/user-service/user/test%E8%BF%99%E6%A0%B7%E8%AE%BF%E9%97%AE%EF%BC%8C%E5%B9%B6%E4%B8%94%E4%B9%9F%E5%8F%AF%E4%BB%A5%E9%80%9A%E8%BF%87%E5%8E%9F%E6%9D%A5%E7%9A%84http://localhost/user/test%E8%AE%BF%E9%97%AE">http://localhost/user-service/user/test这样访问，并且也可以通过原来的http://localhost/user/test访问</a></li><li>我们在动态路由下面可以配置一些断言信息，比如说在什么时间之前，无法通过路由访问接口，或者必须带上一个指定参数访问路由才会转发到接口。</li></ul></li></ul><h3 id="6-2全局过滤器"><a href="#6-2全局过滤器" class="headerlink" title="6.2全局过滤器"></a>6.2全局过滤器</h3><ol><li>在gateway模块中定义一个filter类实现 GlobalFilter接口</li><li>把类加入spring的ioc容器</li></ol><p>模拟拦截黑名单用户访问网关代码</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GateWayFilter</span> <span class="token keyword">implements</span> <span class="token class-name">GlobalFilter</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> ips <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">></span></span> <span class="token function">filter</span><span class="token punctuation">(</span><span class="token class-name">ServerWebExchange</span> exchange<span class="token punctuation">,</span> <span class="token class-name">GatewayFilterChain</span> chain<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ServerHttpRequest</span> request <span class="token operator">=</span> exchange<span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token class-name">String</span> ip <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getHost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> headers <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAccessControlAllowHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ServerHttpResponse</span> response <span class="token operator">=</span> exchange<span class="token punctuation">.</span><span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">getHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"content-type"</span><span class="token punctuation">,</span><span class="token string">"application/json"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>ips<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>ip<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">ObjectMapper</span> mapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span><span class="token string">"你是黑名单用户"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"code"</span><span class="token punctuation">,</span><span class="token string">"438"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes<span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                 bytes <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">writeValueAsBytes</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">JsonProcessingException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">DataBuffer</span> wrap <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">bufferFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">wrap</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">return</span> response<span class="token punctuation">.</span><span class="token function">writeWith</span><span class="token punctuation">(</span><span class="token class-name">Mono</span><span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span>wrap<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> chain<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>exchange<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>这个resp和平常springweb中的resp返回JSON的方式有些不一样</p><ul><li><p>​    </p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//第一步 获取resp并且把请求头改成json</span><span class="token class-name">ServerHttpResponse</span> response <span class="token operator">=</span> exchange<span class="token punctuation">.</span><span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> response<span class="token punctuation">.</span><span class="token function">getHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"content-type"</span><span class="token punctuation">,</span><span class="token string">"application/json"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//第二步 ObjectMapper类中的writeValueAsBytes把想返回的数据转为bytes数组</span>  <span class="token class-name">ObjectMapper</span> mapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes<span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                 bytes <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">writeValueAsBytes</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">JsonProcessingException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token comment">//第三步 创建一个buffer工厂使用wrap方法传入数组</span>          <span class="token class-name">DataBuffer</span> wrap <span class="token operator">=</span>response<span class="token punctuation">.</span><span class="token function">bufferFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">wrap</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//第四部返回数据</span>  <span class="token keyword">return</span> response<span class="token punctuation">.</span><span class="token function">writeWith</span><span class="token punctuation">(</span><span class="token class-name">Mono</span><span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span>wrap<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><h3 id="6-4断言工厂"><a href="#6-4断言工厂" class="headerlink" title="6.4断言工厂"></a>6.4断言工厂</h3><p>我们在配置文件中写的断言规则只是字符串，这些字符串会被Predicate Factory读取并处理，转变为路由判断的条件</p><p>例如Path&#x3D;&#x2F;user&#x2F;**是按照路径匹配，这个规则是由</p><p><code>org.springframework.cloud.gateway.handler.predicate.PathRoutePredicateFactory</code>类来</p><p>处理的，像这样的断言工厂在SpringCloudGateway还有十几个:</p><table><thead><tr><th><strong>名称</strong></th><th><strong>说明</strong></th><th><strong>示例</strong></th></tr></thead><tbody><tr><td>After</td><td>是某个时间点后的请求</td><td>-  After&#x3D;2037-01-20T17:42:47.789-07:00[America&#x2F;Denver]</td></tr><tr><td>Before</td><td>是某个时间点之前的请求</td><td>-  Before&#x3D;2031-04-13T15:14:47.433+08:00[Asia&#x2F;Shanghai]</td></tr><tr><td>Between</td><td>是某两个时间点之前的请求</td><td>-  Between&#x3D;2037-01-20T17:42:47.789-07:00[America&#x2F;Denver],  2037-01-21T17:42:47.789-07:00[America&#x2F;Denver]</td></tr><tr><td>Cookie</td><td>请求必须包含某些cookie</td><td>- Cookie&#x3D;chocolate, ch.p</td></tr><tr><td>Header</td><td>请求必须包含某些header</td><td>- Header&#x3D;X-Request-Id, \d+</td></tr><tr><td>Host</td><td>请求必须是访问某个host（域名）</td><td>-  Host&#x3D;<strong>.somehost.org,</strong>.anotherhost.org</td></tr><tr><td>Method</td><td>请求方式必须是指定方式</td><td>- Method&#x3D;GET,POST</td></tr><tr><td>Path</td><td>请求路径必须符合指定规则</td><td>- Path&#x3D;&#x2F;red&#x2F;{segment},&#x2F;blue&#x2F;**</td></tr><tr><td>Query</td><td>请求参数必须包含指定参数</td><td>- Query&#x3D;name, Jack或者-  Query&#x3D;name</td></tr><tr><td>RemoteAddr</td><td>请求者的ip必须是指定范围</td><td>- RemoteAddr&#x3D;192.168.1.1&#x2F;24</td></tr><tr><td>Weight</td><td>权重处理</td><td></td></tr></tbody></table><p>我们只需要掌握Path这种路由工程就可以了。</p><h3 id="6-3跨域"><a href="#6-3跨域" class="headerlink" title="6.3跨域"></a>6.3跨域</h3><p>yml文件型</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">gateway</span><span class="token punctuation">:</span>      <span class="token key atrule">globalcors</span><span class="token punctuation">:</span> <span class="token comment"># 全局的跨域处理</span>        <span class="token key atrule">add-to-simple-url-handler-mapping</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 因为ajax发起者会通过options请求来向服务器询问是否允许跨域，所以需要设置为true来解决options请求被拦截问题</span>        <span class="token key atrule">corsConfigurations</span><span class="token punctuation">:</span>          <span class="token key atrule">'[/**]'</span><span class="token punctuation">:</span>            <span class="token key atrule">allowedOrigins</span><span class="token punctuation">:</span> <span class="token comment"># 允许哪些网站的跨域请求 </span>              <span class="token punctuation">-</span> <span class="token string">"http://localhost:8090"</span>            <span class="token key atrule">allowedMethods</span><span class="token punctuation">:</span> <span class="token comment"># 允许的跨域ajax的请求方式</span>              <span class="token punctuation">-</span> <span class="token string">"GET"</span>              <span class="token punctuation">-</span> <span class="token string">"POST"</span>              <span class="token punctuation">-</span> <span class="token string">"DELETE"</span>              <span class="token punctuation">-</span> <span class="token string">"PUT"</span>              <span class="token punctuation">-</span> <span class="token string">"OPTIONS"</span>            <span class="token key atrule">allowedHeaders</span><span class="token punctuation">:</span> <span class="token string">"*"</span> <span class="token comment"># 允许在请求中携带的头信息</span>            <span class="token key atrule">allowCredentials</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 是否允许携带cookie</span>            <span class="token key atrule">maxAge</span><span class="token punctuation">:</span> <span class="token number">360000</span> <span class="token comment"># 这次跨域检测的有效期，即一定时间内就不需要重复询问是否允许跨域了，直接请求即可。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Nacos"><a href="#Nacos" class="headerlink" title="Nacos"></a>Nacos</h1><h1 id="1-安装与配置"><a href="#1-安装与配置" class="headerlink" title="1.安装与配置"></a>1.安装与配置</h1><ol><li>打开nacos文件下的conf 找到spring配置文件，把mysql数据库的注释放开（33,36,39-41行），40和41改数据库账号</li><li>打开startup.cmd文件编辑，把set MODE&#x3D;改成”standalone”<ol><li>因为默认是集群</li></ol></li><li>打开数据库把nacos中的sql文件，nacos.sql建立个表nacos导入</li><li>启动</li></ol><h3 id="1-1Eureka和nacos的区别"><a href="#1-1Eureka和nacos的区别" class="headerlink" title="1.1Eureka和nacos的区别"></a>1.1Eureka和nacos的区别</h3><ul><li>服务隔离性<ul><li>eureka的server端部署多个项目时，如果有服务名称相同的情况，eureka的server端区分不了来自哪个项目的服务，负载均衡时可能会把其他项目中相同名字服务进行调用</li><li>nacos有命名空间，如果命名空间不同，负载均衡是不会调用的，而且细分到了组，不是一个组的服务，哪怕名字相同，也不会进行调用</li></ul></li></ul><h3 id="1-2版本对应关系"><a href="#1-2版本对应关系" class="headerlink" title="1.2版本对应关系"></a>1.2版本对应关系</h3><p><img src="C:\Users\吕飞扬\Desktop\cloud-Nacos\assets\image-20220917151413870.png" alt="image-20220917151413870"></p><p><img src="C:\Users\吕飞扬\Desktop\cloud-Nacos\assets\image-20220917151326361.png" alt="image-20220917151326361"></p><h1 id="2-yml文件配置详解"><a href="#2-yml文件配置详解" class="headerlink" title="2.yml文件配置详解"></a>2.yml文件配置详解</h1><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> nacos<span class="token punctuation">-</span>clent<span class="token punctuation">-</span>a <span class="token comment">#服务名称</span>  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>      <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> 192.168.139.1<span class="token punctuation">:</span><span class="token number">8848</span> <span class="token comment">#server端地址</span>      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>        <span class="token key atrule">group</span><span class="token punctuation">:</span> a<span class="token punctuation">-</span>client <span class="token comment">#组名称</span>        <span class="token key atrule">namespace</span><span class="token punctuation">:</span> c9894011<span class="token punctuation">-</span>499b<span class="token punctuation">-</span>469d<span class="token punctuation">-</span>9676<span class="token punctuation">-</span>a465aae7bd62 <span class="token comment">#命名空间id</span><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8081</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="C:\Users\吕飞扬\Desktop\cloud-Nacos\assets\image-20220917150434842.png" alt="image-20220917150434842"></p><p><img src="C:\Users\吕飞扬\Desktop\cloud-Nacos\assets\image-20220917210223974.png" alt="image-20220917210223974"></p><h3 id="2-1server端集群windos版本"><a href="#2-1server端集群windos版本" class="headerlink" title="2.1server端集群windos版本"></a>2.1server端集群windos版本</h3><p><img src="C:\Users\吕飞扬\Desktop\cloud-Nacos\assets\image-20220917210341641.png" alt="image-20220917210341641"></p><p>复制三份nacos，默认集群启动，如果被设置成单机启动，需要用编辑器打开startup.cmd进行更改，然后打开application.propies文件把数据库配置好</p><p>最后在conf目录中找到<img src="C:\Users\吕飞扬\AppData\Roaming\Typora\typora-user-images\image-20220917210534789.png" alt="image-20220917210534789"></p><p>复制一份把example去掉，打开之后在写入nacos的ip与端口号，在把这三个nacos一一启动即可</p><h1 id="3-入门nacos"><a href="#3-入门nacos" class="headerlink" title="3.入门nacos"></a>3.入门nacos</h1><p>nacos不需要像eureka一样写一个server端，它的文件即是一个server端</p><p>创建client时,只需要配置server端的ip和端口号即可</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> nacos<span class="token punctuation">-</span>clent<span class="token punctuation">-</span>a <span class="token comment">#服务名称</span>  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>      <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> 192.168.139.1<span class="token punctuation">:</span><span class="token number">8848</span> <span class="token comment">#server端地址</span>      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>        <span class="token key atrule">group</span><span class="token punctuation">:</span> a<span class="token punctuation">-</span>client <span class="token comment">#组名称</span>        <span class="token key atrule">namespace</span><span class="token punctuation">:</span> c9894011<span class="token punctuation">-</span>499b<span class="token punctuation">-</span>469d<span class="token punctuation">-</span>9676<span class="token punctuation">-</span>a465aae7bd62 <span class="token comment">#命名空间id</span>server<span class="token punctuation">:</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>命名空间一定要写，因为不同的命名空间的服务将完全隔离，调用不了</li></ul><p><strong>启动类注解不再是eureka的客户端注解，是nacos的@EnableDiscoveryClient</strong></p><h2 id="3-1集成openFegin与gateway"><a href="#3-1集成openFegin与gateway" class="headerlink" title="3.1集成openFegin与gateway"></a>3.1集成openFegin与gateway</h2><ul><li><p>openFegin</p><ul><li><p>和eureka一样</p></li><li><p>加入依赖</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-openfeign<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在启动类中加入注解@EnableFeignClients</p></li><li><p>创建Fegin类接口，接口上需要使用@FeignClient（“服务名称”）注解</p><pre class="line-numbers language-none"><code class="language-none">@FeignClient(&quot;nacos-clent-a&quot;)public interface Testfegin &#123;    @GetMapping(&quot;&#x2F;go&quot;)    public String test();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>如果是分布式项目，抽取出去的fengin类，不需要是一个springboot项目，只需要是maven就行，加依赖，写@FeignClient注解的接口即可，而调用者需要加依赖并在启动类中添加</strong>@EnableFeignClients</p></li></ul></li><li><p>gateway</p><ul><li><p>加依赖，选择eureka一样的gateway依赖即可，<strong>注意不能加web依赖，因为会覆盖了gateway的web</strong></p></li><li></li><li><pre><code class="yml">spring:  application:    name: gatewayA  cloud:    nacos:      server-addr: localhost:8848      discovery:        username: nacos        password: nacos        namespace: c9894011-499b-469d-9676-a465aae7bd62        group: a-client    gateway:      discovery:        locator:          enabled: true #开启动态路由          lower-case-service-id: true #开启服务名称小写      routes:        - id: nacos-client-b #服务名称          #          uri: http://localhost:8086          uri: lb://nacos-client-b          predicates:            - Path=/gserver:  port: 80<pre class="line-numbers language-none"><code class="language-none">和普通的nacos的client端一样，在加上配置以下动态路由即可，详情可以看之前写的eureka的笔记### 3.2.1fengin包名不一致问题因为抽取出去的Fegin不是一个springboot项目，所以如果包名和具有Fegin客户端注解的服务中的包名不同，则无法创建bean对象**所以最好统一包名**- 如果不统一也有三种解决办法  - 第一种（不推荐）：更改springboot的包扫描范围  - 第二种：指定FeignCLient所在包    &#96;&#96;&#96;java    @EnableFeignClients(basePackages &#x3D; &quot;com.lfy.fegin&quot;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></code></pre></li><li><p>第三种：指定FeginClient字节码(类名.class)</p><pre class="line-numbers language-none"><code class="language-none">@EnableFeignClients(clients&#x3D;&#123;userFegin.class&#125;)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li></ul><h3 id="3-2-2Fegin性能优化，连接池配置、"><a href="#3-2-2Fegin性能优化，连接池配置、" class="headerlink" title="3.2.2Fegin性能优化，连接池配置、"></a>3.2.2Fegin性能优化，连接池配置、</h3><p>依赖</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.github.openfeign<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>feign-httpclient<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>配置连接池</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">feign</span><span class="token punctuation">:</span>  <span class="token key atrule">client</span><span class="token punctuation">:</span>    <span class="token key atrule">default</span><span class="token punctuation">:</span>      <span class="token key atrule">loggerLevel</span><span class="token punctuation">:</span> BASIC  <span class="token key atrule">httpclient</span><span class="token punctuation">:</span>    <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment">#开启feign对连接池的支持</span>    <span class="token key atrule">max-connections</span><span class="token punctuation">:</span> <span class="token number">200</span> <span class="token comment">#最大连接数</span>    <span class="token key atrule">max-connections-per-route</span><span class="token punctuation">:</span> 50 %每个路径的最大连接数    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-2服务列表集群"><a href="#3-2服务列表集群" class="headerlink" title="3.2服务列表集群"></a>3.2服务列表集群</h2><p>和eureka一样，把<strong>两个相同的服务名称</strong>更改端口后注册进nacos的server端即可成为服务集群</p><p><strong>但是有一点不同：</strong></p><ul><li><p>nacos的服务集群可以指定是哪个集群，他可以有多个集群分类，比如杭州集群、上海集群这种自定义集群名称</p></li><li><p><strong>如果不指定集群的话都会自动加入default的集群组</strong></p></li><li><p>在yml文件中指定</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> comsuer<span class="token punctuation">-</span>service  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>        <span class="token key atrule">namespace</span><span class="token punctuation">:</span> 45e839e9<span class="token punctuation">-</span>904a<span class="token punctuation">-</span>41aa<span class="token punctuation">-</span>bbdb<span class="token punctuation">-</span>a35fecbec674        <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> localhost<span class="token punctuation">:</span><span class="token number">8848</span> <span class="token comment">#nacos 的server端地址</span>        <span class="token key atrule">cluster-name</span><span class="token punctuation">:</span> 福建 <span class="token comment">#集群名</span><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">7002</span><span class="token key atrule">feign</span><span class="token punctuation">:</span>  <span class="token key atrule">hystrix</span><span class="token punctuation">:</span>    <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment">#熔断开启</span><span class="token key atrule">regist-service</span><span class="token punctuation">:</span> <span class="token comment">#服务名称</span>  <span class="token key atrule">ribbon</span><span class="token punctuation">:</span>    <span class="token key atrule">NFLoadBalancerRuleClassName</span><span class="token punctuation">:</span> com.alibaba.cloud.nacos.ribbon.NacosRule <span class="token comment">#优先访问相同集群名称的服务</span>                <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="3-2-1优先访问同集群分组的服务"><a href="#3-2-1优先访问同集群分组的服务" class="headerlink" title="3.2.1优先访问同集群分组的服务"></a>3.2.1优先访问同集群分组的服务</h3><p>上面提到nacos可以设置集群的分组，同一个集群组可以优先访问（<strong>比如现在有杭州和上海的集群，当同是杭州的消费者调用提供者时，会优先调用杭州的提供者，如果杭州的提供者服务挂了，在访问上海的提供者</strong>），只需要改一下负载均衡的配置为NacosRule</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">regist-service</span><span class="token punctuation">:</span> <span class="token comment">#服务名称</span>  <span class="token key atrule">ribbon</span><span class="token punctuation">:</span>    <span class="token key atrule">NFLoadBalancerRuleClassName</span><span class="token punctuation">:</span> com.alibaba.cloud.nacos.ribbon.NacosRule<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h1 id="4-热部署yml文件"><a href="#4-热部署yml文件" class="headerlink" title="4.热部署yml文件"></a>4.热部署yml文件</h1><p>在项目上线时，如果需要更改yml文件，需要把项目下线，重新打包发布，如果有多个拒载均衡的服务，则非常的麻烦，而<strong>nacos中可以动态的修改yml文件</strong></p><ul><li><p>创建bootstrap.yml</p><ul><li>&#96;&#96;&#96;yml<br>spring:<br>  application:<br>name: nacos-client-b<br>  cloud:<br>nacos:<br>  config:<br>    username: nacos #账号<br>    password: nacos #密码<br>    file-extension: yml #文件格式，默认propties<br>    server-addr: localhost:8848 #nacos的server端地址<br>    prefix: nacos-client-b #文件名、<br>    namespace:  #命名空间<br>    group: #组<pre class="line-numbers language-none"><code class="language-none">    - 当项目初始化时，回去server端地址，找文件    - 因为server端的配置文件也是有组和命名空间的，别忘了- 在类上添加@RefreshScope注解，当nacos中更新配置文件，服务可以实时接收到- 在使用时使用@value(&quot;$&#123;key&#125;&quot;)即可### 4.1共享文件和active&#96;&#96;&#96;ymlspring:  application:    name: nacos-client-b  cloud:    nacos:      config:        username: nacos #账号        password: nacos #密码        file-extension: yml #文件解析格式，默认propties        server-addr: localhost:8848 #nacos的server端地址        prefix: nacos-client-b #文件名        shared-configs:  #读取共享配置          - dataId: application-dev.yml            group: a_group #分组，不写默认为default            refresh: true #开启热部署  profiles:    active: dev<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>shared-configs可以读取共享的配置，就是读取多个配置文件，</p></li><li><p><strong>然后这里有个坑，如果加了文件后缀profiles: active</strong>则在nacos的文件一定要加上.yml后缀格式<img src="C:\Users\吕飞扬\Desktop\cloud-Nacos\assets\image-20220918165506397.png" alt="image-20220918165506397"></p></li><li><p><strong>他的原理是（重点，很坑）</strong></p><pre class="line-numbers language-none"><code class="language-none">$&#123;spring.cloud.nacos.config.prefix&#125;-$&#123;spring.profiles.active&#125;.$&#123;spring.cloud.nacos.config.file-extension&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>如果说你没有写active会默认去掉 <strong>-</strong> 这个符号， 也不会在后面加**.yml** 所以写了active一定要在文件后面加上.yml</li><li>如果没写active，比如就写了文件名和文件解析格式，他就会只找文件名匹配的，不会去加后缀之类的，这时候我们在nacos的文件中就可以不写.yml</li></ul></li></ul><p><strong>acticve</strong></p><p>用来配置当前环境，比如上述代码中，会默认读取nacos-client-b.yml（<strong>后缀yml不写也行</strong>）文件，如果加上active属性，则还会读取nacos-client-b-dev.yml文件（<strong>配置文件必须写后缀yml</strong>）</p><p> shared-configs则是用来读取共享的文件</p><p><strong>快捷配置的局限性</strong>shared-dataids</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>      <span class="token key atrule">config</span><span class="token punctuation">:</span>        <span class="token key atrule">file-extension</span><span class="token punctuation">:</span> yml        <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> localhost<span class="token punctuation">:</span><span class="token number">8848</span>        <span class="token key atrule">shared-dataids</span><span class="token punctuation">:</span> t.yml<span class="token punctuation">,</span>test.yml <span class="token comment">#读取的文件列表</span>        <span class="token key atrule">namespace</span><span class="token punctuation">:</span> gulismall        <span class="token key atrule">refreshable-dataids</span><span class="token punctuation">:</span> t.yml<span class="token punctuation">,</span>test.yml <span class="token comment">#哪些文件可以热更新</span>                //采用默认配置，直接读取多个文件，会根据命名空间自动匹配，虽然配置更简单，但是没法读取来自不同组的多个文件，不能单个进行定制化配置，有一定局限性，已经弃用。一般使用最新的shared<span class="token punctuation">-</span>config<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-2文件优先级"><a href="#4-2文件优先级" class="headerlink" title="4.2文件优先级"></a>4.2文件优先级</h3><p>带服务环境的文件 –&gt;不带服务环境的文件–&gt;本地application.yml</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 分布式 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
