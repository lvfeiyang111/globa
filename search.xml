<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Spring</title>
      <link href="/2023/05/12/spring-shang/"/>
      <url>/2023/05/12/spring-shang/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h1><h2 id="1-Spring-Bean-的声明周期"><a href="#1-Spring-Bean-的声明周期" class="headerlink" title="1.Spring Bean 的声明周期"></a>1.Spring Bean 的声明周期</h2><p>Spring会优先选择无参构造方法通过反射创建对象，如果没有无参构造方法并且存在多个有参构造方法，Spring由于不知道使用哪个构造方法则会报错</p><p>无参构造方法—-&gt;对象—–&gt;依赖注入——-&gt;初始化前（@PostConstruct）——&gt;初始化（InitializingBean）—-&gt;初始化后——&gt;放入Map单例池——-&gt;Bean</p><h2 id="2-Spring-Aop"><a href="#2-Spring-Aop" class="headerlink" title="2.Spring Aop"></a>2.Spring Aop</h2><p>当类有接口时，Spring使用的是JDK动态代理，在内存中生成代理类，代理类继承了Proxy，传入的内部类就是给Proxy类中的属性赋值，然后代理类调用父类中的此方法，方法中通过反射执行增强的目标方法，</p><p><strong>被Aop增强后的类，在单例池中不再放原来的Bean，而是放的代理类</strong></p><p>当类上没接口时，Spring使用的是cglib。cglib代理类就是继承了目标类。</p><p>第一种情况：直接调用父类方法</p><p>第二种情况：聚合目标类，然后注入值，通过调聚合类中的目标方法</p><h1 id="3-Spring如何使用三级缓存打破循环依赖"><a href="#3-Spring如何使用三级缓存打破循环依赖" class="headerlink" title="3.Spring如何使用三级缓存打破循环依赖"></a>3.Spring如何使用三级缓存打破循环依赖</h1><p>看到一篇非常详细的文章,看完豁然开朗，搬运自微信公众号楼仔</p><p>链接:<a href="https://mp.weixin.qq.com/s?__biz=MzU0OTE4MzYzMw==&amp;mid=2247545567&amp;idx=2&amp;sn=8478f342befd6d2d84e3e11c635c4952&amp;chksm=fbb1bb21ccc63237a4890e75a3b43a50b69ef88900fac7e784916fdff134cc94a058c192b63f&amp;scene=27">https://mp.weixin.qq.com/s?__biz=MzU0OTE4MzYzMw==&amp;mid=2247545567&amp;idx=2&amp;sn=8478f342befd6d2d84e3e11c635c4952&amp;chksm=fbb1bb21ccc63237a4890e75a3b43a50b69ef88900fac7e784916fdff134cc94a058c192b63f&amp;scene=27</a></p><ul><li><strong>第一级缓存</strong>：singletonObjects，用于保存实例化、注入、初始化完成的 bean 实例；</li><li><strong>第二级缓存</strong>：earlySingletonObjects，用于保存实例化完成的 bean 实例；</li><li><strong>第三级缓存</strong>：singletonFactories，用于保存 bean 创建工厂，以便后面有机会创建代理对象。</li></ul><p>这是最核心，我们直接上源码：</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/sXFqMxQoVLHqKibakH9hO9wuncU5q2bNOvk3AiaCDWY8JN7rwGJvRQ8HMpOo41J3ibJbaRGB3105qyeQNmAzcLSyQ/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p>执行逻辑：</p><ul><li>先从“第一级缓存”找对象，有就返回，没有就找“二级缓存”；</li><li>找“二级缓存”，有就返回，没有就找“三级缓存”；</li><li>找“三级缓存”，找到了，就获取对象，放到“二级缓存”，从“三级缓存”移除。</li></ul><h2 id="1-3-原理执行流程"><a href="#1-3-原理执行流程" class="headerlink" title="1.3 原理执行流程"></a>1.3 原理执行流程</h2><p>我把“情况 2”执行的流程分解为下面 3 步，是不是和“套娃”很像 ？</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/sXFqMxQoVLHqKibakH9hO9wuncU5q2bNOQZgjQPEQ1hwh03fiaibvicukAp8QiaAj2ofz9uOsWFmRd1SZ9YayrkCnWw/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p>整个执行逻辑如下：</p><ol><li>在第一层中，先去获取 A 的 Bean，发现没有就准备去创建一个，然后将 A 的代理工厂放入“三级缓存”（<strong>这个 A 其实是一个半成品，还没有对里面的属性进行注入</strong>），但是 A 依赖 B 的创建，就必须先去创建 B；</li><li>在第二层中，准备创建 B，发现 B 又依赖 A，需要先去创建 A；</li><li>在第三层中，去创建 A，因为第一层已经创建了 A 的代理工厂，<strong>直接从“三级缓存”中拿到 A 的代理工厂，获取 A 的代理对象，放入“二级缓存”</strong>，并清除“三级缓存”；</li><li>回到第二层，现在有了 A 的代理对象，对 A 的依赖完美解决（<strong>这里的 A 仍然是个半成品</strong>），B 初始化成功；</li><li>回到第一层，现在 B 初始化成功，完成 A 对象的属性注入，然后再填充 A 的其它属性，以及 A 的其它步骤（包括 AOP），完成对 A 完整的初始化功能（<strong>这里的 A 才是完整的 Bean</strong>）。</li><li><strong>将 A 放入“一级缓存”。</strong></li></ol><p>为什么要用 3 级缓存 ？我们先看源码执行流程，后面我会给出答案。</p><h1 id="2-源码解读"><a href="#2-源码解读" class="headerlink" title="2. 源码解读"></a>2. 源码解读</h1><blockquote><p>注意：Spring 的版本是 <strong>5.2.15.RELEASE</strong>，否则和我的代码不一样！！！</p></blockquote><p>上面的知识，网上其实都有，下面才是我们的重头戏，让你跟着楼仔，走一遍代码流程。</p><h2 id="2-1-代码入口"><a href="#2-1-代码入口" class="headerlink" title="2.1 代码入口"></a>2.1 代码入口</h2><p><img src="https://mmbiz.qpic.cn/mmbiz_png/sXFqMxQoVLHqKibakH9hO9wuncU5q2bNOoCr5rjzaficibg7TicZ1gm8b8kR8u4HJyB1ABRtmH0icbbnqCslxZtIQYg/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/sXFqMxQoVLHqKibakH9hO9wuncU5q2bNOribwkzRb9Zyy8XicicyPHJlSO1AGaFLdSYmiaDD9k9WXo6m5WibWcDKl7jg/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p>这里需要多跑几次，把前面的 beanName 跳过去，只看 louzai1。</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/sXFqMxQoVLHqKibakH9hO9wuncU5q2bNOicWQQQckoiaDnu2xBtLe2XMnQwslx2sstS18OiczfP6UiaNic3ib1LFmkv1A/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/sXFqMxQoVLHqKibakH9hO9wuncU5q2bNOlLXkAbQickHqSevBt03Jtud05gCtpvPS9mesicCTwmz0j8qJT97yibacw/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><h2 id="2-2-第一层"><a href="#2-2-第一层" class="headerlink" title="2.2 第一层"></a>2.2 第一层</h2><p><img src="https://mmbiz.qpic.cn/mmbiz_png/sXFqMxQoVLHqKibakH9hO9wuncU5q2bNODOytdibzgpUXNpSMDXp9iazlqwDMaqicxrCT315miajFsApWmtIiaDSX1KQ/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p>进入 doGetBean()，从 getSingleton() 没有找到对象，进入创建 Bean 的逻辑。</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/sXFqMxQoVLHqKibakH9hO9wuncU5q2bNOLSwPYmzD0ic1I33ZPISBUm9aXDPWklLP1nibLAFoS3ZsoE61NcGF81TQ/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/sXFqMxQoVLHqKibakH9hO9wuncU5q2bNOhCia75vp68b1syrIF5KggFicotRqV9YWEjgTo7EwoLE1k4WRs1PjLkew/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p>进入 doCreateBean() 后，调用 addSingletonFactory()。</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/sXFqMxQoVLHqKibakH9hO9wuncU5q2bNO9tx6jk4cLlTibhiax6dB67cQkArxyzspw3Wq12yvwORzP8jicB0sPC7rw/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p>往三级缓存 singletonFactories 塞入 louzai1 的工厂对象。</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/sXFqMxQoVLHqKibakH9hO9wuncU5q2bNOY35CnbLdL7p2QmoyUcc0RTljdc5XUSHCc89UDibjah7Gmn3nSwlmDsw/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/sXFqMxQoVLHqKibakH9hO9wuncU5q2bNO4RibGWBk6C4KO5f61Bhm1F1ZwHjL4M9FtSs9shEneCib8IftiaibkbQQKw/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p>进入到 populateBean()，执行 postProcessProperties()，这里是一个策略模式，找到下图的策略对象。</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/sXFqMxQoVLHqKibakH9hO9wuncU5q2bNOFYpibXKiawoibkYFH7QLUWs51elYkPA013efmDTj8AbvrIic96VldrM7Iw/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p>正式进入该策略对应的方法。</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/sXFqMxQoVLHqKibakH9hO9wuncU5q2bNOibX5MOdF9p8Nhk2Eq0e3hd5OIMbSUIZ0RglMKiaibxI37SoaymamqlPtg/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p>下面都是为了获取 louzai1 的成员对象，然后进行注入。</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/sXFqMxQoVLHqKibakH9hO9wuncU5q2bNOl9A6NV70She9icl5WZqsvtiblAw2ZdqZCrNGHwdd1a8ZT2Iv54rx1FnA/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/sXFqMxQoVLHqKibakH9hO9wuncU5q2bNOPS5wsCT5BP1XibqAugQynytiaic0Zng5fRjHFLoVxtbBe66ZkZx4W0xew/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/sXFqMxQoVLHqKibakH9hO9wuncU5q2bNO7YhbX6SlqCU6KyaZLdQlwc7GY4SKyR6U9SEvia6L0HsptIOVquwZqrg/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/sXFqMxQoVLHqKibakH9hO9wuncU5q2bNOSwmZegYMEzicxpGw5ZgkVW8vWOTAokbgWNK2ZpfXagZfc7tsMSsGDYw/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p>进入 doResolveDependency()，找到 louzai1 依赖的对象名 louzai2</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/sXFqMxQoVLHqKibakH9hO9wuncU5q2bNON6wldlCCdf6AaTXcDbcsSiaGOZDxGibp1gNEWVjpZBrJvso1PDfPv3bg/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p>需要获取 louzai2 的 bean，是 AbstractBeanFactory 的方法。</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/sXFqMxQoVLHqKibakH9hO9wuncU5q2bNO9yW8MRkae4lQqnZLjnWnJ6AA1dbh6BoMFrEx1licVHA1RibMic8eggP4w/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p>正式获取 louzai2 的 bean。</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/sXFqMxQoVLHqKibakH9hO9wuncU5q2bNOqtv8E8CX8O4MB830hMoSK2YqvIYI7wDlsdYxic7jsnyPnooSn6JebhA/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p><strong>到这里，第一层套娃基本结束，因为 louzai1 依赖 louzai2，下面我们进入第二层套娃。</strong></p><h2 id="2-3-第二层"><a href="#2-3-第二层" class="headerlink" title="2.3 第二层"></a>2.3 第二层</h2><p><img src="https://mmbiz.qpic.cn/mmbiz_png/sXFqMxQoVLHqKibakH9hO9wuncU5q2bNOpfvYbyxOvVlwvzxv94CtniaQzibXLK1G7HfM3PcPygUr3RgkXdKE2h0g/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p>获取 louzai2 的 bean，从 doGetBean()，到 doResolveDependency()，和第一层的逻辑完全一样，找到 louzai2 依赖的对象名 louzai1。</p><p>前面的流程全部省略，直接到 doResolveDependency()。</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/sXFqMxQoVLHqKibakH9hO9wuncU5q2bNOvKMaqFvSKo0qahT78icU1Uf4T70F54bRqk7hdqhorqW6r6efibwkwqHg/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p>正式获取 louzai1 的 bean。</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/sXFqMxQoVLHqKibakH9hO9wuncU5q2bNO13vQDjUKscx8Rg7wExCQN0m7ic298kfXXg4grLoia0BfhHjgS7SMiadeg/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p><strong>到这里，第二层套娃结束，因为 louzai2 依赖 louzai1，所以我们进入第三层套娃。</strong></p><h2 id="2-4-第三层"><a href="#2-4-第三层" class="headerlink" title="2.4 第三层"></a>2.4 第三层</h2><p><img src="https://mmbiz.qpic.cn/mmbiz_png/sXFqMxQoVLHqKibakH9hO9wuncU5q2bNOI01icQAGFZWCibO1fFRz9ta32icwObTp0EkJiaVYuXCgm6G10OzK5nyibWQ/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p>获取 louzai1 的 bean，在第一层和第二层中，我们每次都会从 getSingleton() 获取对象，但是由于之前没有初始化 louzai1 和 louzai2 的三级缓存，所以获取对象为空。</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/sXFqMxQoVLHqKibakH9hO9wuncU5q2bNOiah5c2Z1hjtHoibMeFJXM37cuf7tHOnfjblJQwU1OPKc0yicBW7fibtHrg/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/sXFqMxQoVLHqKibakH9hO9wuncU5q2bNOxKSlncPw1azxuls349583gZsC1L88jTcE6sDpia4eCIyNOYF2N9RFbA/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p><strong>敲重点！敲重点！！敲重点！！！</strong></p><p>到了第三层，由于第三级缓存有 louzai1 数据，这里使用三级缓存中的工厂，为 louzai1 创建一个代理对象，塞入二级缓存。</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/sXFqMxQoVLHqKibakH9hO9wuncU5q2bNOZZNM1sBrrH0juatDb5IQfYUHicgsuJV7SYxCWia9AskoQ0Kkw4CgNhuQ/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p>这里就拿到了 louzai1 的代理对象，解决了 louzai2 的依赖关系，返回到第二层。</p><h2 id="2-5-返回第二层"><a href="#2-5-返回第二层" class="headerlink" title="2.5 返回第二层"></a>2.5 返回第二层</h2><p>返回第二层后，louzai2 初始化结束，这里就结束了么？二级缓存的数据，啥时候会给到一级呢？</p><p>甭着急，看这里，还记得在 doGetBean() 中，我们会通过 createBean() 创建一个 louzai2 的 bean，当 louzai2 的 bean 创建成功后，我们会执行 getSingleton()，它会对 louzai2 的结果进行处理。</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/sXFqMxQoVLHqKibakH9hO9wuncU5q2bNOW1eibGicxv7f0ThvM1hXdp0GeMA0BaY5KCRZIZZQr0F7LxJJdmZ0GWcQ/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p>我们进入 getSingleton()，会看到下面这个方法。</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/sXFqMxQoVLHqKibakH9hO9wuncU5q2bNOIDF4icrhq4Iao8gQJrDfeIHz0MNjUBS7ZAEPZjl1CH9dloYX56pr5JA/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p>这里就是处理 louzai2 的 一、二级缓存的逻辑，将二级缓存清除，放入一级缓存。</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/sXFqMxQoVLHqKibakH9hO9wuncU5q2bNOpT8PriaWibiaAdPP5ODaO47FM3cVyfL8NWvSSs1dQAnfnSuKMa6sKxllg/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><h2 id="2-6-返回第一层"><a href="#2-6-返回第一层" class="headerlink" title="2.6 返回第一层"></a>2.6 返回第一层</h2><p>同 2.5，louzai1 初始化完毕后，会把 louzai1 的二级缓存清除，将对象放入一级缓存。</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/sXFqMxQoVLHqKibakH9hO9wuncU5q2bNO0RMJoTP25eOrA3r2FRKnJib0jtTTAglW2ibFTGygD0QgExl3zNFbDiaOQ/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p>到这里，所有的流程结束，我们返回 louzai1 对象。</p><h1 id="3-原理深度解读"><a href="#3-原理深度解读" class="headerlink" title="3. 原理深度解读"></a>3. 原理深度解读</h1><h1 id="3-1-什么要有-3-级缓存-？"><a href="#3-1-什么要有-3-级缓存-？" class="headerlink" title="3.1 什么要有 3 级缓存 ？"></a>3.1 什么要有 3 级缓存 ？</h1><p>这是一道非常经典的面试题，前面已经告诉大家详细的执行流程，包括源码解读，但是没有告诉大家为什么要用 3 级缓存？</p><p><strong>这里是重点！敲黑板！！！</strong></p><p>我们先说“一级缓存”的作用，变量命名为 singletonObjects，结构是 Map&lt;String, Object&gt;，它就是一个单例池，将初始化好的对象放到里面，给其它线程使用，<strong>如果没有第一级缓存，程序不能保证 Spring 的单例属性。</strong></p><p>“二级缓存”先放放，我们直接看“三级缓存”的作用，变量命名为 singletonFactories，结构是 Map&lt;String, ObjectFactory&lt;?&gt;&gt;，Map 的 Value 是一个对象的代理工厂，所以“三级缓存”的作用，其实就是用来存放对象的代理工厂。</p><p>那这个对象的代理工厂有什么作用呢，我先给出答案，<strong>它的主要作用是存放半成品的单例 Bean，目的是为了“打破循环”</strong>，可能大家还是不太懂，这里我再稍微解释一下。</p><p>我们回到文章开头的例子，创建 A 对象时，会把实例化的 A 对象存入“三级缓存”，这个 A 其实是个半成品，因为没有完成 A 的依赖属性 B 的注入，所以后面当初始化 B 时，B 又要去找 A，这时就需要从“三级缓存”中拿到这个半成品的 A（这里描述，其实也不完全准确，因为不是直接拿，为了让大家好理解，我就先这样描述），打破循环。</p><p>那我再问一个问题，<strong>为什么“三级缓存”不直接存半成品的 A，而是要存一个代理工厂呢 ？答案是因为 AOP。</strong></p><p>在解释这个问题前，我们看一下这个代理工厂的源码，让大家有一个更清晰的认识。</p><p>直接找到创建 A 对象时，把实例化的 A 对象存入“三级缓存”的代码，直接用前面的两幅截图。</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/sXFqMxQoVLHqKibakH9hO9wuncU5q2bNO9tx6jk4cLlTibhiax6dB67cQkArxyzspw3Wq12yvwORzP8jicB0sPC7rw/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/sXFqMxQoVLHqKibakH9hO9wuncU5q2bNOY35CnbLdL7p2QmoyUcc0RTljdc5XUSHCc89UDibjah7Gmn3nSwlmDsw/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p>下面我们主要看这个对象工厂是如何得到的，进入 getEarlyBeanReference() 方法。</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/sXFqMxQoVLHqKibakH9hO9wuncU5q2bNOxq2eMicDbZibKcXTChXZOT8BB0gS32m6yhhehKzhI3oESHLYOfFhu4RA/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/sXFqMxQoVLHqKibakH9hO9wuncU5q2bNObvFJr4iaatfQ3dmG85qHfpGSTnBE0XCBiaxZ1Htakl1QDwR403SAicdJA/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/sXFqMxQoVLHqKibakH9hO9wuncU5q2bNOr1aMYsBoBib2qzI9uhhtvvjAey7P63KhOdqSelcRhlqgLiaMITJaGqAA/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/sXFqMxQoVLHqKibakH9hO9wuncU5q2bNOCN3LKbGzmQqWaQ5Oj3bbsIsHXfiankZkBKYcyozYgicOmcWJia8q2paiag/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p>最后一幅图太重要了，我们知道这个对象工厂的作用：</p><ul><li>如果 A 有 AOP，就创建一个代理对象；</li><li>如果 A 没有 AOP，就返回原对象。</li></ul><p><strong>那“二级缓存”的作用就清楚了，就是用来存放对象工厂生成的对象，这个对象可能是原对象，也可能是个代理对象。</strong></p><p>我再问一个问题，为什么要这样设计呢？把二级缓存干掉不行么 ？我们继续往下看。</p><h1 id="3-2-能干掉第-2-级缓存么-？"><a href="#3-2-能干掉第-2-级缓存么-？" class="headerlink" title="3.2 能干掉第 2 级缓存么 ？"></a>3.2 能干掉第 2 级缓存么 ？</h1><pre class="line-numbers language-none"><code class="language-none">@Servicepublic class A &#123;    @Autowired    private B b;    @Autowired    private C c;    public void test1() &#123;    &#125;&#125;@Servicepublic class B &#123;    @Autowired    private A a;    public void test2() &#123;    &#125;&#125;@Servicepublic class C &#123;    @Autowired    private A a;    public void test3() &#123;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>根据上面的套娃逻辑，A 需要找 B 和 C，但是 B 需要找 A，C 也需要找 A。</p><p><strong>假如 A 需要进行 AOP</strong>，因为代理对象每次都是生成不同的对象，如果干掉第二级缓存，只有第一、三级缓存：</p><ul><li>B 找到 A 时，直接通过三级缓存的工厂的代理对象，生成对象 A1。</li><li>C 找到 A 时，直接通过三级缓存的工厂的代理对象，生成对象 A2。</li></ul><p>看到问题没？<strong>你通过 A 的工厂的代理对象，生成了两个不同的对象 A1 和 A2</strong>，所以为了避免这种问题的出现，我们搞个二级缓存，把 A1 存下来，下次再获取时，直接从二级缓存获取，无需再生成新的代理对象。</p><p><strong>所以“二级缓存”的目的是为了避免因为 AOP 创建多个对象，其中存储的是半成品的 AOP 的单例 bean。</strong></p><p>如果没有 AOP 的话，我们其实只要 1、3 级缓存，就可以满足要求。</p><h1 id="4-写在最后"><a href="#4-写在最后" class="headerlink" title="4. 写在最后"></a>4. 写在最后</h1><p>我们再回顾一下 3 级缓存的作用：</p><ul><li>一级缓存：<strong>为“Spring 的单例属性”而生</strong>，就是个单例池，用来存放已经初始化完成的单例 Bean；</li><li>二级缓存：<strong>为“解决 AOP”而生</strong>，存放的是半成品的 AOP 的单例 Bean；</li><li>三级缓存：<strong>为“打破循环”而生</strong>，存放的是生成半成品单例 Bean 的工厂方法。</li></ul>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>手写简易版SpringIOC思路</title>
      <link href="/2023/05/03/zi-ding-yi-ioc/"/>
      <url>/2023/05/03/zi-ding-yi-ioc/</url>
      
        <content type="html"><![CDATA[<h2 id="1-自定义SpringIOC"><a href="#1-自定义SpringIOC" class="headerlink" title="1 自定义SpringIOC"></a>1 自定义SpringIOC</h2><p>现要对下面的配置文件进行解析，并自定义Spring框架的IOC对涉及到的对象进行管理。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>domain.User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>吕飞扬<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userId<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>service.Impl.UserServiceImpl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-1-定义bean相关的pojo类"><a href="#1-1-定义bean相关的pojo类" class="headerlink" title="1.1 定义bean相关的pojo类"></a>1.1 定义bean相关的pojo类</h3><h4 id="1-1-1-PropertyValue类"><a href="#1-1-1-PropertyValue类" class="headerlink" title="1.1.1 PropertyValue类"></a>1.1.1 PropertyValue类</h4><p>用于封装bean的属性，体现到上面的配置文件就是封装bean标签的子标签property标签数据。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * property标签 * * @author 吕飞扬 * @date 2023/5/3 1:01 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PropertyValue</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> ref<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> value<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">PropertyValue</span><span class="token punctuation">(</span><span class="token class-name">String</span> ref<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">String</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>ref <span class="token operator">=</span> ref<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> ref<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setRef</span><span class="token punctuation">(</span><span class="token class-name">String</span> ref<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>ref <span class="token operator">=</span> ref<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> value<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setValue</span><span class="token punctuation">(</span><span class="token class-name">String</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-1-2-PropertyValues类"><a href="#1-1-2-PropertyValues类" class="headerlink" title="1.1.2 PropertyValues类"></a>1.1.2 PropertyValues类</h4><p>一个bean标签可以有多个property子标签，所以再定义一个PropertyValues类，用来存储并管理多个PropertyValue对象。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** *  bean标签列表 * * @author 吕飞扬 * @date 2023/5/3 1:03 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PropertyValues</span> <span class="token keyword">implements</span> <span class="token class-name">Iterable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PropertyValue</span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PropertyValue</span><span class="token punctuation">></span></span> propertyValueList<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">PropertyValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>propertyValueList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">PropertyValues</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PropertyValue</span><span class="token punctuation">></span></span> propertyValueList<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>propertyValueList <span class="token operator">=</span> propertyValueList<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">PropertyValue</span> p<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        propertyValueList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">removeProperValue</span><span class="token punctuation">(</span><span class="token class-name">PropertyValue</span> p<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        propertyValueList<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">contains</span><span class="token punctuation">(</span><span class="token class-name">PropertyValue</span> p<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> propertyValueList<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PropertyValue</span><span class="token punctuation">></span></span> <span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> propertyValueList<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-1-3-BeanDefinition类"><a href="#1-1-3-BeanDefinition类" class="headerlink" title="1.1.3 BeanDefinition类"></a>1.1.3 BeanDefinition类</h4><p>BeanDefinition类用来封装bean信息的，主要包含id（即bean对象的名称）、class（需要交由spring管理的类的全类名）及子标签property数据。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 封装Bean信息 * * @author 吕飞扬 * @date 2023/5/3 1:08 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BeanDefinition</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> className<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">PropertyValues</span> propertyValues<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">BeanDefinition</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        propertyValues <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PropertyValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> id<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span><span class="token class-name">String</span> id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> className<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setClassName</span><span class="token punctuation">(</span><span class="token class-name">String</span> className<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>className <span class="token operator">=</span> className<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">PropertyValues</span> <span class="token function">getPropertyValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> propertyValues<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setPropertyValues</span><span class="token punctuation">(</span><span class="token class-name">PropertyValues</span> propertyValues<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>propertyValues <span class="token operator">=</span> propertyValues<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-1-定义注册表相关类"><a href="#2-1-定义注册表相关类" class="headerlink" title="2.1 定义注册表相关类"></a>2.1 定义注册表相关类</h3><h4 id="2-1-1-BeanRegistry接口"><a href="#2-1-1-BeanRegistry接口" class="headerlink" title="2.1.1 BeanRegistry接口"></a>2.1.1 BeanRegistry接口</h4><p>BeanRegistry接口定义了注册表的相关操作，定义如下功能：</p><ul><li>注册BeanDefinition对象到注册表中</li><li>从注册表中删除指定名称的BeanDefinition对象</li><li>根据名称从注册表中获取BeanDefinition对象</li><li>判断注册表中是否包含指定名称的BeanDefinition对象</li><li>获取注册表中BeanDefinition对象的个数</li><li>获取注册表中所有的BeanDefinition的名称</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 注册bean接口 * * @author 吕飞扬 * @date 2023/5/3 1:14 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">BeanRegistry</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 注册BeanDefinition对象到注册表中     */</span>    <span class="token keyword">void</span> <span class="token function">registerBeanDefinition</span><span class="token punctuation">(</span><span class="token class-name">String</span> beanName<span class="token punctuation">,</span> <span class="token class-name">BeanDefinition</span> beanDefinition<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 从注册表中删除指定名称的BeanDefinition对象     */</span>    <span class="token keyword">void</span> <span class="token function">removeBeanDefinition</span><span class="token punctuation">(</span><span class="token class-name">String</span> beanName<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 根据名称从注册表中获取BeanDefinition对象     */</span>    <span class="token class-name">BeanDefinition</span> <span class="token function">getBeanDefinition</span><span class="token punctuation">(</span><span class="token class-name">String</span> beanName<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> <span class="token function">containsBeanDefinition</span><span class="token punctuation">(</span><span class="token class-name">String</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token function">getBeanDefinitionCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getBeanDefinitionNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-1-2-SimpleBeanDefinitionRegistry类"><a href="#2-1-2-SimpleBeanDefinitionRegistry类" class="headerlink" title="2.1.2 SimpleBeanDefinitionRegistry类"></a>2.1.2 SimpleBeanDefinitionRegistry类</h4><p>该类实现了BeanRegistry接口，定义了Map集合作为注册表容器。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 注册bean实现类 * * @author 吕飞扬 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SimpleBeanDefinitionRegistry</span> <span class="token keyword">implements</span> <span class="token class-name">BeanRegistry</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 注册表容器     */</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">BeanDefinition</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">registerBeanDefinition</span><span class="token punctuation">(</span><span class="token class-name">String</span> beanName<span class="token punctuation">,</span> <span class="token class-name">BeanDefinition</span> beanDefinition<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> beanDefinition<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">removeBeanDefinition</span><span class="token punctuation">(</span><span class="token class-name">String</span> beanName<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        map<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">BeanDefinition</span> <span class="token function">getBeanDefinition</span><span class="token punctuation">(</span><span class="token class-name">String</span> beanName<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">containsBeanDefinition</span><span class="token punctuation">(</span><span class="token class-name">String</span> beanName<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> map<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getBeanDefinitionCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> map<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getBeanDefinitionNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> map<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-1-定义解析器相关类"><a href="#3-1-定义解析器相关类" class="headerlink" title="3.1 定义解析器相关类"></a>3.1 定义解析器相关类</h3><h4 id="3-1-1-BeanDefinitionReader接口"><a href="#3-1-1-BeanDefinitionReader接口" class="headerlink" title="3.1.1 BeanDefinitionReader接口"></a>3.1.1 BeanDefinitionReader接口</h4><p>BeanDefinitionReader是用来解析配置文件并在注册表中注册bean的信息。定义了两个规范：</p><ul><li>获取注册表的功能，让外界可以通过该对象获取注册表对象。</li><li>加载配置文件，并注册bean数据。</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * bean解析器 * * @author 吕飞扬 * @date 2023/5/3 1:24 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">BeanDefinitionReader</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 获取注册表对象     */</span>    <span class="token class-name">BeanRegistry</span> <span class="token function">getRegistry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 加载配置文件并在注册表（map）中进行注册     * @param  configLocation 配置文件名     * @throws Exception     */</span>    <span class="token keyword">void</span> <span class="token function">loadBeanDefinitions</span><span class="token punctuation">(</span><span class="token class-name">String</span> configLocation<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-1-2-XmlBeanDefinitionReader类"><a href="#3-1-2-XmlBeanDefinitionReader类" class="headerlink" title="3.1.2 XmlBeanDefinitionReader类"></a>3.1.2 XmlBeanDefinitionReader类</h4><p>XmlBeanDefinitionReader类是专门用来解析xml配置文件的。该类实现BeanDefinitionReader接口并实现接口中的两个功能。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * xml解析器实现类 * * @author 吕飞扬 * @date 2023/5/3 1:41 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">XmlBeanDefinitionReader</span> <span class="token keyword">implements</span> <span class="token class-name">BeanDefinitionReader</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">BeanRegistry</span> registry<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">XmlBeanDefinitionReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>registry <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleBeanDefinitionRegistry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">BeanRegistry</span> <span class="token function">getRegistry</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> registry<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">loadBeanDefinitions</span><span class="token punctuation">(</span><span class="token class-name">String</span> configLocation<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">InputStream</span> is <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span>configLocation<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SAXReader</span> saxReader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SAXReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Document</span> read <span class="token operator">=</span> saxReader<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>is<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Element</span> rootElement <span class="token operator">=</span> read<span class="token punctuation">.</span><span class="token function">getRootElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//解析bean标签</span>        <span class="token function">parseBean</span><span class="token punctuation">(</span>rootElement<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">parseBean</span><span class="token punctuation">(</span><span class="token class-name">Element</span> rootElement<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Element</span><span class="token punctuation">></span></span> elements <span class="token operator">=</span> rootElement<span class="token punctuation">.</span><span class="token function">elements</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        elements<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>item<span class="token operator">-></span><span class="token punctuation">&#123;</span>            <span class="token class-name">String</span> id <span class="token operator">=</span> item<span class="token punctuation">.</span><span class="token function">attributeValue</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> className <span class="token operator">=</span> item<span class="token punctuation">.</span><span class="token function">attributeValue</span><span class="token punctuation">(</span><span class="token string">"class"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">BeanDefinition</span> beanDefinition <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BeanDefinition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            beanDefinition<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>            beanDefinition<span class="token punctuation">.</span><span class="token function">setClassName</span><span class="token punctuation">(</span>className<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//bean标签内可能有多个property</span>            <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Element</span><span class="token punctuation">></span></span> propertys <span class="token operator">=</span> item<span class="token punctuation">.</span><span class="token function">elements</span><span class="token punctuation">(</span><span class="token string">"property"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">PropertyValues</span> propertyValues <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PropertyValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Element</span> property <span class="token operator">:</span> propertys<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">String</span> ref <span class="token operator">=</span> property<span class="token punctuation">.</span><span class="token function">attributeValue</span><span class="token punctuation">(</span><span class="token string">"ref"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">String</span> name <span class="token operator">=</span> property<span class="token punctuation">.</span><span class="token function">attributeValue</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">String</span> value <span class="token operator">=</span> property<span class="token punctuation">.</span><span class="token function">attributeValue</span><span class="token punctuation">(</span><span class="token string">"value"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">PropertyValue</span> propertyValue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PropertyValue</span><span class="token punctuation">(</span>ref<span class="token punctuation">,</span> name<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>                propertyValues<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>propertyValue<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>                beanDefinition<span class="token punctuation">.</span><span class="token function">setPropertyValues</span><span class="token punctuation">(</span>propertyValues<span class="token punctuation">)</span><span class="token punctuation">;</span>            registry<span class="token punctuation">.</span><span class="token function">registerBeanDefinition</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span>beanDefinition<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-1-IOC容器相关类"><a href="#4-1-IOC容器相关类" class="headerlink" title="4.1 IOC容器相关类"></a>4.1 IOC容器相关类</h3><h4 id="4-1-1-BeanFactory接口"><a href="#4-1-1-BeanFactory接口" class="headerlink" title="4.1.1 BeanFactory接口"></a>4.1.1 BeanFactory接口</h4><p>在该接口中定义IOC容器的统一规范即获取bean对象。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * bean工厂接口 * * @author 吕飞扬 * @date 2023/5/3 2:04 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">BeanFactory</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 根据bean对象的名称获取bean对象     */</span>    <span class="token class-name">Object</span> <span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 根据bean对象的名称获取bean对象，并进行类型转换     */</span>    <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token class-name">T</span> <span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">T</span><span class="token punctuation">></span></span> clazz<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-1-2-ApplicationContext接口"><a href="#4-1-2-ApplicationContext接口" class="headerlink" title="4.1.2 ApplicationContext接口"></a>4.1.2 ApplicationContext接口</h4><p>该接口的所以的子实现类对bean对象的创建都是非延时的，所以在该接口中定义 <code>refresh()</code> 方法，该方法主要完成以下两个功能：</p><ul><li>加载配置文件。</li><li>根据注册表中的BeanDefinition对象封装的数据进行bean对象的创建。</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ApplicationContext</span> <span class="token keyword">extends</span> <span class="token class-name">BeanFactory</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 进行配置文件加载并进行对象创建     */</span>    <span class="token keyword">void</span> <span class="token function">refresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">,</span> <span class="token class-name">Exception</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-1-3-AbstractApplicationContext类"><a href="#4-1-3-AbstractApplicationContext类" class="headerlink" title="4.1.3 AbstractApplicationContext类"></a>4.1.3 AbstractApplicationContext类</h4><ul><li><p>作为ApplicationContext接口的子类，所以该类也是非延时加载，所以需要在该类中定义一个Map集合，作为bean对象存储的容器。</p></li><li><p>声明BeanDefinitionReader类型的变量，用来进行xml配置文件的解析，符合单一职责原则。</p><p>BeanDefinitionReader类型的对象创建交由子类实现，因为只有子类明确到底创建BeanDefinitionReader哪儿个子实现类对象。</p></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AbstractApplicationContext</span> <span class="token keyword">implements</span> <span class="token class-name">ApplicationContext</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">protected</span> <span class="token class-name">BeanDefinitionReader</span> reader<span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token class-name">String</span> configLocation<span class="token punctuation">;</span>    <span class="token comment">/**     * Bean容器     */</span>    <span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">refresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">,</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//加载BeanDefinition</span>        reader<span class="token punctuation">.</span><span class="token function">loadBeanDefinitions</span><span class="token punctuation">(</span>configLocation<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//初始化bean</span>        <span class="token function">finishBeanInitialization</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * bean的初始化     * 模板方法模式     *     * @throws Exception     */</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">finishBeanInitialization</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">BeanRegistry</span> registry <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">getRegistry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> beanNames <span class="token operator">=</span> registry<span class="token punctuation">.</span><span class="token function">getBeanDefinitionNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> beanName <span class="token operator">:</span> beanNames<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">getBean</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意：该类finishBeanInitialization()方法中调用getBean()方法使用到了模板方法模式。</p></blockquote><h4 id="4-1-4-ClassPathXmlApplicationContext类"><a href="#4-1-4-ClassPathXmlApplicationContext类" class="headerlink" title="4.1,4 ClassPathXmlApplicationContext类"></a>4.1,4 ClassPathXmlApplicationContext类</h4><p>该类主要是加载类路径下的配置文件，并进行bean对象的创建，主要完成以下功能：</p><ul><li>在构造方法中，创建BeanDefinitionReader对象。</li><li>在构造方法中，调用refresh()方法，用于进行配置文件加载、创建bean对象并存储到容器中。</li><li>重写父接口中的getBean()方法，并实现依赖注入操作。</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** *  进行bean对象创建 * * @author 吕飞扬 * @date 2023/5/3 16:13 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ClassPathXmlApplicationContext</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractApplicationContext</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token class-name">String</span> file<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>configLocation<span class="token operator">=</span>file<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XmlBeanDefinitionReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">refresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//容器中有直接返回</span>        <span class="token class-name">Object</span> o <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>o <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> o<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">BeanRegistry</span> registry <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">getRegistry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">BeanDefinition</span> beanDefinition <span class="token operator">=</span> registry<span class="token punctuation">.</span><span class="token function">getBeanDefinition</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> className <span class="token operator">=</span> beanDefinition<span class="token punctuation">.</span><span class="token function">getClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> clazz <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>className<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Object</span> beanObj <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">PropertyValues</span> propertyValues <span class="token operator">=</span> beanDefinition<span class="token punctuation">.</span><span class="token function">getPropertyValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">PropertyValue</span> propertyValue <span class="token operator">:</span> propertyValues<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">String</span> value <span class="token operator">=</span> propertyValue<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> propertyValueName <span class="token operator">=</span> propertyValue<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> ref <span class="token operator">=</span> propertyValue<span class="token punctuation">.</span><span class="token function">getRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//ref和value只能同时存在一个</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>ref <span class="token operator">!=</span><span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token string">""</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>ref<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token comment">//TODO 循环依赖问题</span>                <span class="token class-name">Object</span> bean <span class="token operator">=</span> <span class="token function">getBean</span><span class="token punctuation">(</span>ref<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//拼接set方法</span>                <span class="token class-name">String</span> methodName <span class="token operator">=</span> <span class="token function">getMethodName</span><span class="token punctuation">(</span>propertyValueName<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">Method</span><span class="token punctuation">[</span><span class="token punctuation">]</span> methods <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Method</span> method <span class="token operator">:</span> methods<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>methodName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                        method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>beanObj<span class="token punctuation">,</span>bean<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>value <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token string">""</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token class-name">String</span> methodName <span class="token operator">=</span> <span class="token function">getMethodName</span><span class="token punctuation">(</span>propertyValueName<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">Method</span> method <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span>methodName<span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>beanObj<span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>beanObj<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> beanObj<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token function">getMethodName</span><span class="token punctuation">(</span><span class="token class-name">String</span> propertyValueName<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"set"</span> <span class="token operator">+</span> propertyValueName<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> propertyValueName<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token class-name">T</span> <span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">T</span><span class="token punctuation">></span></span> clazz<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Object</span> bean <span class="token operator">=</span> <span class="token function">getBean</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>bean <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> clazz<span class="token punctuation">.</span><span class="token function">cast</span><span class="token punctuation">(</span>bean<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="2-测试"><a href="#2-测试" class="headerlink" title="2 测试"></a>2 测试</h1><p>根据xml自动注入值</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> userId<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"User创建成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">String</span> userId<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>userId <span class="token operator">=</span> userId<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> userId<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUserId</span><span class="token punctuation">(</span><span class="token class-name">String</span> userId<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>userId <span class="token operator">=</span> userId<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"User&#123;"</span> <span class="token operator">+</span>                <span class="token string">"name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token char">'\''</span> <span class="token operator">+</span>                <span class="token string">", userId='"</span> <span class="token operator">+</span> userId <span class="token operator">+</span> <span class="token char">'\''</span> <span class="token operator">+</span>                <span class="token char">'&#125;'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试xml自动注入引用类型数据</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserService</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">User</span> user<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">UserServiceImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"UserServiceImpl创建成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">showName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUser</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>user <span class="token operator">=</span> user<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>xml</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token generics"><span class="token punctuation">&lt;</span>beans<span class="token punctuation">></span></span>    <span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"user"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"domain.User"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"name"</span> value<span class="token operator">=</span><span class="token string">"吕飞扬"</span> <span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"userId"</span> value<span class="token operator">=</span><span class="token string">"1"</span> <span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span>    <span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"userService"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"service.Impl.UserServiceImpl"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"user"</span> ref<span class="token operator">=</span><span class="token string">"user"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>beans<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Application</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//创建spring容器对象</span>        <span class="token class-name">ApplicationContext</span> applicationContext <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"application.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//从IOC容器中获取UserService对象</span>        <span class="token class-name">UserService</span> userService <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>             userService <span class="token operator">=</span> applicationContext<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"userService"</span><span class="token punctuation">,</span> <span class="token class-name">UserService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//showName</span>        <span class="token keyword">assert</span> userService <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        userService<span class="token punctuation">.</span><span class="token function">showName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试结果如图：</p><p><img src="https://lfymall.oss-cn-fuzhou.aliyuncs.com/study/IOC.png" alt="https://lfymall.oss-cn-fuzhou.aliyuncs.com/study/IOC.png"></p>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式</title>
      <link href="/2023/04/27/she-ji-mo-shi/"/>
      <url>/2023/04/27/she-ji-mo-shi/</url>
      
        <content type="html"><![CDATA[<h1 id="创建者模式"><a href="#创建者模式" class="headerlink" title="创建者模式"></a>创建者模式</h1><h2 id="1-单例模式的实现"><a href="#1-单例模式的实现" class="headerlink" title="1 单例模式的实现"></a>1 单例模式的实现</h2><blockquote><p>单例设计模式分类两种：</p><p>​饿汉式：类加载就会导致该单实例对象被创建</p><p>​懒汉式：类加载不会导致该单实例对象被创建，而是首次使用该对象时才会创建</p></blockquote><ol><li><p>饿汉式-方式1（静态变量方式）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 饿汉式 *      静态变量创建类的对象 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//私有构造方法</span>    <span class="token keyword">private</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token comment">//在成员位置创建该类的对象</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//对外提供静态方法获取该对象</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><font color='red'>说明：</font></p><p>​该方式在成员位置声明Singleton类型的静态变量，并创建Singleton类的对象instance。instance对象是随着类的加载而创建的。如果该对象足够大的话，而一直没有使用就会造成内存的浪费。</p></li><li><p>饿汉式-方式2（静态代码块方式）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 恶汉式 *      在静态代码块中创建该类对象 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//私有构造方法</span>    <span class="token keyword">private</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token comment">//在成员位置创建该类的对象</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> instance<span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token punctuation">&#123;</span>        instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//对外提供静态方法获取该对象</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><font color='red'>说明：</font></p><p>​该方式在成员位置声明Singleton类型的静态变量，而对象的创建是在静态代码块中，也是对着类的加载而创建。所以和饿汉式的方式1基本上一样，当然该方式也存在内存浪费问题。</p></li><li><p>懒汉式-方式1（线程不安全）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 懒汉式 *  线程不安全 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//私有构造方法</span>    <span class="token keyword">private</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token comment">//在成员位置创建该类的对象</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> instance<span class="token punctuation">;</span>    <span class="token comment">//对外提供静态方法获取该对象</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>instance <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><font color='red'>说明：</font></p><p>​从上面代码我们可以看出该方式在成员位置声明Singleton类型的静态变量，并没有进行对象的赋值操作，那么什么时候赋值的呢？当调用getInstance()方法获取Singleton类的对象的时候才创建Singleton类的对象，这样就实现了懒加载的效果。但是，如果是多线程环境，会出现线程安全问题。</p></li><li><p>懒汉式-方式2（线程安全）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 懒汉式 *  线程安全 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//私有构造方法</span>    <span class="token keyword">private</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token comment">//在成员位置创建该类的对象</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> instance<span class="token punctuation">;</span>    <span class="token comment">//对外提供静态方法获取该对象</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">synchronized</span> <span class="token class-name">Singleton</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>instance <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><font color='red'>说明：</font></p><p>​该方式也实现了懒加载效果，同时又解决了线程安全问题。但是在getInstance()方法上添加了synchronized关键字，导致该方法的执行效果特别低。从上面代码我们可以看出，其实就是在初始化instance的时候才会出现线程安全问题，一旦初始化完成就不存在了。</p></li><li><p>懒汉式-方式3（双重检查锁）</p><p>再来讨论一下懒汉模式中加锁的问题，对于 <code>getInstance()</code> 方法来说，绝大部分的操作都是读操作，读操作是线程安全的，所以我们没必让每个线程必须持有锁才能调用该方法，我们需要调整加锁的时机。由此也产生了一种新的实现模式：双重检查锁模式</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 双重检查方式 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">&#123;</span>     <span class="token comment">//私有构造方法</span>    <span class="token keyword">private</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> instance<span class="token punctuation">;</span>   <span class="token comment">//对外提供静态方法获取该对象</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//第一次判断，如果instance不为null，不进入抢锁阶段，直接返回实例</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>instance <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token class-name">Singleton</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">//抢到锁之后再次判断是否为null</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>instance <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>双重检查锁模式是一种非常好的单例实现模式，解决了单例、性能、线程安全问题，上面的双重检测锁模式看上去完美无缺，其实是存在问题，在多线程的情况下，可能会出现空指针问题，出现问题的原因是JVM在实例化对象的时候会进行优化和指令重排序操作。</p><p>要解决双重检查锁模式带来空指针异常的问题，只需要使用 <code>volatile</code> 关键字, <code>volatile</code> 关键字可以保证可见性和有序性。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 双重检查方式 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//私有构造方法</span>    <span class="token keyword">private</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">volatile</span> <span class="token class-name">Singleton</span> instance<span class="token punctuation">;</span>   <span class="token comment">//对外提供静态方法获取该对象</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//第一次判断，如果instance不为null，不进入抢锁阶段，直接返回实际</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>instance <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token class-name">Singleton</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">//抢到锁之后再次判断是否为空</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>instance <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><font color="red">小结：</font></p><p>添加 <code>volatile</code> 关键字之后的双重检查锁模式是一种比较好的单例实现模式，能够保证在多线程的情况下线程安全也不会有性能问题。</p></li><li><p>懒汉式-方式4（静态内部类方式）</p><p>静态内部类单例模式中实例由内部类创建，由于 JVM 在加载外部类的过程中, 是不会加载静态内部类的, 只有内部类的属性&#x2F;方法被调用时才会被加载, 并初始化其静态属性。静态属性由于被 <code>static</code> 修饰，保证只被实例化一次，并且严格保证实例化顺序。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 静态内部类方式 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//私有构造方法</span>    <span class="token keyword">private</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">SingletonHolder</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Singleton</span> <span class="token constant">INSTANCE</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//对外提供静态方法获取该对象</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">SingletonHolder</span><span class="token punctuation">.</span><span class="token constant">INSTANCE</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><font color='red'>说明：</font></p><p>​第一次加载Singleton类时不会去初始化INSTANCE，只有第一次调用getInstance，虚拟机加载SingletonHolder</p><p>并初始化INSTANCE，这样不仅能确保线程安全，也能保证 Singleton 类的唯一性。</p><p><font color="red">小结：</font></p><p>​静态内部类单例模式是一种优秀的单例模式，是开源项目中比较常用的一种单例模式。在没有加任何锁的情况下，保证了多线程下的安全，并且没有任何性能影响和空间的浪费。</p></li><li><p>枚举方式</p><p>枚举类实现单例模式是极力推荐的单例实现模式，因为枚举类型是线程安全的，并且只会装载一次，设计者充分的利用了枚举的这个特性来实现单例模式，枚举的写法非常简单，而且枚举类型是所用单例实现中唯一一种不会被破坏的单例实现模式。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 枚举方式 */</span><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">Singleton</span> <span class="token punctuation">&#123;</span>    <span class="token constant">INSTANCE</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><font color='red'>说明：</font></p><p>​枚举方式属于恶汉式方式。</p></li></ol><h3 id="1-1）-存在的问题"><a href="#1-1）-存在的问题" class="headerlink" title="1.1） 存在的问题"></a>1.1） 存在的问题</h3><h4 id="问题演示"><a href="#问题演示" class="headerlink" title="问题演示"></a>问题演示</h4><p>破坏单例模式：</p><p>使上面定义的单例类（Singleton）可以创建多个对象，枚举方式除外。有两种方式，分别是序列化和反射。</p><ul><li><p>序列化反序列化</p><p><strong>Singleton类：</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//私有构造方法</span>    <span class="token keyword">private</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">SingletonHolder</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Singleton</span> <span class="token constant">INSTANCE</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//对外提供静态方法获取该对象</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">SingletonHolder</span><span class="token punctuation">.</span><span class="token constant">INSTANCE</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Test类：</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//往文件中写对象</span>        <span class="token comment">//writeObject2File();</span>        <span class="token comment">//从文件中读取对象</span>        <span class="token class-name">Singleton</span> s1 <span class="token operator">=</span> <span class="token function">readObjectFromFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Singleton</span> s2 <span class="token operator">=</span> <span class="token function">readObjectFromFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//判断两个反序列化后的对象是否是同一个对象</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1 <span class="token operator">==</span> s2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> <span class="token function">readObjectFromFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//创建对象输入流对象</span>        <span class="token class-name">ObjectInputStream</span> ois <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"C:\\Users\\Think\\Desktop\\a.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//第一个读取Singleton对象</span>        <span class="token class-name">Singleton</span> instance <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Singleton</span><span class="token punctuation">)</span> ois<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">writeObject2File</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//获取Singleton类的对象</span>        <span class="token class-name">Singleton</span> instance <span class="token operator">=</span> <span class="token class-name">Singleton</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//创建对象输出流</span>        <span class="token class-name">ObjectOutputStream</span> oos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"C:\\Users\\Think\\Desktop\\a.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//将instance对象写出到文件中</span>        oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>上面代码运行结果是<code>false</code>，表明序列化和反序列化已经破坏了单例设计模式。</p></blockquote></li><li><p>反射</p><p><strong>Singleton类：</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//私有构造方法</span>    <span class="token keyword">private</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">volatile</span> <span class="token class-name">Singleton</span> instance<span class="token punctuation">;</span>    <span class="token comment">//对外提供静态方法获取该对象</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>instance <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> instance<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token class-name">Singleton</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>instance <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> instance<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> instance<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Test类：</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//获取Singleton类的字节码对象</span>        <span class="token class-name">Class</span> clazz <span class="token operator">=</span> <span class="token class-name">Singleton</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>        <span class="token comment">//获取Singleton类的私有无参构造方法对象</span>        <span class="token class-name">Constructor</span> constructor <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//取消访问检查</span>        constructor<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//创建Singleton类的对象s1</span>        <span class="token class-name">Singleton</span> s1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Singleton</span><span class="token punctuation">)</span> constructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//创建Singleton类的对象s2</span>        <span class="token class-name">Singleton</span> s2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Singleton</span><span class="token punctuation">)</span> constructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//判断通过反射创建的两个Singleton对象是否是同一个对象</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1 <span class="token operator">==</span> s2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>上面代码运行结果是<code>false</code>，表明序列化和反序列化已经破坏了单例设计模式</p></blockquote></li></ul><blockquote><p><font color="red">注意：</font>枚举方式不会出现这两个问题。</p></blockquote><h3 id="1-2）问题的解决"><a href="#1-2）问题的解决" class="headerlink" title="1.2）问题的解决"></a>1.2）问题的解决</h3><ul><li><p>序列化、反序列方式破坏单例模式的解决方法</p><p>在Singleton类中添加<code>readResolve()</code>方法，在反序列化时被反射调用，如果定义了这个方法，就返回这个方法的值，如果没有定义，则返回新new出来的对象。</p><p><strong>Singleton类：</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//私有构造方法</span>    <span class="token keyword">private</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">SingletonHolder</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Singleton</span> <span class="token constant">INSTANCE</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//对外提供静态方法获取该对象</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">SingletonHolder</span><span class="token punctuation">.</span><span class="token constant">INSTANCE</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token comment">/**     * 下面是为了解决序列化反序列化破解单例模式     */</span>    <span class="token keyword">private</span> <span class="token class-name">Object</span> <span class="token function">readResolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">SingletonHolder</span><span class="token punctuation">.</span><span class="token constant">INSTANCE</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>源码解析：</strong></p><p>ObjectInputStream类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token class-name">Object</span> <span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ClassNotFoundException</span><span class="token punctuation">&#123;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment">// if nested read, passHandle contains handle of enclosing object</span>    <span class="token keyword">int</span> outerHandle <span class="token operator">=</span> passHandle<span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Object</span> obj <span class="token operator">=</span> <span class="token function">readObject0</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//重点查看readObject0方法</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token class-name">Object</span> <span class="token function">readObject0</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> unshared<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span><span class="token keyword">switch</span> <span class="token punctuation">(</span>tc<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">case</span> <span class="token constant">TC_OBJECT</span><span class="token operator">:</span><span class="token keyword">return</span> <span class="token function">checkResolve</span><span class="token punctuation">(</span><span class="token function">readOrdinaryObject</span><span class="token punctuation">(</span>unshared<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//重点查看readOrdinaryObject方法</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>        depth<span class="token operator">--</span><span class="token punctuation">;</span>        bin<span class="token punctuation">.</span><span class="token function">setBlockDataMode</span><span class="token punctuation">(</span>oldMode<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token class-name">Object</span> <span class="token function">readOrdinaryObject</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> unshared<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment">//isInstantiable 返回true，执行 desc.newInstance()，通过反射创建新的单例类，</span>    obj <span class="token operator">=</span> desc<span class="token punctuation">.</span><span class="token function">isInstantiable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> desc<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span>     <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment">// 在Singleton类中添加 readResolve 方法后 desc.hasReadResolveMethod() 方法执行结果为true</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> handles<span class="token punctuation">.</span><span class="token function">lookupException</span><span class="token punctuation">(</span>passHandle<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> desc<span class="token punctuation">.</span><span class="token function">hasReadResolveMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 通过反射调用 Singleton 类中的 readResolve 方法，将返回值赋值给rep变量</span>    <span class="token comment">// 这样多次调用ObjectInputStream类中的readObject方法，继而就会调用我们定义的readResolve方法，所以返回的是同一个对象。</span>    <span class="token class-name">Object</span> rep <span class="token operator">=</span> desc<span class="token punctuation">.</span><span class="token function">invokeReadResolve</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> obj<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>反射方式破解单例的解决方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//私有构造方法</span>    <span class="token keyword">private</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">/*           反射破解单例模式需要添加的代码        */</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>instance <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">volatile</span> <span class="token class-name">Singleton</span> instance<span class="token punctuation">;</span>    <span class="token comment">//对外提供静态方法获取该对象</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>instance <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> instance<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token class-name">Singleton</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>instance <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> instance<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> instance<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><font color="red">说明:</font></p><p>​这种方式比较好理解。当通过反射方式调用构造方法进行创建创建时，直接抛异常。不运行此中操作。</p></li></ul><h3 id="1-3）JDK源码解析-Runtime类"><a href="#1-3）JDK源码解析-Runtime类" class="headerlink" title="1.3）JDK源码解析-Runtime类"></a>1.3）JDK源码解析-Runtime类</h3><p>Runtime类就是使用的单例设计模式。</p><ol><li><p>通过源代码查看使用的是哪儿种单例模式</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Runtime</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Runtime</span> currentRuntime <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Runtime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * Returns the runtime object associated with the current Java application.     * Most of the methods of class &lt;code>Runtime&lt;/code> are instance     * methods and must be invoked with respect to the current runtime object.     *     * @return  the &lt;code>Runtime&lt;/code> object associated with the current     *          Java application.     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Runtime</span> <span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> currentRuntime<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/** Don't let anyone else instantiate this class */</span>    <span class="token keyword">private</span> <span class="token class-name">Runtime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从上面源代码中可以看出Runtime类使用的是恶汉式（静态属性）方式来实现单例模式的。</p></li><li><p>使用Runtime类中的方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RuntimeDemo</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//获取Runtime类对象</span>        <span class="token class-name">Runtime</span> runtime <span class="token operator">=</span> <span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//返回 Java 虚拟机中的内存总量。</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>runtime<span class="token punctuation">.</span><span class="token function">totalMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//返回 Java 虚拟机试图使用的最大内存量。</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>runtime<span class="token punctuation">.</span><span class="token function">maxMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//创建一个新的进程执行指定的字符串命令，返回进程对象</span>        <span class="token class-name">Process</span> process <span class="token operator">=</span> runtime<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">"ipconfig"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//获取命令执行后的结果，通过输入流获取</span>        <span class="token class-name">InputStream</span> inputStream <span class="token operator">=</span> process<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> b <span class="token operator">=</span> inputStream<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>b<span class="token punctuation">,</span><span class="token string">"gbk"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="2-工厂模式"><a href="#2-工厂模式" class="headerlink" title="2 工厂模式"></a>2 工厂模式</h2><h3 id="2-1）-简单工厂模式"><a href="#2-1）-简单工厂模式" class="headerlink" title="2.1） 简单工厂模式"></a>2.1） 简单工厂模式</h3><p>简单工厂不是一种设计模式，反而比较像是一种编程习惯。</p><h4 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h4><p>简单工厂包含如下角色：</p><ul><li>抽象产品 ：定义了产品的规范，描述了产品的主要特性和功能。</li><li>具体产品 ：实现或者继承抽象产品的子类</li><li>具体工厂 ：提供了创建产品的方法，调用者通过该方法来获取产品。</li></ul><p>工厂类代码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** coffee是一个接口，接口有AmericanoCoffee和LatteCoffee的两种实现，在业务中抽取创建coffee类代码，来完成解耦。其实简单工厂就是封装了一下代码*/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SimpleCoffeeFactory</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">Coffee</span> <span class="token function">createCoffee</span><span class="token punctuation">(</span><span class="token class-name">String</span> type<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Coffee</span> coffee <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"americano"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            coffee <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AmericanoCoffee</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"latte"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            coffee <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LatteCoffee</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> coffee<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>工厂（factory）处理创建对象的细节，一旦有了SimpleCoffeeFactory，CoffeeStore类中的orderCoffee()就变成此对象的客户，后期如果需要Coffee对象直接从工厂中获取即可。这样也就解除了和Coffee实现类的耦合，同时又产生了新的耦合，CoffeeStore对象和SimpleCoffeeFactory工厂对象的耦合，工厂对象和商品对象的耦合。</p><p>后期如果再加新品种的咖啡，我们势必要需求修改SimpleCoffeeFactory的代码，违反了开闭原则。工厂类的客户端可能有很多，比如创建美团外卖等，这样只需要修改工厂类的代码，省去其他的修改操作。</p><h4 id="2-1-1）-优缺点"><a href="#2-1-1）-优缺点" class="headerlink" title="2.1.1） 优缺点"></a>2.1.1） 优缺点</h4><p><strong>优点：</strong></p><p>封装了创建对象的过程，可以通过参数直接获取对象。把对象的创建和业务逻辑层分开，这样以后就避免了修改客户代码，如果要实现新产品直接修改工厂类，而不需要在原代码中修改，这样就降低了客户代码修改的可能性，更加容易扩展。</p><p><strong>缺点：</strong></p><p>增加新产品时还是需要修改工厂类的代码，违背了“开闭原则”。</p><h3 id="2-2-）工厂方法模式"><a href="#2-2-）工厂方法模式" class="headerlink" title="2.2 ）工厂方法模式"></a>2.2 ）工厂方法模式</h3><p>针对上例中的缺点，使用工厂方法模式就可以完美的解决，完全遵循开闭原则。</p><h4 id="2-2-1-概念"><a href="#2-2-1-概念" class="headerlink" title="2.2.1 概念"></a>2.2.1 概念</h4><p>定义一个用于创建对象的接口，让子类决定实例化哪个产品类对象。工厂方法使一个产品类的实例化延迟到其工厂的子类。</p><h4 id="2-2-2-结构"><a href="#2-2-2-结构" class="headerlink" title="2.2.2 结构"></a>2.2.2 结构</h4><p>工厂方法模式的主要角色：</p><ul><li>抽象工厂（Abstract Factory）：提供了创建产品的接口，调用者通过它访问具体工厂的工厂方法来创建产品。</li><li>具体工厂（ConcreteFactory）：主要是实现抽象工厂中的抽象方法，完成具体产品的创建。</li><li>抽象产品（Product）：定义了产品的规范，描述了产品的主要特性和功能。</li><li>具体产品（ConcreteProduct）：实现了抽象产品角色所定义的接口，由具体工厂来创建，它同具体工厂之间一一对应。</li></ul><h4 id="2-2-3-实现"><a href="#2-2-3-实现" class="headerlink" title="2.2.3 实现"></a>2.2.3 实现</h4><p>使用工厂方法模式对上例进行改进，类图如下：</p><p><img src="https://lfymall.oss-cn-fuzhou.aliyuncs.com/study/%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F.png" alt="https://lfymall.oss-cn-fuzhou.aliyuncs.com/study/%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F.png"></p><p>代码如下：</p><p>抽象工厂：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">CoffeeFactory</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Coffee</span> <span class="token function">createCoffee</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>具体工厂：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LatteCoffeeFactory</span> <span class="token keyword">implements</span> <span class="token class-name">CoffeeFactory</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">Coffee</span> <span class="token function">createCoffee</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">LatteCoffee</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AmericanCoffeeFactory</span> <span class="token keyword">implements</span> <span class="token class-name">CoffeeFactory</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">Coffee</span> <span class="token function">createCoffee</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">AmericanCoffee</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>咖啡店类：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CoffeeStore</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">CoffeeFactory</span> factory<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">CoffeeStore</span><span class="token punctuation">(</span><span class="token class-name">CoffeeFactory</span> factory<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>factory <span class="token operator">=</span> factory<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Coffee</span> <span class="token function">orderCoffee</span><span class="token punctuation">(</span><span class="token class-name">String</span> type<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Coffee</span> coffee <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">createCoffee</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        coffee<span class="token punctuation">.</span><span class="token function">addMilk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        coffee<span class="token punctuation">.</span><span class="token function">addsugar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> coffee<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从以上的编写的代码可以看到，要增加产品类时也要相应地增加工厂类，不需要修改工厂类的代码了，这样就解决了简单工厂模式的缺点。</p><p>工厂方法模式是简单工厂模式的进一步抽象。由于使用了多态性，工厂方法模式保持了简单工厂模式的优点，而且克服了它的缺点。</p><p><strong>通过抽象出一个工厂类接口，根据不同的工厂类型参数来决定实例化哪个对象，返回的对象又是一个对象的父接口类型，充分利用了多态的思想</strong></p><h4 id="2-2-4-优缺点"><a href="#2-2-4-优缺点" class="headerlink" title="2.2.4 优缺点"></a>2.2.4 优缺点</h4><p><strong>优点：</strong></p><ul><li>用户只需要知道具体工厂的名称就可得到所要的产品，无须知道产品的具体创建过程；</li><li>在系统增加新的产品时只需要添加具体产品类和对应的具体工厂类，无须对原工厂进行任何修改，满足开闭原则；</li></ul><p><strong>缺点：</strong></p><ul><li>每增加一个产品就要增加一个具体产品类和一个对应的具体工厂类，这增加了系统的复杂度。</li></ul><h3 id="2-3）模式扩展"><a href="#2-3）模式扩展" class="headerlink" title="2.3）模式扩展"></a>2.3）模式扩展</h3><p><strong>简单工厂+配置文件解除耦合</strong></p><p>可以通过工厂模式+配置文件的方式解除工厂对象和产品对象的耦合。在工厂类中加载配置文件中的全类名，并创建对象进行存储，客户端如果需要对象，直接进行获取即可。</p><p>第一步：定义配置文件</p><p>为了演示方便，我们使用properties文件作为配置文件，名称为bean.properties</p><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token key attr-name">american</span><span class="token punctuation">=</span><span class="token value attr-value">com.itheima.pattern.factory.config_factory.AmericanCoffee</span><span class="token key attr-name">latte</span><span class="token punctuation">=</span><span class="token value attr-value">com.itheima.pattern.factory.config_factory.LatteCoffee</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>第二步：改进工厂类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CoffeeFactory</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Coffee</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Properties</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">InputStream</span> is <span class="token operator">=</span> <span class="token class-name">CoffeeFactory</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"bean.properties"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            p<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>is<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//遍历Properties集合对象</span>            <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> keys <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Object</span> key <span class="token operator">:</span> keys<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">//根据键获取值（全类名）</span>                <span class="token class-name">String</span> className <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//获取字节码对象</span>                <span class="token class-name">Class</span> clazz <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>className<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">Coffee</span> obj <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Coffee</span><span class="token punctuation">)</span> clazz<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span>key<span class="token punctuation">,</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Coffee</span> <span class="token function">createCoffee</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>静态成员变量用来存储创建的对象（键存储的是名称，值存储的是对应的对象），而读取配置文件以及创建对象写在静态代码块中，目的就是只需要执行一次。</p><h3 id="2-4）抽象工厂"><a href="#2-4）抽象工厂" class="headerlink" title="2.4）抽象工厂"></a>2.4）抽象工厂</h3><p>抽象工厂模式的主要角色如下：</p><ul><li><p>抽象工厂（Abstract Factory）：提供了创建产品的接口，它包含多个创建产品的方法，可以创建多个不同等级的产品。</p></li><li><p>具体工厂（Concrete Factory）：主要是实现抽象工厂中的多个抽象方法，完成具体产品的创建。</p></li><li><p>抽象产品（Product）：定义了产品的规范，描述了产品的主要特性和功能，抽象工厂模式有多个抽象产品。</p></li><li><p>具体产品（ConcreteProduct）：实现了抽象产品角色所定义的接口，由具体工厂来创建，它 同具体工厂之间是多对一的关系。</p></li><li><p>代码如下：</p><p>抽象工厂：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">DessertFactory</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Coffee</span> <span class="token function">createCoffee</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Dessert</span> <span class="token function">createDessert</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>具体工厂：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//美式甜点工厂</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AmericanDessertFactory</span> <span class="token keyword">implements</span> <span class="token class-name">DessertFactory</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">Coffee</span> <span class="token function">createCoffee</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">AmericanCoffee</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Dessert</span> <span class="token function">createDessert</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MatchaMousse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//意大利风味甜点工厂</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ItalyDessertFactory</span> <span class="token keyword">implements</span> <span class="token class-name">DessertFactory</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">Coffee</span> <span class="token function">createCoffee</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">LatteCoffee</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Dessert</span> <span class="token function">createDessert</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Tiramisu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果要加同一个产品族的话，只需要再加一个对应的工厂类即可，不需要修改其他的类。</p><h4 id="2-4-1）-优缺点"><a href="#2-4-1）-优缺点" class="headerlink" title="2.4.1） 优缺点"></a>2.4.1） 优缺点</h4><p><strong>优点：</strong></p><p>当一个产品族中的多个对象被设计成一起工作时，它能保证客户端始终只使用同一个产品族中的对象。</p><p><strong>缺点：</strong></p><p>当产品族中需要增加一个新的产品时，所有的工厂类都需要进行修改。</p><h4 id="2-4-2）-使用场景"><a href="#2-4-2）-使用场景" class="headerlink" title="2.4.2） 使用场景"></a>2.4.2） 使用场景</h4><ul><li><p>当需要创建的对象是一系列相互关联或相互依赖的产品族时，如电器工厂中的电视机、洗衣机、空调等。</p></li><li><p>系统中有多个产品族，但每次只使用其中的某一族产品。如有人只喜欢穿某一个品牌的衣服和鞋。</p></li><li><p>系统中提供了产品的类库，且所有产品的接口相同，客户端不依赖产品实例的创建细节和内部结构。</p></li></ul><p>如：输入法换皮肤，一整套一起换。生成不同操作系统的程序。</p></li></ul><h2 id="3-原型模式"><a href="#3-原型模式" class="headerlink" title="3 原型模式"></a>3 原型模式</h2><h3 id="3-1浅拷贝"><a href="#3-1浅拷贝" class="headerlink" title="3.1浅拷贝"></a>3.1浅拷贝</h3><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">@Overrideprotected Student clone() throws CloneNotSupportedException &#123;    return (Student) super.clone();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>类实现Cloneable接口，重写clone方法</p><p>当类调用clone时浅拷贝对象，对象中的基本数据类型会被拷贝，对象中的引用数据类型，则会复用堆中的对象，不会创建新的对象，如果这个引用对象更改了之后，浅拷贝中的属性也会跟着变动</p><h3 id="3-2深拷贝"><a href="#3-2深拷贝" class="headerlink" title="3.2深拷贝"></a>3.2深拷贝</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CitationTest1</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Citation</span> c1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Citation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Student</span> stu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">,</span> <span class="token string">"西安"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        c1<span class="token punctuation">.</span><span class="token function">setStu</span><span class="token punctuation">(</span>stu<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//创建对象输出流对象</span>        <span class="token class-name">ObjectOutputStream</span> oos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"C:\\Users\\Think\\Desktop\\b.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//将c1对象写出到文件中</span>        oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>c1<span class="token punctuation">)</span><span class="token punctuation">;</span>        oos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//创建对象出入流对象</span>        <span class="token class-name">ObjectInputStream</span> ois <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"C:\\Users\\Think\\Desktop\\b.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//读取对象</span>        <span class="token class-name">Citation</span> c2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Citation</span><span class="token punctuation">)</span> ois<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//获取c2奖状所属学生对象</span>        <span class="token class-name">Student</span> stu1 <span class="token operator">=</span> c2<span class="token punctuation">.</span><span class="token function">getStu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stu1<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"李四"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//判断stu对象和stu1对象是否是同一个对象</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"stu和stu1是同一个对象？"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>stu <span class="token operator">==</span> stu1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        c1<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        c2<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>和new 没有区别，完全新对象。不会复制引用</p><h2 id="4-建造者模式"><a href="#4-建造者模式" class="headerlink" title="4.建造者模式"></a>4.建造者模式</h2><p>强调组装，代码一看就懂，可读性高</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> door <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token class-name">String</span> bank<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token function">door</span><span class="token punctuation">(</span><span class="token class-name">Builders</span> builders<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>bank <span class="token operator">=</span> builders<span class="token punctuation">.</span>bank<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> builders<span class="token punctuation">.</span>name<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getBank</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> bank<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"door&#123;"</span> <span class="token operator">+</span>                <span class="token string">"name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token char">'\''</span> <span class="token operator">+</span>                <span class="token string">", bank='"</span> <span class="token operator">+</span> bank <span class="token operator">+</span> <span class="token char">'\''</span> <span class="token operator">+</span>                <span class="token char">'&#125;'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Builders</span><span class="token punctuation">&#123;</span>        <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token class-name">String</span> bank<span class="token punctuation">;</span>       <span class="token keyword">public</span> <span class="token class-name">Builders</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>           <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>           <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token class-name">Builders</span> <span class="token function">bank</span><span class="token punctuation">(</span><span class="token class-name">String</span> bank<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>bank <span class="token operator">=</span> bank<span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> door <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>           <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token function">door</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        door build <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token namespace">door<span class="token punctuation">.</span></span>Builders</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token string">"电子们"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">bank</span><span class="token punctuation">(</span><span class="token string">"牛逼"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>build<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="结构型模式"><a href="#结构型模式" class="headerlink" title="结构型模式"></a>结构型模式</h1><h2 id="1-代理模式"><a href="#1-代理模式" class="headerlink" title="1.代理模式"></a>1.代理模式</h2><h3 id="1-1）静态代理"><a href="#1-1）静态代理" class="headerlink" title="1.1）静态代理"></a>1.1）静态代理</h3><p>目标方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DaliDome</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">dali</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"代理类"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>代理类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StaticDaili</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">DaliDome</span> daliDome <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DaliDome</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">StaticDailiMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"增强方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        daliDome<span class="token punctuation">.</span><span class="token function">dali</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> client <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">StaticDaili</span> staticDaili <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StaticDaili</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name"><span class="token namespace">staticDaili<span class="token punctuation">.</span></span>StaticDailiMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-2）JDK动态代理"><a href="#1-2）JDK动态代理" class="headerlink" title="1.2）JDK动态代理"></a>1.2）JDK动态代理</h3><p>接下来我们使用动态代理实现上面案例，先说说JDK提供的动态代理。Java中提供了一个动态代理类Proxy，Proxy并不是我们上述所说的代理对象的类，而是提供了一个创建代理对象的静态方法（newProxyInstance方法）来获取代理对象。</p><p>代码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//卖票接口</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">SellTickets</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">void</span> <span class="token function">sell</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//火车站  火车站具有卖票功能，所以需要实现SellTickets接口</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TrainStation</span> <span class="token keyword">implements</span> <span class="token class-name">SellTickets</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sell</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"火车站卖票"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//代理工厂，用来创建代理对象</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProxyFactory</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">TrainStation</span> station <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TrainStation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">SellTickets</span> <span class="token function">getProxyObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//使用Proxy获取代理对象</span>        <span class="token comment">/*            newProxyInstance()方法参数说明：                ClassLoader loader ： 类加载器，用于加载代理类，使用真实对象的类加载器即可                Class&lt;?>[] interfaces ： 真实对象所实现的接口，代理模式真实对象和代理对象实现相同的接口                InvocationHandler h ： 代理对象的调用处理程序         */</span>        <span class="token class-name">SellTickets</span> sellTickets <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">SellTickets</span><span class="token punctuation">)</span> <span class="token class-name">Proxy</span><span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>station<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                station<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">InvocationHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token comment">/*                        InvocationHandler中invoke方法参数说明：                            proxy ： 代理对象                            method ： 对应于在代理对象上调用的接口方法的 Method 实例                            args ： 代理对象调用接口方法时传递的实际参数                     */</span>                    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">Object</span> proxy<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">&#123;</span>                        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"代理点收取一些服务费用(JDK动态代理方式)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment">//执行真实对象</span>                        <span class="token class-name">Object</span> result <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>station<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">return</span> result<span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> sellTickets<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//测试类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//获取代理对象</span>        <span class="token class-name">ProxyFactory</span> factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ProxyFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">SellTickets</span> proxyObject <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">getProxyObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        proxyObject<span class="token punctuation">.</span><span class="token function">sell</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><font color="red">使用了动态代理，我们思考下面问题：</font></p><ul><li><p>ProxyFactory是代理类吗？</p><p>ProxyFactory不是代理模式中所说的代理类，而代理类是程序在运行过程中动态的在内存中生成的类。通过阿里巴巴开源的 Java 诊断工具（Arthas【阿尔萨斯】）查看代理类的结构：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>proxy</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>proxy<span class="token punctuation">.</span>dynamic<span class="token punctuation">.</span>jdk<span class="token punctuation">.</span></span><span class="token class-name">SellTickets</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">InvocationHandler</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Method</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Proxy</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">UndeclaredThrowableException</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> $<span class="token class-name">Proxy0</span> <span class="token keyword">extends</span> <span class="token class-name">Proxy</span> <span class="token keyword">implements</span> <span class="token class-name">SellTickets</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Method</span> m1<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Method</span> m2<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Method</span> m3<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Method</span> m0<span class="token punctuation">;</span>    <span class="token keyword">public</span> $<span class="token class-name">Proxy0</span><span class="token punctuation">(</span><span class="token class-name">InvocationHandler</span> invocationHandler<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>invocationHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">static</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            m1 <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"java.lang.Object"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"equals"</span><span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"java.lang.Object"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            m2 <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"java.lang.Object"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"toString"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            m3 <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.itheima.proxy.dynamic.jdk.SellTickets"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"sell"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            m0 <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"java.lang.Object"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"hashCode"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NoSuchMethodException</span> noSuchMethodException<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NoSuchMethodError</span><span class="token punctuation">(</span>noSuchMethodException<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> classNotFoundException<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NoClassDefFoundError</span><span class="token punctuation">(</span>classNotFoundException<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> object<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">Boolean</span><span class="token punctuation">)</span><span class="token keyword">this</span><span class="token punctuation">.</span>h<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> m1<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span>object<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Error</span> <span class="token operator">|</span> <span class="token class-name">RuntimeException</span> throwable<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> throwable<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> throwable<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UndeclaredThrowableException</span><span class="token punctuation">(</span>throwable<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span><span class="token keyword">this</span><span class="token punctuation">.</span>h<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> m2<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Error</span> <span class="token operator">|</span> <span class="token class-name">RuntimeException</span> throwable<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> throwable<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> throwable<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UndeclaredThrowableException</span><span class="token punctuation">(</span>throwable<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">)</span><span class="token keyword">this</span><span class="token punctuation">.</span>h<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> m0<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Error</span> <span class="token operator">|</span> <span class="token class-name">RuntimeException</span> throwable<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> throwable<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> throwable<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UndeclaredThrowableException</span><span class="token punctuation">(</span>throwable<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">sell</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>h<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> m3<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Error</span> <span class="token operator">|</span> <span class="token class-name">RuntimeException</span> throwable<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> throwable<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> throwable<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UndeclaredThrowableException</span><span class="token punctuation">(</span>throwable<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从上面的类中，我们可以看到以下几个信息：</p><ul><li>代理类（$Proxy0）实现了SellTickets。这也就印证了我们之前说的真实类和代理类实现同样的接口。</li><li>代理类（$Proxy0）将我们提供了的匿名内部类对象传递给了父类。</li></ul></li><li><p>动态代理的执行流程是什么样？</p><p>下面是摘取的重点代码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//程序运行过程中动态生成的代理类</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> $<span class="token class-name">Proxy0</span> <span class="token keyword">extends</span> <span class="token class-name">Proxy</span> <span class="token keyword">implements</span> <span class="token class-name">SellTickets</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Method</span> m3<span class="token punctuation">;</span>    <span class="token keyword">public</span> $<span class="token class-name">Proxy0</span><span class="token punctuation">(</span><span class="token class-name">InvocationHandler</span> invocationHandler<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>invocationHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">static</span> <span class="token punctuation">&#123;</span>        m3 <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.itheima.proxy.dynamic.jdk.SellTickets"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"sell"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">sell</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>h<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> m3<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//Java提供的动态代理相关类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Proxy</span> <span class="token keyword">implements</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>Serializable</span> <span class="token punctuation">&#123;</span><span class="token keyword">protected</span> <span class="token class-name">InvocationHandler</span> h<span class="token punctuation">;</span> <span class="token keyword">protected</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span><span class="token class-name">InvocationHandler</span> h<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>h <span class="token operator">=</span> h<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//代理工厂类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProxyFactory</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">TrainStation</span> station <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TrainStation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">SellTickets</span> <span class="token function">getProxyObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">SellTickets</span> sellTickets <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">SellTickets</span><span class="token punctuation">)</span> <span class="token class-name">Proxy</span><span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>station<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                station<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">InvocationHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                                        <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">Object</span> proxy<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">&#123;</span>                        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"代理点收取一些服务费用(JDK动态代理方式)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token class-name">Object</span> result <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>station<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">return</span> result<span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> sellTickets<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//测试访问类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//获取代理对象</span>        <span class="token class-name">ProxyFactory</span> factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ProxyFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SellTickets</span> proxyObject <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">getProxyObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        proxyObject<span class="token punctuation">.</span><span class="token function">sell</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>执行流程如下：</p><pre><code>1. 在测试类中通过代理对象调用sell()方法2. 根据多态的特性，执行的是代理类（$Proxy0）中的sell()方法3. 代理类（$Proxy0）中的sell()方法中又调用了InvocationHandler接口的子实现类对象的invoke方法4. invoke方法通过反射执行了真实对象所属类(TrainStation)中的sell()方法</code></pre><h2 id="2-适配器模式"><a href="#2-适配器模式" class="headerlink" title="2.适配器模式"></a>2.适配器模式</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//SD卡的接口</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">SDCard</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//读取SD卡方法</span>    <span class="token class-name">String</span> <span class="token function">readSD</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//写入SD卡功能</span>    <span class="token keyword">void</span> <span class="token function">writeSD</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//SD卡实现类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SDCardImpl</span> <span class="token keyword">implements</span> <span class="token class-name">SDCard</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">readSD</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> msg <span class="token operator">=</span> <span class="token string">"sd card read a msg :hello word SD"</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> msg<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">writeSD</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"sd card write msg : "</span> <span class="token operator">+</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//电脑类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Computer</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">readSD</span><span class="token punctuation">(</span><span class="token class-name">SDCard</span> sdCard<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>sdCard <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token string">"sd card null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> sdCard<span class="token punctuation">.</span><span class="token function">readSD</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//TF卡接口</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">TFCard</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//读取TF卡方法</span>    <span class="token class-name">String</span> <span class="token function">readTF</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//写入TF卡功能</span>    <span class="token keyword">void</span> <span class="token function">writeTF</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//TF卡实现类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TFCardImpl</span> <span class="token keyword">implements</span> <span class="token class-name">TFCard</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">readTF</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> msg <span class="token operator">=</span><span class="token string">"tf card read msg : hello word tf card"</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> msg<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">writeTF</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"tf card write a msg : "</span> <span class="token operator">+</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//定义适配器类（SD兼容TF）</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SDAdapterTF</span> <span class="token keyword">extends</span> <span class="token class-name">TFCardImpl</span> <span class="token keyword">implements</span> <span class="token class-name">SDCard</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">readSD</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"adapter read tf card "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">readTF</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">writeSD</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"adapter write tf card"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">writeTF</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//测试类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Computer</span> computer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Computer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SDCard</span> sdCard <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SDCardImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>computer<span class="token punctuation">.</span><span class="token function">readSD</span><span class="token punctuation">(</span>sdCard<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SDAdapterTF</span> adapter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SDAdapterTF</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>computer<span class="token punctuation">.</span><span class="token function">readSD</span><span class="token punctuation">(</span>adapter<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>类适配器模式违背了合成复用原则。类适配器是客户类有一个接口规范的情况下可用，反之不可用。</p><h2 id="3-装饰者模式"><a href="#3-装饰者模式" class="headerlink" title="3.装饰者模式"></a>3.装饰者模式</h2><h3 id="3-1）-应用场景"><a href="#3-1）-应用场景" class="headerlink" title="3.1） 应用场景"></a>3.1） 应用场景</h3><ul><li>以前开发的系统存在满足新系统功能需求的类，但其接口同新系统的接口不一致。</li><li>使用第三方提供的组件，但组件接口定义和自己要求的接口定义不同。</li></ul><p>代码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//快餐接口</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">FastFood</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">float</span> price<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> desc<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">FastFood</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">FastFood</span><span class="token punctuation">(</span><span class="token keyword">float</span> price<span class="token punctuation">,</span> <span class="token class-name">String</span> desc<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>price <span class="token operator">=</span> price<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>desc <span class="token operator">=</span> desc<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setPrice</span><span class="token punctuation">(</span><span class="token keyword">float</span> price<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>price <span class="token operator">=</span> price<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">float</span> <span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> price<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getDesc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> desc<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setDesc</span><span class="token punctuation">(</span><span class="token class-name">String</span> desc<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>desc <span class="token operator">=</span> desc<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">float</span> <span class="token function">cost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//获取价格</span><span class="token punctuation">&#125;</span><span class="token comment">//炒饭</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FriedRice</span> <span class="token keyword">extends</span> <span class="token class-name">FastFood</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">FriedRice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">"炒饭"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">float</span> <span class="token function">cost</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//炒面</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FriedNoodles</span> <span class="token keyword">extends</span> <span class="token class-name">FastFood</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">FriedNoodles</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token string">"炒面"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">float</span> <span class="token function">cost</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//配料类</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Garnish</span> <span class="token keyword">extends</span> <span class="token class-name">FastFood</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">FastFood</span> fastFood<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">FastFood</span> <span class="token function">getFastFood</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> fastFood<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setFastFood</span><span class="token punctuation">(</span><span class="token class-name">FastFood</span> fastFood<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>fastFood <span class="token operator">=</span> fastFood<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Garnish</span><span class="token punctuation">(</span><span class="token class-name">FastFood</span> fastFood<span class="token punctuation">,</span> <span class="token keyword">float</span> price<span class="token punctuation">,</span> <span class="token class-name">String</span> desc<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>price<span class="token punctuation">,</span>desc<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>fastFood <span class="token operator">=</span> fastFood<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//鸡蛋配料</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Egg</span> <span class="token keyword">extends</span> <span class="token class-name">Garnish</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">Egg</span><span class="token punctuation">(</span><span class="token class-name">FastFood</span> fastFood<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>fastFood<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"鸡蛋"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">float</span> <span class="token function">cost</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">getFastFood</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getDesc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">getDesc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">getFastFood</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDesc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//培根配料</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Bacon</span> <span class="token keyword">extends</span> <span class="token class-name">Garnish</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">Bacon</span><span class="token punctuation">(</span><span class="token class-name">FastFood</span> fastFood<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>fastFood<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"培根"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">float</span> <span class="token function">cost</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">getFastFood</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getDesc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">getDesc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">getFastFood</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDesc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//测试类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//点一份炒饭</span>        <span class="token class-name">FastFood</span> food <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FriedRice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//花费的价格</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>food<span class="token punctuation">.</span><span class="token function">getDesc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> food<span class="token punctuation">.</span><span class="token function">cost</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"元"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"========"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//点一份加鸡蛋的炒饭</span>        <span class="token class-name">FastFood</span> food1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FriedRice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        food1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Egg</span><span class="token punctuation">(</span>food1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//花费的价格</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>food1<span class="token punctuation">.</span><span class="token function">getDesc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> food1<span class="token punctuation">.</span><span class="token function">cost</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"元"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"========"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//点一份加培根的炒面</span>        <span class="token class-name">FastFood</span> food2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FriedNoodles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        food2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bacon</span><span class="token punctuation">(</span>food2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//花费的价格</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>food2<span class="token punctuation">.</span><span class="token function">getDesc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> food2<span class="token punctuation">.</span><span class="token function">cost</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"元"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>好处：</strong></p><ul><li><p>饰者模式可以带来比继承更加灵活性的扩展功能，使用更加方便，可以通过组合不同的装饰者对象来获取具有不同行为状态的多样化的结果。装饰者模式比继承更具良好的扩展性，完美的遵循开闭原则，继承是静态的附加责任，装饰者则是动态的附加责任。</p></li><li><p>装饰类和被装饰类可以独立发展，不会相互耦合，装饰模式是继承的一个替代模式，装饰模式可以动态扩展一个实现类的功能。</p></li></ul><h3 id="3-2-使用场景"><a href="#3-2-使用场景" class="headerlink" title="3.2 使用场景"></a>3.2 使用场景</h3><ul><li><p>当不能采用继承的方式对系统进行扩充或者采用继承不利于系统扩展和维护时。</p><p>不能采用继承的情况主要有两类：</p><ul><li>第一类是系统中存在大量独立的扩展，为支持每一种组合将产生大量的子类，使得子类数目呈爆炸性增长；</li><li>第二类是因为类定义不能继承（如final类）</li></ul></li><li><p>在不影响其他对象的情况下，以动态、透明的方式给单个对象添加职责。</p></li><li><p>当对象的功能要求可以动态地添加，也可以再动态地撤销时。</p></li></ul><h3 id="3-3-JDK源码解析"><a href="#3-3-JDK源码解析" class="headerlink" title="3.3 JDK源码解析"></a>3.3 JDK源码解析</h3><p>IO流中的包装类使用到了装饰者模式。BufferedInputStream，BufferedOutputStream，BufferedReader，BufferedWriter。</p><p>我们以BufferedWriter举例来说明，先看看如何使用BufferedWriter</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">&#123;</span>        <span class="token comment">//创建BufferedWriter对象</span>        <span class="token comment">//创建FileWriter对象</span>        <span class="token class-name">FileWriter</span> fw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span><span class="token string">"C:\\Users\\Think\\Desktop\\a.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">BufferedWriter</span> bw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedWriter</span><span class="token punctuation">(</span>fw<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//写数据</span>        bw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"hello Buffered"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bw<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用起来感觉确实像是装饰者模式，接下来看它们的结构：</p><blockquote><p><font color="red">小结：</font></p><p>​BufferedWriter使用装饰者模式对Writer子实现类进行了增强，添加了缓冲区，提高了写数据的效率。</p></blockquote><h3 id="3-4-代理和装饰者的区别"><a href="#3-4-代理和装饰者的区别" class="headerlink" title="3.4 代理和装饰者的区别"></a>3.4 代理和装饰者的区别</h3><p>静态代理和装饰者模式的区别：</p><ul><li>相同点：<ul><li>都要实现与目标类相同的业务接口</li><li>在两个类中都要声明目标对象</li><li>都可以在不修改目标类的前提下增强目标方法</li></ul></li><li>不同点：<ul><li>目的不同<br>装饰者是为了增强目标对象<br>静态代理是为了保护和隐藏目标对象</li><li>获取目标对象构建的地方不同<br>装饰者是由外界传递进来，可以通过构造方法传递<br>静态代理是在代理类内部创建，以此来隐藏目标对象</li></ul></li></ul><ul><li>装饰者聚合父类并没有实例化，而静态代理是直接实例化父类</li></ul><h2 id="4-桥接模式"><a href="#4-桥接模式" class="headerlink" title="4.桥接模式"></a>4.桥接模式</h2><h3 id="4-1-结构"><a href="#4-1-结构" class="headerlink" title="4.1 结构"></a>4.1 结构</h3><p>桥接（Bridge）模式包含以下主要角色：</p><ul><li>抽象化（Abstraction）角色 ：定义抽象类，并包含一个对实现化对象的引用。</li><li>扩展抽象化（Refined  Abstraction）角色 ：是抽象化角色的子类，实现父类中的业务方法，并通过组合关系调用实现化角色中的业务方法。</li><li>实现化（Implementor）角色 ：定义实现化角色的接口，供扩展抽象化角色调用。</li><li>具体实现化（Concrete Implementor）角色 ：给出实现化角色接口的具体实现。</li></ul><h3 id="4-2-案例"><a href="#4-2-案例" class="headerlink" title="4.2 案例"></a>4.2 案例</h3><p>【例】视频播放器</p><p>需要开发一个跨平台视频播放器，可以在不同操作系统平台（如Windows、Mac、Linux等）上播放多种格式的视频文件，常见的视频格式包括RMVB、AVI、WMV等。该播放器包含了两个维度，适合使用桥接模式。</p><p>代码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//视频文件</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">VideoFile</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">void</span> <span class="token function">decode</span><span class="token punctuation">(</span><span class="token class-name">String</span> fileName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//avi文件</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AVIFile</span> <span class="token keyword">implements</span> <span class="token class-name">VideoFile</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">decode</span><span class="token punctuation">(</span><span class="token class-name">String</span> fileName<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"avi视频文件："</span><span class="token operator">+</span> fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//rmvb文件</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">REVBBFile</span> <span class="token keyword">implements</span> <span class="token class-name">VideoFile</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">decode</span><span class="token punctuation">(</span><span class="token class-name">String</span> fileName<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"rmvb文件："</span> <span class="token operator">+</span> fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//操作系统版本</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">OperatingSystemVersion</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">protected</span> <span class="token class-name">VideoFile</span> videoFile<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">OperatingSystemVersion</span><span class="token punctuation">(</span><span class="token class-name">VideoFile</span> videoFile<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>videoFile <span class="token operator">=</span> videoFile<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">play</span><span class="token punctuation">(</span><span class="token class-name">String</span> fileName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//Windows版本</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Windows</span> <span class="token keyword">extends</span> <span class="token class-name">OperatingSystem</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">Windows</span><span class="token punctuation">(</span><span class="token class-name">VideoFile</span> videoFile<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>videoFile<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">play</span><span class="token punctuation">(</span><span class="token class-name">String</span> fileName<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        videoFile<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//mac版本</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Mac</span> <span class="token keyword">extends</span> <span class="token class-name">OperatingSystemVersion</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">Mac</span><span class="token punctuation">(</span><span class="token class-name">VideoFile</span> videoFile<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>videoFile<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">play</span><span class="token punctuation">(</span><span class="token class-name">String</span> fileName<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>videoFile<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//测试类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">OperatingSystem</span> os <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Windows</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">AVIFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        os<span class="token punctuation">.</span><span class="token function">play</span><span class="token punctuation">(</span><span class="token string">"战狼3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>好处：</strong></p><ul><li><p>桥接模式提高了系统的可扩充性，在两个变化维度中任意扩展一个维度，都不需要修改原有系统。</p><p>如：如果现在还有一种视频文件类型wmv，我们只需要再定义一个类实现VideoFile接口即可，其他类不需要发生变化。</p></li><li><p>实现细节对客户透明</p></li></ul><h3 id="4-3-使用场景"><a href="#4-3-使用场景" class="headerlink" title="4.3 使用场景"></a>4.3 使用场景</h3><ul><li>当一个类存在两个独立变化的维度，且这两个维度都需要进行扩展时。</li><li>当一个系统不希望使用继承或因为多层次继承导致系统类的个数急剧增加时。</li><li>当一个系统需要在构件的抽象化角色和具体化角色之间增加更多的灵活性时。避免在两个层次之间建立静态的继承联系，通过桥接模式可以使它们在抽象层建立一个关联关系。</li></ul><h2 id="5-外观模式"><a href="#5-外观模式" class="headerlink" title="5.外观模式"></a>5.外观模式</h2><h3 id="5-1-概述"><a href="#5-1-概述" class="headerlink" title="5.1 概述"></a>5.1 概述</h3><p>有些人可能炒过股票，但其实大部分人都不太懂，这种没有足够了解证券知识的情况下做股票是很容易亏钱的，刚开始炒股肯定都会想，如果有个懂行的帮帮手就好，其实基金就是个好帮手，支付宝里就有许多的基金，它将投资者分散的资金集中起来，交由专业的经理人进行管理，投资于股票、债券、外汇等领域，而基金投资的收益归持有者所有，管理机构收取一定比例的托管管理费用。</p><p><strong>定义：</strong></p><p>​又名门面模式，是一种通过为多个复杂的子系统提供一个一致的接口，而使这些子系统更加容易被访问的模式。该模式对外有一个统一接口，外部应用程序不用关心内部子系统的具体的细节，这样会大大降低应用程序的复杂度，提高了程序的可维护性。</p><p>​外观（Facade）模式是“迪米特法则”的典型应用</p><h3 id="5-2-结构"><a href="#5-2-结构" class="headerlink" title="5.2 结构"></a>5.2 结构</h3><p>外观（Facade）模式包含以下主要角色：</p><ul><li>外观（Facade）角色：为多个子系统对外提供一个共同的接口。</li><li>子系统（Sub System）角色：实现系统的部分功能，客户可以通过外观角色访问它。</li></ul><h3 id="5-3-案例"><a href="#5-3-案例" class="headerlink" title="5.3 案例"></a>5.3 案例</h3><p>【例】智能家电控制</p><p>小明的爷爷已经60岁了，一个人在家生活：每次都需要打开灯、打开电视、打开空调；睡觉时关闭灯、关闭电视、关闭空调；操作起来都比较麻烦。所以小明给爷爷买了智能音箱，可以通过语音直接控制这些智能家电的开启和关闭。</p><p>代码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//灯类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Light</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">on</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"打开了灯...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">off</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"关闭了灯...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//电视类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TV</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">on</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"打开了电视...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">off</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"关闭了电视...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//控制类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AirCondition</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">on</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"打开了空调...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">off</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"关闭了空调...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//智能音箱</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SmartAppliancesFacade</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Light</span> light<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">TV</span> tv<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">AirCondition</span> airCondition<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">SmartAppliancesFacade</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        light <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Light</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        tv <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TV</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        airCondition <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AirCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">say</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"打开"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">on</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"关闭"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">off</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我还听不懂你说的！！！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//起床后一键开电器</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">on</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"起床了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        light<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        tv<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        airCondition<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//睡觉一键关电器</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">off</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"睡觉了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        light<span class="token punctuation">.</span><span class="token function">off</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        tv<span class="token punctuation">.</span><span class="token function">off</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        airCondition<span class="token punctuation">.</span><span class="token function">off</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//测试类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//创建外观对象</span>        <span class="token class-name">SmartAppliancesFacade</span> facade <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SmartAppliancesFacade</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//客户端直接与外观对象进行交互</span>        facade<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token string">"打开家电"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        facade<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token string">"关闭家电"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>好处：</strong></p><ul><li>降低了子系统与客户端之间的耦合度，使得子系统的变化不会影响调用它的客户类。</li><li>对客户屏蔽了子系统组件，减少了客户处理的对象数目，并使得子系统使用起来更加容易。</li></ul><p><strong>缺点：</strong></p><ul><li>不符合开闭原则，修改很麻烦</li></ul><h2 id="6-享元模式"><a href="#6-享元模式" class="headerlink" title="6 享元模式"></a>6 享元模式</h2><h3 id="6-1-概述"><a href="#6-1-概述" class="headerlink" title="6.1 概述"></a>6.1 概述</h3><p><strong>定义：</strong></p><p>​运用共享技术来有效地支持大量细粒度对象的复用。它通过共享已经存在的对象来大幅度减少需要创建的对象数量、避免大量相似对象的开销，从而提高系统资源的利用率。</p><h3 id="6-2-结构"><a href="#6-2-结构" class="headerlink" title="6.2 结构"></a>6.2 结构</h3><p>享元（Flyweight ）模式中存在以下两种状态：</p><ol><li>内部状态，即不会随着环境的改变而改变的可共享部分。</li><li>外部状态，指随环境改变而改变的不可以共享的部分。享元模式的实现要领就是区分应用中的这两种状态，并将外部状态外部化。</li></ol><p>享元模式的主要有以下角色：</p><ul><li>抽象享元角色（Flyweight）：通常是一个接口或抽象类，在抽象享元类中声明了具体享元类公共的方法，这些方法可以向外界提供享元对象的内部数据（内部状态），同时也可以通过这些方法来设置外部数据（外部状态）。</li><li>具体享元（Concrete Flyweight）角色 ：它实现了抽象享元类，称为享元对象；在具体享元类中为内部状态提供了存储空间。通常我们可以结合单例模式来设计具体享元类，为每一个具体享元类提供唯一的享元对象。</li><li>非享元（Unsharable Flyweight)角色 ：并不是所有的抽象享元类的子类都需要被共享，不能被共享的子类可设计为非共享具体享元类；当需要一个非共享具体享元类的对象时可以直接通过实例化创建。</li><li>享元工厂（Flyweight Factory）角色 ：负责创建和管理享元角色。当客户对象请求一个享元对象时，享元工厂检査系统中是否存在符合要求的享元对象，如果存在则提供给客户；如果不存在的话，则创建一个新的享元对象。</li></ul><p><strong>代码如下：</strong></p><p>俄罗斯方块有不同的形状，我们可以对这些形状向上抽取出AbstractBox，用来定义共性的属性和行为。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AbstractBox</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token class-name">String</span> <span class="token function">getShape</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token class-name">String</span> color<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"方块形状："</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getShape</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" 颜色："</span> <span class="token operator">+</span> color<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接下来就是定义不同的形状了，IBox类、LBox类、OBox类等。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IBox</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractBox</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getShape</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"I"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LBox</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractBox</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getShape</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"L"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OBox</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractBox</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getShape</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"O"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>提供了一个工厂类（BoxFactory），用来管理享元对象（也就是AbstractBox子类对象），该工厂类对象只需要一个，所以可以使用单例模式。并给工厂类提供一个获取形状的方法。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BoxFactory</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">AbstractBox</span><span class="token punctuation">></span></span> map<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">BoxFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">AbstractBox</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">AbstractBox</span> iBox <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IBox</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">AbstractBox</span> lBox <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LBox</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">AbstractBox</span> oBox <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OBox</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"I"</span><span class="token punctuation">,</span> iBox<span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"L"</span><span class="token punctuation">,</span> lBox<span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"O"</span><span class="token punctuation">,</span> oBox<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">BoxFactory</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">SingletonHolder</span><span class="token punctuation">.</span><span class="token constant">INSTANCE</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">SingletonHolder</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">BoxFactory</span> <span class="token constant">INSTANCE</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BoxFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">AbstractBox</span> <span class="token function">getBox</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-7-5-优缺点和使用场景"><a href="#5-7-5-优缺点和使用场景" class="headerlink" title="5.7.5 优缺点和使用场景"></a>5.7.5 优缺点和使用场景</h3><p><strong>1，优点</strong></p><ul><li>极大减少内存中相似或相同对象数量，节约系统资源，提供系统性能</li><li>享元模式中的外部状态相对独立，且不影响内部状态</li></ul><p><strong>2，缺点：</strong></p><p>为了使对象可以共享，需要将享元对象的部分状态外部化，分离内部状态和外部状态，使程序逻辑复杂</p><p><strong>3，使用场景：</strong></p><ul><li>一个系统有大量相同或者相似的对象，造成内存的大量耗费。</li><li>对象的大部分状态都可以外部化，可以将这些外部状态传入对象中。</li><li>在使用享元模式时需要维护一个存储享元对象的享元池，而这需要耗费一定的系统资源，因此，应当在需要多次重复使用享元对象时才值得使用享元模式。</li></ul><h1 id="行为型模式"><a href="#行为型模式" class="headerlink" title="行为型模式"></a>行为型模式</h1><h2 id=""><a href="#" class="headerlink" title=""></a></h2><h2 id="1-模板方法模式"><a href="#1-模板方法模式" class="headerlink" title="1 模板方法模式"></a>1 模板方法模式</h2><h3 id="1-1-概述"><a href="#1-1-概述" class="headerlink" title="1.1 概述"></a>1.1 概述</h3><p>在面向对象程序设计过程中，程序员常常会遇到这种情况：设计一个系统时知道了算法所需的关键步骤，而且确定了这些步骤的执行顺序，但某些步骤的具体实现还未知，或者说某些步骤的实现与具体的环境相关。</p><p>例如，去银行办理业务一般要经过以下4个流程：取号、排队、办理具体业务、对银行工作人员进行评分等，其中取号、排队和对银行工作人员进行评分的业务对每个客户是一样的，可以在父类中实现，但是办理具体业务却因人而异，它可能是存款、取款或者转账等，可以延迟到子类中实现。</p><p><strong>定义：</strong></p><p>定义一个操作中的算法骨架，而将算法的一些步骤延迟到子类中，使得子类可以不改变该算法结构的情况下重定义该算法的某些特定步骤。</p><h3 id="1-2-结构"><a href="#1-2-结构" class="headerlink" title="1.2 结构"></a>1.2 结构</h3><p>模板方法（Template Method）模式包含以下主要角色：</p><ul><li><p>抽象类（Abstract Class）：负责给出一个算法的轮廓和骨架。它由一个模板方法和若干个基本方法构成。</p><ul><li><p>模板方法：定义了算法的骨架，按某种顺序调用其包含的基本方法。</p></li><li><p>基本方法：是实现算法各个步骤的方法，是模板方法的组成部分。基本方法又可以分为三种：</p><ul><li><p>抽象方法(Abstract Method) ：一个抽象方法由抽象类声明、由其具体子类实现。</p></li><li><p>具体方法(Concrete Method) ：一个具体方法由一个抽象类或具体类声明并实现，其子类可以进行覆盖也可以直接继承。</p></li><li><p>钩子方法(Hook Method) ：在抽象类中已经实现，包括用于判断的逻辑方法和需要子类重写的空方法两种。</p><p>一般钩子方法是用于判断的逻辑方法，这类方法名一般为isXxx，返回值类型为boolean类型。</p></li></ul></li></ul></li><li><p>具体子类（Concrete Class）：实现抽象类中所定义的抽象方法和钩子方法，它们是一个顶级逻辑的组成步骤。</p></li></ul><h3 id="1-3-案例实现"><a href="#1-3-案例实现" class="headerlink" title="1.3 案例实现"></a>1.3 案例实现</h3><p>代码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AbstractClass</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">cookProcess</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//第一步：倒油</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">pourOil</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//第二步：热油</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">heatOil</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//第三步：倒蔬菜</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">pourVegetable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//第四步：倒调味料</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">pourSauce</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//第五步：翻炒</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">fry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">pourOil</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"倒油"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//第二步：热油是一样的，所以直接实现</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">heatOil</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"热油"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//第三步：倒蔬菜是不一样的（一个下包菜，一个是下菜心）</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">pourVegetable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//第四步：倒调味料是不一样</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">pourSauce</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//第五步：翻炒是一样的，所以直接实现</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"炒啊炒啊炒到熟啊"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConcreteClass_BaoCai</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractClass</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">pourVegetable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"下锅的蔬菜是包菜"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">pourSauce</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"下锅的酱料是辣椒"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConcreteClass_CaiXin</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractClass</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">pourVegetable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"下锅的蔬菜是菜心"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">pourSauce</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"下锅的酱料是蒜蓉"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//炒手撕包菜</span>        <span class="token class-name">ConcreteClass_BaoCai</span> baoCai <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcreteClass_BaoCai</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        baoCai<span class="token punctuation">.</span><span class="token function">cookProcess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//炒蒜蓉菜心</span>        <span class="token class-name">ConcreteClass_CaiXin</span> caiXin <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcreteClass_CaiXin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        caiXin<span class="token punctuation">.</span><span class="token function">cookProcess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意：为防止恶意操作，一般模板方法都加上 final 关键词。</p></blockquote><h3 id="6-1-3-优缺点"><a href="#6-1-3-优缺点" class="headerlink" title="6.1.3 优缺点"></a>6.1.3 优缺点</h3><p><strong>优点：</strong></p><ul><li><p>提高代码复用性</p><p>将相同部分的代码放在抽象的父类中，而将不同的代码放入不同的子类中。</p></li><li><p>实现了反向控制</p><p>通过一个父类调用其子类的操作，通过对子类的具体实现扩展不同的行为，实现了反向控制 ，并符合“开闭原则”。</p></li></ul><p><strong>缺点：</strong></p><ul><li>对每个不同的实现都需要定义一个子类，这会导致类的个数增加，系统更加庞大，设计也更加抽象。</li><li>父类中的抽象方法由子类实现，子类执行的结果会影响父类的结果，这导致一种反向的控制结构，它提高了代码阅读的难度。</li></ul><h3 id="6-1-4-适用场景"><a href="#6-1-4-适用场景" class="headerlink" title="6.1.4 适用场景"></a>6.1.4 适用场景</h3><ul><li>算法的整体步骤很固定，但其中个别部分易变时，这时候可以使用模板方法模式，将容易变的部分抽象出来，供子类实现。</li><li>需要通过子类来决定父类算法中某个步骤是否执行，实现子类对父类的反向控制。</li></ul><h2 id="2-责任链模式"><a href="#2-责任链模式" class="headerlink" title="2 责任链模式"></a>2 责任链模式</h2><h3 id="2-1-概述"><a href="#2-1-概述" class="headerlink" title="2.1 概述"></a>2.1 概述</h3><p>在现实生活中，常常会出现这样的事例：一个请求有多个对象可以处理，但每个对象的处理条件或权限不同。例如，公司员工请假，可批假的领导有部门负责人、副总经理、总经理等，但每个领导能批准的天数不同，员工必须根据自己要请假的天数去找不同的领导签名，也就是说员工必须记住每个领导的姓名、电话和地址等信息，这增加了难度。这样的例子还有很多，如找领导出差报销、生活中的“击鼓传花”游戏等。</p><p><strong>定义：</strong></p><p>又名职责链模式，为了避免请求发送者与多个请求处理者耦合在一起，将所有请求的处理者通过前一对象记住其下一个对象的引用而连成一条链；当有请求发生时，可将请求沿着这条链传递，直到有对象处理它为止。</p><h3 id="2-2-结构"><a href="#2-2-结构" class="headerlink" title="2.2 结构"></a>2.2 结构</h3><p>职责链模式主要包含以下角色:</p><ul><li>抽象处理者（Handler）角色：定义一个处理请求的接口，包含抽象处理方法和一个后继连接。</li><li>具体处理者（Concrete Handler）角色：实现抽象处理者的处理方法，判断能否处理本次请求，如果可以处理请求则处理，否则将该请求转给它的后继者。</li><li>客户类（Client）角色：创建处理链，并向链头的具体处理者对象提交请求，它不关心处理细节和请求的传递过程。</li></ul><h3 id="2-3-案例实现"><a href="#2-3-案例实现" class="headerlink" title="2.3 案例实现"></a>2.3 案例实现</h3><p>代码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//请假条</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LeaveRequest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token comment">//姓名</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> num<span class="token punctuation">;</span><span class="token comment">//请假天数</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> content<span class="token punctuation">;</span><span class="token comment">//请假内容</span>    <span class="token keyword">public</span> <span class="token class-name">LeaveRequest</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> num<span class="token punctuation">,</span> <span class="token class-name">String</span> content<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>num <span class="token operator">=</span> num<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>content <span class="token operator">=</span> content<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> num<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> content<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//处理者抽象类</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Handler</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token constant">NUM_ONE</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token constant">NUM_THREE</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token constant">NUM_SEVEN</span> <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span>    <span class="token comment">//该领导处理的请假天数区间</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> numStart<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> numEnd<span class="token punctuation">;</span>    <span class="token comment">//领导上面还有领导</span>    <span class="token keyword">private</span> <span class="token class-name">Handler</span> nextHandler<span class="token punctuation">;</span>    <span class="token comment">//设置请假天数范围 上不封顶</span>    <span class="token keyword">public</span> <span class="token class-name">Handler</span><span class="token punctuation">(</span><span class="token keyword">int</span> numStart<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>numStart <span class="token operator">=</span> numStart<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//设置请假天数范围</span>    <span class="token keyword">public</span> <span class="token class-name">Handler</span><span class="token punctuation">(</span><span class="token keyword">int</span> numStart<span class="token punctuation">,</span> <span class="token keyword">int</span> numEnd<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>numStart <span class="token operator">=</span> numStart<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>numEnd <span class="token operator">=</span> numEnd<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//设置上级领导</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setNextHandler</span><span class="token punctuation">(</span><span class="token class-name">Handler</span> nextHandler<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>nextHandler <span class="token operator">=</span> nextHandler<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//提交请假条</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">submit</span><span class="token punctuation">(</span><span class="token class-name">LeaveRequest</span> leave<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">==</span> <span class="token keyword">this</span><span class="token punctuation">.</span>numStart<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//如果请假天数达到该领导者的处理要求</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>leave<span class="token punctuation">.</span><span class="token function">getNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>numStart<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">handleLeave</span><span class="token punctuation">(</span>leave<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//如果还有上级 并且请假天数超过了当前领导的处理范围</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">!=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>nextHandler <span class="token operator">&amp;&amp;</span> leave<span class="token punctuation">.</span><span class="token function">getNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> numEnd<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>nextHandler<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span>leave<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//继续提交</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"流程结束"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//各级领导处理请假条方法</span>    <span class="token keyword">protected</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">handleLeave</span><span class="token punctuation">(</span><span class="token class-name">LeaveRequest</span> leave<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//小组长</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GroupLeader</span> <span class="token keyword">extends</span> <span class="token class-name">Handler</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">GroupLeader</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//小组长处理1-3天的请假</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token class-name">Handler</span><span class="token punctuation">.</span><span class="token constant">NUM_ONE</span><span class="token punctuation">,</span> <span class="token class-name">Handler</span><span class="token punctuation">.</span><span class="token constant">NUM_THREE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">handleLeave</span><span class="token punctuation">(</span><span class="token class-name">LeaveRequest</span> leave<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>leave<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"请假"</span> <span class="token operator">+</span> leave<span class="token punctuation">.</span><span class="token function">getNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"天,"</span> <span class="token operator">+</span> leave<span class="token punctuation">.</span><span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"小组长审批：同意。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//部门经理</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Manager</span> <span class="token keyword">extends</span> <span class="token class-name">Handler</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">Manager</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//部门经理处理3-7天的请假</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token class-name">Handler</span><span class="token punctuation">.</span><span class="token constant">NUM_THREE</span><span class="token punctuation">,</span> <span class="token class-name">Handler</span><span class="token punctuation">.</span><span class="token constant">NUM_SEVEN</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">handleLeave</span><span class="token punctuation">(</span><span class="token class-name">LeaveRequest</span> leave<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>leave<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"请假"</span> <span class="token operator">+</span> leave<span class="token punctuation">.</span><span class="token function">getNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"天,"</span> <span class="token operator">+</span> leave<span class="token punctuation">.</span><span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"部门经理审批：同意。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//总经理</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GeneralManager</span> <span class="token keyword">extends</span> <span class="token class-name">Handler</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">GeneralManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//部门经理处理7天以上的请假</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token class-name">Handler</span><span class="token punctuation">.</span><span class="token constant">NUM_SEVEN</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">handleLeave</span><span class="token punctuation">(</span><span class="token class-name">LeaveRequest</span> leave<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>leave<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"请假"</span> <span class="token operator">+</span> leave<span class="token punctuation">.</span><span class="token function">getNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"天,"</span> <span class="token operator">+</span> leave<span class="token punctuation">.</span><span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"总经理审批：同意。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//测试类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//请假条来一张</span>        <span class="token class-name">LeaveRequest</span> leave <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LeaveRequest</span><span class="token punctuation">(</span><span class="token string">"小花"</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token string">"身体不适"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//各位领导</span>        <span class="token class-name">GroupLeader</span> groupLeader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GroupLeader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Manager</span> manager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Manager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">GeneralManager</span> generalManager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GeneralManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        groupLeader<span class="token punctuation">.</span><span class="token function">setNextHandler</span><span class="token punctuation">(</span>manager<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//小组长的领导是部门经理</span>        manager<span class="token punctuation">.</span><span class="token function">setNextHandler</span><span class="token punctuation">(</span>generalManager<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//部门经理的领导是总经理</span>        <span class="token comment">//之所以在这里设置上级领导，是因为可以根据实际需求来更改设置，如果实战中上级领导人都是固定的，则可以移到领导实现类中。</span>        <span class="token comment">//提交申请</span>        groupLeader<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span>leave<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-4-优缺点"><a href="#2-4-优缺点" class="headerlink" title="2.4 优缺点"></a>2.4 优缺点</h3><p><strong>1，优点：</strong></p><ul><li><p>降低了对象之间的耦合度</p><p>该模式降低了请求发送者和接收者的耦合度。</p></li><li><p>增强了系统的可扩展性</p><p>可以根据需要增加新的请求处理类，满足开闭原则。</p></li><li><p>增强了给对象指派职责的灵活性</p><p>当工作流程发生变化，可以动态地改变链内的成员或者修改它们的次序，也可动态地新增或者删除责任。</p></li><li><p>责任链简化了对象之间的连接</p><p>一个对象只需保持一个指向其后继者的引用，不需保持其他所有处理者的引用，这避免了使用众多的 if 或者 if···else 语句。</p></li><li><p>责任分担</p><p>每个类只需要处理自己该处理的工作，不能处理的传递给下一个对象完成，明确各类的责任范围，符合类的单一职责原则。</p></li></ul><p><strong>2，缺点：</strong></p><ul><li>不能保证每个请求一定被处理。由于一个请求没有明确的接收者，所以不能保证它一定会被处理，该请求可能一直传到链的末端都得不到处理。</li><li>对比较长的职责链，请求的处理可能涉及多个处理对象，系统性能将受到一定影响。</li><li>职责链建立的合理性要靠客户端来保证，增加了客户端的复杂性，可能会由于职责链的错误设置而导致系统出错，如可能会造成循环调用。</li></ul><h2 id="3-观察者模式"><a href="#3-观察者模式" class="headerlink" title="3 观察者模式"></a>3 观察者模式</h2><h3 id="3-1-概述"><a href="#3-1-概述" class="headerlink" title="3.1 概述"></a>3.1 概述</h3><p><strong>定义：</strong></p><p>又被称为发布-订阅（Publish&#x2F;Subscribe）模式，它定义了一种一对多的依赖关系，让多个观察者对象同时监听某一个主题对象。这个主题对象在状态变化时，会通知所有的观察者对象，使他们能够自动更新自己。</p><h3 id="3-2-结构"><a href="#3-2-结构" class="headerlink" title="3.2 结构"></a>3.2 结构</h3><p>在观察者模式中有如下角色：</p><ul><li>Subject：抽象主题（抽象被观察者），抽象主题角色把所有观察者对象保存在一个集合里，每个主题都可以有任意数量的观察者，抽象主题提供一个接口，可以增加和删除观察者对象。</li><li>ConcreteSubject：具体主题（具体被观察者），该角色将有关状态存入具体观察者对象，在具体主题的内部状态发生改变时，给所有注册过的观察者发送通知。</li><li>Observer：抽象观察者，是观察者的抽象类，它定义了一个更新接口，使得在得到主题更改通知时更新自己。</li><li>ConcrereObserver：具体观察者，实现抽象观察者定义的更新接口，以便在得到主题更改通知时更新自身的状态。</li></ul><h3 id="3-3-案例实现"><a href="#3-3-案例实现" class="headerlink" title="3.3 案例实现"></a>3.3 案例实现</h3><p>【例】微信公众号</p><p>在使用微信公众号时，大家都会有这样的体验，当你关注的公众号中有新内容更新的话，它就会推送给关注公众号的微信用户端。我们使用观察者模式来模拟这样的场景，微信用户就是观察者，微信公众号是被观察者，有多个的微信用户关注了程序猿这个公众号。</p><p>代码如下：</p><p>定义抽象观察者类，里面定义一个更新的方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Observer</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>定义具体观察者类，微信用户是观察者，里面实现了更新的方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WeixinUser</span> <span class="token keyword">implements</span> <span class="token class-name">Observer</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 微信用户名</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">WeixinUser</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">"-"</span> <span class="token operator">+</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>定义抽象主题类，提供了attach、detach、notify三个方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Subject</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//增加订阅者</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">attach</span><span class="token punctuation">(</span><span class="token class-name">Observer</span> observer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//删除订阅者</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">detach</span><span class="token punctuation">(</span><span class="token class-name">Observer</span> observer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//通知订阅者更新消息</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">notify</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>微信公众号是具体主题（具体被观察者），里面存储了订阅该公众号的微信用户，并实现了抽象主题中的方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SubscriptionSubject</span> <span class="token keyword">implements</span> <span class="token class-name">Subject</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//储存订阅公众号的微信用户</span>    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Observer</span><span class="token punctuation">></span></span> weixinUserlist <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Observer</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">attach</span><span class="token punctuation">(</span><span class="token class-name">Observer</span> observer<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        weixinUserlist<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>observer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">detach</span><span class="token punctuation">(</span><span class="token class-name">Observer</span> observer<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        weixinUserlist<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>observer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">notify</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Observer</span> observer <span class="token operator">:</span> weixinUserlist<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            observer<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>客户端程序</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">SubscriptionSubject</span> mSubscriptionSubject<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">SubscriptionSubject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//创建微信用户</span>        <span class="token class-name">WeixinUser</span> user1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">WeixinUser</span><span class="token punctuation">(</span><span class="token string">"孙悟空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">WeixinUser</span> user2<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">WeixinUser</span><span class="token punctuation">(</span><span class="token string">"猪悟能"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">WeixinUser</span> user3<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">WeixinUser</span><span class="token punctuation">(</span><span class="token string">"沙悟净"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//订阅公众号</span>        mSubscriptionSubject<span class="token punctuation">.</span><span class="token function">attach</span><span class="token punctuation">(</span>user1<span class="token punctuation">)</span><span class="token punctuation">;</span>        mSubscriptionSubject<span class="token punctuation">.</span><span class="token function">attach</span><span class="token punctuation">(</span>user2<span class="token punctuation">)</span><span class="token punctuation">;</span>        mSubscriptionSubject<span class="token punctuation">.</span><span class="token function">attach</span><span class="token punctuation">(</span>user3<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//公众号更新发出消息给订阅的微信用户</span>        mSubscriptionSubject<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token string">"传智黑马的专栏更新了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-4-优缺点"><a href="#3-4-优缺点" class="headerlink" title="3.4 优缺点"></a>3.4 优缺点</h3><p><strong>1，优点：</strong></p><ul><li>降低了目标与观察者之间的耦合关系，两者之间是抽象耦合关系。</li><li>被观察者发送通知，所有注册的观察者都会收到信息【可以实现广播机制】</li></ul><p><strong>2，缺点：</strong></p><ul><li>如果观察者非常多的话，那么所有的观察者收到被观察者发送的通知会耗时</li><li>如果被观察者有循环依赖的话，那么被观察者发送通知会使观察者循环调用，会导致系统崩溃</li></ul><h3 id="3-5-使用场景"><a href="#3-5-使用场景" class="headerlink" title="3.5 使用场景"></a>3.5 使用场景</h3><ul><li>对象间存在一对多关系，一个对象的状态发生改变会影响其他对象。</li><li>当一个抽象模型有两个方面，其中一个方面依赖于另一方面时。</li></ul><h2 id="4-迭代器模式"><a href="#4-迭代器模式" class="headerlink" title="4 迭代器模式"></a>4 迭代器模式</h2><h3 id="4-1-概述"><a href="#4-1-概述" class="headerlink" title="4.1 概述"></a>4.1 概述</h3><p><strong>定义：</strong></p><p>提供一个对象来顺序访问聚合对象中的一系列数据，而不暴露聚合对象的内部表示。 </p><h3 id="4-2-结构"><a href="#4-2-结构" class="headerlink" title="4.2 结构"></a>4.2 结构</h3><p>迭代器模式主要包含以下角色：</p><ul><li><p>抽象聚合（Aggregate）角色：定义存储、添加、删除聚合元素以及创建迭代器对象的接口。</p></li><li><p>具体聚合（ConcreteAggregate）角色：实现抽象聚合类，返回一个具体迭代器的实例。</p></li><li><p>抽象迭代器（Iterator）角色：定义访问和遍历聚合元素的接口，通常包含 hasNext()、next() 等方法。</p></li><li><p>具体迭代器（Concretelterator）角色：实现抽象迭代器接口中所定义的方法，完成对聚合对象的遍历，记录遍历的当前位置。</p></li></ul><h3 id="4-3-案例实现"><a href="#4-3-案例实现" class="headerlink" title="4.3 案例实现"></a>4.3 案例实现</h3><p>代码如下：</p><p>定义迭代器接口，声明hasNext、next方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">StudentIterator</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">boolean</span> <span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Student</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>定义具体的迭代器类，重写所有的抽象方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StudentIteratorImpl</span> <span class="token keyword">implements</span> <span class="token class-name">StudentIterator</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">></span></span> list<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> position <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">StudentIteratorImpl</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">></span></span> list<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>list <span class="token operator">=</span> list<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> position <span class="token operator">&lt;</span> list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Student</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Student</span> currentStudent <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>position<span class="token punctuation">)</span><span class="token punctuation">;</span>        position <span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> currentStudent<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>定义抽象容器类，包含添加元素，删除元素，获取迭代器对象的方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">StudentAggregate</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">void</span> <span class="token function">addStudent</span><span class="token punctuation">(</span><span class="token class-name">Student</span> student<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">removeStudent</span><span class="token punctuation">(</span><span class="token class-name">Student</span> student<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">StudentIterator</span> <span class="token function">getStudentIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>定义具体的容器类，重写所有的方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StudentAggregateImpl</span> <span class="token keyword">implements</span> <span class="token class-name">StudentAggregate</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 学生列表</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addStudent</span><span class="token punctuation">(</span><span class="token class-name">Student</span> student<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">removeStudent</span><span class="token punctuation">(</span><span class="token class-name">Student</span> student<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">StudentIterator</span> <span class="token function">getStudentIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">StudentIteratorImpl</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-4-优缺点"><a href="#4-4-优缺点" class="headerlink" title="4.4 优缺点"></a>4.4 优缺点</h3><p><strong>1，优点：</strong></p><ul><li>它支持以不同的方式遍历一个聚合对象，在同一个聚合对象上可以定义多种遍历方式。在迭代器模式中只需要用一个不同的迭代器来替换原有迭代器即可改变遍历算法，我们也可以自己定义迭代器的子类以支持新的遍历方式。</li><li>迭代器简化了聚合类。由于引入了迭代器，在原有的聚合对象中不需要再自行提供数据遍历等方法，这样可以简化聚合类的设计。</li><li>在迭代器模式中，由于引入了抽象层，增加新的聚合类和迭代器类都很方便，无须修改原有代码，满足 “开闭原则” 的要求。</li></ul><p><strong>2，缺点：</strong></p><p>增加了类的个数，这在一定程度上增加了系统的复杂性。</p><h3 id="4-5-使用场景"><a href="#4-5-使用场景" class="headerlink" title="4.5 使用场景"></a>4.5 使用场景</h3><ul><li>当需要为聚合对象提供多种遍历方式时。</li><li>当需要为遍历不同的聚合结构提供一个统一的接口时。</li><li>当访问一个聚合对象的内容而无须暴露其内部细节的表示时。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习案例集合</title>
      <link href="/2023/04/17/aop/"/>
      <url>/2023/04/17/aop/</url>
      
        <content type="html"><![CDATA[<h1 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h1><h2 id="1-Spring中Aop校验JWT"><a href="#1-Spring中Aop校验JWT" class="headerlink" title="1.Spring中Aop校验JWT"></a>1.Spring中Aop校验JWT</h2><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">&#x2F;&#x2F;注解@Target(ElementType.METHOD)@Retention(RetentionPolicy.RUNTIME)public @interface CheckJWT &#123;&#125;&#x2F;&#x2F;切面类@Aspect@Component@Slf4jpublic class Accpet &#123;    @Pointcut(&quot;@annotation(com.lfy.aop.CheckJWT)&quot;)    public void easyPuct()&#123;    &#125;    @Around(&quot;easyPuct()&quot;)    public Object checkJWT(ProceedingJoinPoint point)&#123;        ServletRequestAttributes requestAttributes &#x3D; (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();        HttpServletRequest request &#x3D; requestAttributes.getRequest();        String jwt &#x3D; request.getHeader(&quot;jwt&quot;);        &#x2F;&#x2F;伪代码，验证JWT        if(&quot;1&quot;.equals(jwt))&#123;            try &#123;                return point.proceed();            &#125; catch (Throwable e) &#123;                log.error(&quot;验证JWT异常，异常:&#123;&#125;，方法：&#123;&#125;，入参：&#123;&#125;，JWT:&#123;&#125;&quot;,e.getMessage(),point.getSignature(),point.getArgs(),jwt);                return &quot;验证失败&quot;;            &#125;        &#125;else &#123;            return &quot;jwt错误&quot;;        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-Spring中注解给方法参数赋值"><a href="#2-Spring中注解给方法参数赋值" class="headerlink" title="2.Spring中注解给方法参数赋值"></a>2.Spring中注解给方法参数赋值</h2><p><strong>1.第一步创建注解</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">PARAMETER</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">CheckUser</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>2.第二步创建配置类</strong></p><ul><li>实现HandlerMethodArgumentResolver <ul><li>这个是spring提供给参数进行校验的方法</li><li><strong>supportsParameter</strong>方法如果为true就会进入<strong>resolveArgument</strong>方法中<ul><li>parameter.getParameterType()：获取参数类型</li><li>parameter.hasParameterAnnotation(<strong>xxx.class</strong>) 判断是否包含注解类</li></ul></li><li><strong>resolveArgument</strong>方法的返回值会自动赋值给参数<ul><li>强转req  HttpServletRequest req &#x3D; (HttpServletRequest) webRequest.getNativeRequest();</li></ul></li></ul></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CheckUserConfig</span> <span class="token keyword">implements</span> <span class="token class-name">HandlerMethodArgumentResolver</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> <span class="token class-name">RedisTemplate</span> redisTemplate<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> <span class="token class-name">AdminMapper</span> adminMapper<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">supportsParameter</span><span class="token punctuation">(</span><span class="token class-name">MethodParameter</span> parameter<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//验证参数是否是Admin类</span>        <span class="token keyword">boolean</span> <span class="token class-name">AdminCheck</span> <span class="token operator">=</span> parameter<span class="token punctuation">.</span><span class="token function">getParameterType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Admin</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//验证参数上是否有@CheckUser 注解</span>        <span class="token keyword">boolean</span> hasAnnotation <span class="token operator">=</span> parameter<span class="token punctuation">.</span><span class="token function">hasParameterAnnotation</span><span class="token punctuation">(</span><span class="token class-name">CheckUser</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//如果有，进入逻辑方法</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">AdminCheck</span><span class="token operator">&amp;&amp;</span>hasAnnotation<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">resolveArgument</span><span class="token punctuation">(</span><span class="token class-name">MethodParameter</span> parameter<span class="token punctuation">,</span> <span class="token class-name">ModelAndViewContainer</span> mavContainer<span class="token punctuation">,</span> <span class="token class-name">NativeWebRequest</span> webRequest<span class="token punctuation">,</span> <span class="token class-name">WebDataBinderFactory</span> binderFactory<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//强转req</span>        <span class="token class-name">HttpServletRequest</span> req <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span><span class="token punctuation">)</span> webRequest<span class="token punctuation">.</span><span class="token function">getNativeRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取token</span>        <span class="token class-name">String</span> authorization <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">"Authorization"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ValueOperations</span> redis <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//通过redis获取id</span>        <span class="token class-name">Integer</span> adminid <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">)</span> redis<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"Bearer"</span> <span class="token operator">+</span> authorization<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//通过id查数据库找到admin,返回给使用注解的参数赋值</span>        <span class="token class-name">Admin</span> admin <span class="token operator">=</span> adminMapper<span class="token punctuation">.</span><span class="token function">selectOne</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">QueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Admin</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">,</span> adminid<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> admin<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>3.把配置类注入到webmvcconfig</strong></p><p>把config注入进bean，实现WebMvcConfigurer，重写addArgumentResolvers方法，把配置项添加进addArgumentResolvers</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CheckUserResolverConfig</span> <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> <span class="token class-name">CheckUserConfig</span> <span class="token function">config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CheckUserConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addArgumentResolvers</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">HandlerMethodArgumentResolver</span><span class="token punctuation">></span></span> resolvers<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        resolvers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>4.使用</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/lfy"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@Api</span><span class="token punctuation">(</span>tags <span class="token operator">=</span> <span class="token string">"秒杀商品控制器"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GoodsController</span> <span class="token keyword">implements</span> <span class="token class-name">InitializingBean</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/buygoods"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ApiOperation</span><span class="token punctuation">(</span><span class="token string">"秒杀商品"</span><span class="token punctuation">)</span>    <span class="token comment">//直接在参数前添加注解，自动获取admin</span>    <span class="token keyword">public</span> <span class="token class-name">Message</span> createOrder <span class="token punctuation">(</span><span class="token annotation punctuation">@CheckUser</span> <span class="token class-name">Admin</span> admin<span class="token punctuation">,</span> <span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">Goods</span> goods<span class="token punctuation">,</span> <span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-使用工厂-策略消除-if-else"><a href="#3-使用工厂-策略消除-if-else" class="headerlink" title="3.使用工厂+策略消除 if-else"></a>3.使用工厂+策略消除 if-else</h2><p><strong>例如 根据参数1-7返回星期几</strong></p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">public String getDayNow(String code)&#123;if(code.equels(&quot;1&quot;))&#123;return &quot;星期一&quot;&#125;else if(code.equels(&quot;2&quot;))&#123;return &quot;星期二&quot;&#125;else if(code.equels(&quot;3&quot;))&#123;return &quot;星期三&quot;&#125; &#x2F;&#x2F;等等等....省略&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>当方法需要扩展时，需要变动代码，太多的if判断分支导致代码犹如屎山一般。</strong></p><p><strong>解决：</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//定义策略接口</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">DayParse</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//判断是否进入此策略</span>    <span class="token class-name">Boolean</span> <span class="token class-name">Check</span><span class="token punctuation">(</span><span class="token class-name">String</span> code<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//策略逻辑</span>    <span class="token class-name">String</span> <span class="token function">service</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//策略名</span>    <span class="token class-name">String</span> <span class="token class-name">GetName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//优先级</span>    <span class="token keyword">int</span> <span class="token class-name">GetPriority</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>定义星期一类</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Monday</span> <span class="token keyword">implements</span> <span class="token class-name">DayParse</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Boolean</span> <span class="token class-name">Check</span><span class="token punctuation">(</span><span class="token class-name">String</span> code<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>code<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">service</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"星期一"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token class-name">GetName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"1"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token class-name">GetPriority</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>定义星期二</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Tuesday</span> <span class="token keyword">implements</span> <span class="token class-name">DayParse</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Boolean</span> <span class="token class-name">Check</span><span class="token punctuation">(</span><span class="token class-name">String</span> code<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>code<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">service</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"星期二"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token class-name">GetName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"1"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token class-name">GetPriority</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>以此类推，定义7个实现类</strong></p><p><strong>定义工厂</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MonFactoryBean</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">MonFactoryBean</span> bean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MonFactoryBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MonFactorParse</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">MonFactorBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//将实现类实例化添加进list</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Monday</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Tuesday</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Wednesday</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//省略.......</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//作为工厂单例无需多言</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">MonFactorBean</span> <span class="token function">getInstence</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> bean<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//返回实现类</span>    <span class="token keyword">public</span> <span class="token class-name">DayParse</span> <span class="token function">getDay</span><span class="token punctuation">(</span><span class="token class-name">String</span> code<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">DayParse</span> thisDayParse<span class="token operator">=</span>ull<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">DayParse</span> dayParse <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//遍历出符合策略的方法返回</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">dayParse<span class="token punctuation">.</span></span>Check</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token comment">//校验优先级，当p不为空时，才会走到第二个优先级判断</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>p <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token class-name"><span class="token namespace">dayParse<span class="token punctuation">.</span></span>GetPriority</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token class-name"><span class="token namespace">thisDayParse<span class="token punctuation">.</span></span>GetPriority</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    p <span class="token operator">=</span> dayParse<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>thisDayParse<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"没有找到策略"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> thisDayParse<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>利用多态特性，使用者无需关心返回的是什么实现类。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/xxx"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">client</span><span class="token punctuation">(</span><span class="token class-name">String</span> code<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token class-name">DayParse</span> d <span class="token operator">=</span>  <span class="token class-name">MonFactoryBean</span><span class="token punctuation">.</span><span class="token function">getInstence</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDay</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> d<span class="token punctuation">.</span><span class="token function">service</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-1如果觉得扩展时还需要对list中添加实现类可以通过配置文件的方式"><a href="#3-1如果觉得扩展时还需要对list中添加实现类可以通过配置文件的方式" class="headerlink" title="3.1如果觉得扩展时还需要对list中添加实现类可以通过配置文件的方式"></a>3.1如果觉得扩展时还需要对list中添加实现类可以通过配置文件的方式</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MonFactoryBean</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">MonFactoryBean</span> bean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MonFactoryBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MonFactorParse</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//使用配置文件</span>        <span class="token class-name">Properties</span> properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//通过反射加载实现类</span>        <span class="token class-name">InputStream</span> bean <span class="token operator">=</span> <span class="token class-name">DayParse</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"/beanFactory.properties"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            properties<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>bean<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Object</span> o <span class="token operator">:</span> properties<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">DayParse</span><span class="token punctuation">)</span>  <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> properties<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> <span class="token operator">|</span> <span class="token class-name">InstantiationException</span> <span class="token operator">|</span> <span class="token class-name">IllegalAccessException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token class-name">MonFactorBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//作为工厂单例无需多言</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">MonFactorBean</span> <span class="token function">getInstence</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> bean<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>      <span class="token comment">//返回实现类</span>    <span class="token keyword">public</span> <span class="token class-name">DayParse</span> <span class="token function">getDay</span><span class="token punctuation">(</span><span class="token class-name">String</span> code<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">DayParse</span> thisDayParse<span class="token operator">=</span>ull<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">DayParse</span> dayParse <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//遍历出符合策略的方法返回</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">dayParse<span class="token punctuation">.</span></span>Check</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token comment">//校验优先级，当p不为空时，才会走到第二个优先级判断</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>p <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token class-name"><span class="token namespace">dayParse<span class="token punctuation">.</span></span>GetPriority</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token class-name"><span class="token namespace">thisDayParse<span class="token punctuation">.</span></span>GetPriority</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    p <span class="token operator">=</span> dayParse<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>thisDayParse<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"没有找到策略"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> thisDayParse<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当扩展时只需要加配置文件即可</p><p><strong>&#x2F;beanFactory.properties</strong></p><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token key attr-name">Mon1</span><span class="token punctuation">=</span><span class="token value attr-value">com.lfy.Factor.Impl.Monday</span><span class="token key attr-name">Mon2</span><span class="token punctuation">=</span><span class="token value attr-value">com.lfy.Factor.Impl.Tuesday</span><span class="token key attr-name">Mon3</span><span class="token punctuation">=</span><span class="token value attr-value">com.lfy.Factor.Impl.Wednesday</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="4-使用责任链消除-if-else"><a href="#4-使用责任链消除-if-else" class="headerlink" title="4.使用责任链消除 if-else"></a>4.使用责任链消除 if-else</h2><p><strong>场景：现在有员工需要请假，根据请假天数的不同，需要不同负责人的审批，那么如何使用责任链模式消除if-else呢</strong></p><p>定义抽象类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">LeaveHanler</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//下一个处理者</span>    <span class="token keyword">protected</span> <span class="token class-name">LeaveHanler</span> nextLeave<span class="token punctuation">;</span>    <span class="token comment">//处理请假天数范围</span>    <span class="token keyword">protected</span> <span class="token class-name">Integer</span> beginDays<span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token class-name">Integer</span> endDays<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">LeaveHanler</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> beginDays<span class="token punctuation">,</span> <span class="token class-name">Integer</span> endDays<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>beginDays <span class="token operator">=</span> beginDays<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>endDays <span class="token operator">=</span> endDays<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//处理请假逻辑</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">service</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//提交</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">submit</span><span class="token punctuation">(</span><span class="token class-name">People</span> p<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//如果符合当前小组长的处理权限则调用该组长的service</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">getNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;=</span><span class="token keyword">this</span><span class="token punctuation">.</span>endDays<span class="token operator">&amp;&amp;</span>p<span class="token punctuation">.</span><span class="token function">getNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">>=</span><span class="token keyword">this</span><span class="token punctuation">.</span>beginDays<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">service</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>nextLeave<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">//否则交给下一个处理者的submit</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>nextLeave<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"超出权限范围，没人能处理"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setNextLeave</span><span class="token punctuation">(</span><span class="token class-name">LeaveHanler</span> nextLeave<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>nextLeave <span class="token operator">=</span> nextLeave<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//请假实体</span><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">People</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token comment">//姓名</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> num<span class="token punctuation">;</span><span class="token comment">//请假天数</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> content<span class="token punctuation">;</span><span class="token comment">//请假内容</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//小组长1</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Leader1</span> <span class="token keyword">extends</span> <span class="token class-name">LeaveHanler</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">Leader1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">service</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"小组长1处理"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//小组长2</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Leader2</span> <span class="token keyword">extends</span> <span class="token class-name">LeaveHanler</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">Leader2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">service</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"小组长2处理"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//客户端类</span><span class="token keyword">public</span> <span class="token keyword">class</span> client <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//这里可以抽取代码</span>        <span class="token class-name">Leader1</span> leader1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Leader1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Leader2</span> leader2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Leader2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        leader1<span class="token punctuation">.</span><span class="token function">setNextLeave</span><span class="token punctuation">(</span>leader2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">People</span> people <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">People</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">"xxx"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        leader1<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span>people<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-使用命令行的方式kill占用端口的应用"><a href="#5-使用命令行的方式kill占用端口的应用" class="headerlink" title="5.使用命令行的方式kill占用端口的应用"></a>5.使用命令行的方式kill占用端口的应用</h2><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">netstat | findstr 端口号    #查看进程idtasklist |findstr 进程号     #查看进程是哪个应用taskkill -t -f -pid 进程号   #终止进程和子进程<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-定时任务"><a href="#6-定时任务" class="headerlink" title="6.定时任务"></a>6.定时任务</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@EnableScheduling</span> <span class="token comment">//开启定时任务</span><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SchedulingConfig</span> <span class="token punctuation">&#123;</span>        <span class="token annotation punctuation">@Scheduled</span><span class="token punctuation">(</span>cron <span class="token operator">=</span> <span class="token string">"* * * * * ?"</span><span class="token punctuation">)</span> <span class="token comment">//执行周期 </span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//最好配合线程池使用，这里省略</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"定时任务执行ing..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>语法：秒 分 时 日 月 周 年<strong>（年Spring 不支持）</strong></p></li><li><p>特殊字符：</p><p><strong>，</strong>：枚举；</p><p>(cron&#x3D;”7,9,23 * * * * ?”)：任意时刻的 7,9，23 秒启动这个任务；</p><p>**-**：范围：</p><p>(cron&#x3D;”7-20 * * * * ?”):任意时刻的 7-20 秒之间，每秒启动一次</p><p>*****：任意；</p><p>指定位置的任意时刻都可以</p><p>**&#x2F;**：步长；</p><p>(cron&#x3D;”7&#x2F;5 * * * * ?”)：第 7 秒启动，每 5 秒一次；</p><p>(cron&#x3D;”*&#x2F;5 * * * * ?”)：任意秒启动，每 5 秒一次；</p><p><strong>？</strong>：（出现在日和周几的位置）：为了防止日和周冲突，在周和日上如果要写通配符使</p><p>用?</p><p>(cron&#x3D;”* * * 1 * ?”)：每月的 1 号，启动这个任务；</p><p><strong>L</strong>：（出现在日和周的位置）”，</p><p>last：最后一个</p><p>(cron&#x3D;”* * * ? * 3L”)：每月的最后一个周二</p><p><strong>W</strong>：</p><p>Work Day：工作日</p><p>(cron&#x3D;”* * * W * ?”)：每个月的工作日触发</p><p>(cron&#x3D;”* * * LW * ?”)：每个月的最后一个工作日触发</p><p>**#**：第几个</p><p>(cron&#x3D;”* * * ? * 5#2”)：每个月的第 2 个周 4</p></li></ul><h2 id="7-更新中………"><a href="#7-更新中………" class="headerlink" title="7.更新中………"></a>7.更新中………</h2>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JUC并发编程</title>
      <link href="/2023/01/07/juc-bi-ji/"/>
      <url>/2023/01/07/juc-bi-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="1-虚假唤醒问题"><a href="#1-虚假唤醒问题" class="headerlink" title="1.虚假唤醒问题"></a>1.虚假唤醒问题</h1><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">waitfalse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>xxx<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    xxx  <span class="token comment">//业务逻辑</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>场景：当两个线程并发时，由于synchronized修饰方法，只会有一个线程进入，当线程进行wait时让出了执行权，第二个线程也会进入方法，同时也wait。这时就有两个线程在等待，当外面某个方法使用notifyAll时，这两个线程会被唤醒，由于synchronized两个线程会争夺执行权，但是不管哪个线程抢到了执行权，然而其实在if中还是true并没有改变。本意并不想让此方法走到业务逻辑中。但是线程不会在进行if判断。因为<strong>wait的机制是在哪里等待，就在哪里被唤醒。</strong></p></li><li><p>解决：将if替换为while</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">waitfalse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">while</span><span class="token punctuation">(</span>xxx<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    xxx  <span class="token comment">//业务逻辑</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p><strong>Lock版本</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token class-name">Lock</span> lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//可重入锁</span><span class="token keyword">private</span> <span class="token class-name">Condition</span> condition <span class="token operator">=</span> lock<span class="token punctuation">.</span><span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span>  <span class="token keyword">void</span> <span class="token function">waitfalse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">try</span><span class="token punctuation">&#123;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>xxx<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  condition<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//等待                </span>        <span class="token punctuation">&#125;</span>        xxx  <span class="token comment">//业务逻辑</span><span class="token punctuation">&#125;</span><span class="token keyword">finally</span><span class="token punctuation">&#123;</span>lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="2-解决ArrayList线程不安全问题"><a href="#2-解决ArrayList线程不安全问题" class="headerlink" title="2.解决ArrayList线程不安全问题"></a>2.解决ArrayList线程不安全问题</h1><ol><li>使用Vector。里面方法都是用synchronized修饰过的。优点无脑，缺点效率低</li><li>使用Collections工具类中的synchronizedList()方法返回一个AttayList。同样优点无脑，缺点效率低</li><li><strong>（常用）</strong>：CopyOnWriteArrayList 。<ul><li>读写分离式。</li><li>当插入数据时，会上一把可重入锁。创建出一个原数组加1的新数组，往新数组中添加数据完成后将新数组覆盖掉原数组</li><li>缺点：因为读没有上锁，可能会造成读不到已添加的数据问题</li></ul></li></ol><h1 id="3-锁"><a href="#3-锁" class="headerlink" title="3.锁"></a>3.锁</h1><h3 id="3-1）公平锁与非公平锁"><a href="#3-1）公平锁与非公平锁" class="headerlink" title="3.1）公平锁与非公平锁"></a>3.1）公平锁与非公平锁</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Lock</span> lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//非公平锁，synchronized关键字也是一把非公平锁</span><span class="token class-name">Lock</span> lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//公平锁</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>非公平锁：抢占式，有的线程可能因为抢不到锁，而什么都没执行</p><p>公平锁：按线程访问的顺序来进行有序执行</p><p>相当于公平锁就是开车去加油，好好排队。谁先来谁先加油。非公平锁就相当于大家都不排队，上一个车加油完后面的车都去抢加油窗口</p><p><strong>synchronized</strong> 在静态方法中，默认锁的是class。 在动态方法中默认锁的是当前对象</p><p>当一个对象中有两个synchronized修饰过的动态方法A和B。实例化这个对象，创建两个线程分别执行A方法和B方法。会产生阻塞。但是如果对象不同则不会阻塞。</p><p>如果这个方法是静态的或synchronized锁的是class，则无论是否是新的对象，都会产生阻塞</p><p>当一个方法为静态的synchronized，一个为普通的synchronized方法时，可以允许各自有一个线程执行 <strong>也就是说，动态的只会阻塞动态的方法，静态的只会阻塞同样是静态的方法</strong></p><h3 id="3-2）可重入锁与不可重入锁"><a href="#3-2）可重入锁与不可重入锁" class="headerlink" title="3.2）可重入锁与不可重入锁"></a>3.2）可重入锁与不可重入锁</h3><p><strong>synchronized和ReentrantLock都是可重入锁</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>可重入锁特点，当锁相同时，可以自动获取锁，永不阻塞</li></ul><hr><h1 id="4-辅助工具类"><a href="#4-辅助工具类" class="headerlink" title="4.辅助工具类"></a>4.辅助工具类</h1><p><strong>区别于redisson</strong>，这里new 的参数都是锁的数量，而不是锁的名字</p><h3 id="4-1）countDownLatch-（闭锁）计数器"><a href="#4-1）countDownLatch-（闭锁）计数器" class="headerlink" title="4.1）countDownLatch （闭锁）计数器"></a>4.1）countDownLatch （闭锁）计数器</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">CountDownLatch</span> c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CountDownLatch</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>；c<span class="token punctuation">.</span><span class="token function">countDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//计数器减一</span>c<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//等待</span><span class="token comment">//当计数器为0时才会执行下方业务逻辑</span>xxx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-2）Semaphore-信号量锁"><a href="#4-2）Semaphore-信号量锁" class="headerlink" title="4.2）Semaphore 信号量锁"></a>4.2）Semaphore 信号量锁</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">  <span class="token class-name">Semaphore</span> semaphore <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Semaphore</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//参数设置信号量值</span><span class="token comment">//获取阻塞信号量锁（信号量锁-1）</span> park<span class="token punctuation">.</span><span class="token function">acquire</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//如果信号量的值等于0，则一直等待阻塞</span><span class="token comment">//获取非阻塞信号量锁（信号量锁-1）</span><span class="token keyword">boolean</span> flag <span class="token operator">=</span>  park<span class="token punctuation">.</span><span class="token function">tryAcquire</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">//如果信号量的值等于0，直接返回flase，大于0则返回true</span><span class="token comment">//释放一个锁（信号量锁+1）</span>park<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="5-volatile关键字"><a href="#5-volatile关键字" class="headerlink" title="5.volatile关键字"></a>5.volatile关键字</h1><h3 id="保证可见性"><a href="#保证可见性" class="headerlink" title="保证可见性"></a>保证可见性</h3><p>保证可见性指的是：当一个线程修改了某个变量时，其他所有线程都知道该变量被修改了。 由于 volatile 可以保证可见性，因此 Java 能够保证现在在读取 volatile 变量时，线程读取到的值是准确的。但是这并不意味着对 volatile 变量的操作是线程安全的，因为有可能在读取到变量之后，又有其他线程对变量进行修改了</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"> <span class="token keyword">static</span> <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Thread</span> thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token punctuation">&#125;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"线程停止"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>        flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">//更改标志位</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">//变量不加 volatile 会导致第一个线程一直读取自己工作内存中的变量，感知不到第二个线程修改了标志位。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="禁止指令重排序"><a href="#禁止指令重排序" class="headerlink" title="禁止指令重排序"></a>禁止指令重排序</h3><p>指令重排序，指的是硬件层面为了加快执行速度，可能会调整指令的执行顺序，从而会出现并不按代码顺序的执行情况出现。例如下面的代码里，我们初始化了 flag 变量为 false，然后再将 flag 变量置为 true。但这样的代码在并发执行的时候，有可能先将 flag 职位 true，再将 flag 变为 false，从而发生线程安全问题。</p><p>一般来说，Java基本数据类型的读写是原子操作（64位的long、double是分两次读写例外），也就是说多线程环境下，只要满足以下一种以上情况，即可满足线程安全，否则只能通过synchronized或者Lock加锁满足原子性。<br><strong>第一个，变量操作不依赖其他变量（包括自己），这时候不会依赖主内存中的值，只有纯写入操作。</strong><br><strong>第二个，只有一个线程会改变变量值，不会存在资源竞争。</strong></p><p><strong>为什么线程之间的数据会存在不可见性</strong></p><ul><li>原因是每个线程都会有一个工作内存，工作内存拷贝主内存中的数据。然后在线程中操作的指令是在工作内存中执行的。工作内存什么时候把数据写入到主内存的时机是不固定的。有可能在工作内存中执行了某种操作，还没写入主内存。别的线程的工作内存来拷贝主内存的数据，就会造成线程的工作内存的内容不一致的情况从而出现脏数据。并且工作内存是相互隔离的</li></ul><p><strong>禁止指令重排原理</strong></p><ul><li>当操作被volatile修饰过的变量时，JVM会在这条操作的前面加上 写写屏障  在这条操作的后面加上 写读屏障  写写屏障保证了普通写和volatile的写的顺序不能发生改变。写读屏障保证了 后续的读与volatile写不能交换顺序 只有在这条volatile写操作 写入了主内存中，后续的写读才能执行</li><li>当读被volatile修饰过的变量时，JVM会在这条操作后面添加 读读屏障 和读写屏障 。这条读操作后面的普通读与volatile读顺序不能发生改变。后后续的普通写操作必须要等volatile读到了主内存中的数据才能执行</li></ul><h1 id="6-读写锁与降级"><a href="#6-读写锁与降级" class="headerlink" title="6.读写锁与降级"></a>6.读写锁与降级</h1><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">ReentrantReadWriteLock</span> reentrantReadWriteLock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantReadWriteLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token class-name">ReentrantReadWriteLock<span class="token punctuation">.</span>ReadLock</span> readLock <span class="token operator">=</span> reentrantReadWriteLock<span class="token punctuation">.</span><span class="token function">readLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//读锁</span><span class="token class-name">ReentrantReadWriteLock<span class="token punctuation">.</span>WriteLock</span> writeLock <span class="token operator">=</span> reentrantReadWriteLock<span class="token punctuation">.</span><span class="token function">writeLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//写锁</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>读：并发读</p><p>写：互斥</p><ul><li>读+读：相当于无锁，并发读</li><li>写+读：等待写锁释放，在执行读锁</li><li>写+写：阻塞</li><li>读+写：等待读锁释放，在执行写锁</li></ul><h3 id="6-1降级"><a href="#6-1降级" class="headerlink" title="6.1降级"></a>6.1降级</h3><p><strong>同一线程时</strong>，先上写锁，在上读锁，此时读锁不会被阻塞（<strong>被称为写锁降级成读锁</strong>）。如果反过来先上读锁，在上写锁就会被阻塞.</p><p><strong>注意：锁降级只发生在同一线程。如果不同线程，写锁读锁无论哪个先上锁，都是互斥阻塞等待</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">ReentrantReadWriteLock</span> reentrantReadWriteLock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantReadWriteLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">ReentrantReadWriteLock<span class="token punctuation">.</span>ReadLock</span> readLock <span class="token operator">=</span> reentrantReadWriteLock<span class="token punctuation">.</span><span class="token function">readLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">ReentrantReadWriteLock<span class="token punctuation">.</span>WriteLock</span> writeLock <span class="token operator">=</span> reentrantReadWriteLock<span class="token punctuation">.</span><span class="token function">writeLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    writeLock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"加写锁"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    readLock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"加读锁"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="7-异步编排"><a href="#7-异步编排" class="headerlink" title="7.异步编排"></a>7.异步编排</h1><p><strong>详细笔记在线程池章节</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//直接执行异步</span><span class="token class-name">CompletableFuture<span class="token punctuation">.</span>RunAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>使用的线程池<span class="token punctuation">)</span><span class="token comment">//有返回值的异步</span><span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> xxx<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>使用的线程池<span class="token punctuation">)</span><span class="token comment">//自身没返回值，也感知不到上一异步任务的返回值 thenRunAsync和thenRun的区别在于，前者默认跟随上一步的线程。后者会使用ForkJoin默认的线程池</span>future<span class="token punctuation">.</span><span class="token function">thenRunAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>线程池名字<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//自身没有返回值，可以感知到上一个异步任务的返回值</span>future<span class="token punctuation">.</span><span class="token function">thenAcceptAsync</span><span class="token punctuation">(</span>res<span class="token operator">-></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>线程池名字<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//自身有返回值，可以感知到上一个异步任务的返回值</span>future<span class="token punctuation">.</span><span class="token function">thenApplyAsync</span><span class="token punctuation">(</span>res<span class="token operator">-></span><span class="token punctuation">&#123;</span> <span class="token keyword">return</span> xxx<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>线程池名字<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//等待前两个任务执行完毕才执行</span>任务<span class="token number">1.</span><span class="token function">thenAcceptBothAsync</span><span class="token punctuation">(</span>任务<span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">(</span>任务<span class="token number">1</span>结果，任务<span class="token number">2</span>结果<span class="token punctuation">)</span><span class="token operator">-></span><span class="token punctuation">&#123;</span>     <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>线程池<span class="token punctuation">)</span><span class="token comment">//等待前两个任务执行完毕才执行，并且带返回值    </span>任务<span class="token number">1.</span><span class="token function">thenCombineAsync</span><span class="token punctuation">(</span>任务<span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">(</span>任务<span class="token number">1</span>结果，任务<span class="token number">2</span>结果<span class="token punctuation">)</span><span class="token operator">-></span><span class="token punctuation">&#123;</span>           <span class="token keyword">return</span> 返回值        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>线程池<span class="token punctuation">)</span>    <span class="token comment">//获取结果  两者区别在于，前者会抛出异常，后者不会</span>任务<span class="token number">1.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span>或任务<span class="token number">1.</span>join    <span class="token comment">//比较两个异步任务哪个速度快  f:先执行完任务的返回值</span>任务<span class="token number">1.</span><span class="token function">applyToEither</span><span class="token punctuation">(</span>任务<span class="token number">2</span><span class="token punctuation">,</span> f <span class="token operator">-></span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> f<span class="token operator">+</span><span class="token string">"比较快"</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>whenComplete()与handle()就像 try{}finally{}无论是否有异常都会进入</strong>    <strong>exceptionally()就像catch(){}只有异常时才会进入</strong></p><ul><li>exceptionally 处理上一个阶段的异常，并且可以再<strong>返回一个值（返回值需要与上一个结果类型一样）</strong></li><li>handle 可以获取上一个阶段正常或异常的结果，<strong>并且有返回值（返回值不需要与上一个结果类型一样）</strong>，让下一个阶段继续执行</li><li>whenComplete 可以获取上一个阶段正常或异常的结果，没有返回值</li></ul><h1 id="8-排查死锁"><a href="#8-排查死锁" class="headerlink" title="8.排查死锁"></a>8.排查死锁</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">jsp <span class="token parameter variable">-l</span>  <span class="token comment">#查看进程</span>jstack 进程号 <span class="token comment">#查看打印信息</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="9-线程中断机制"><a href="#9-线程中断机制" class="headerlink" title="9.线程中断机制"></a>9.线程中断机制</h1><p>强制线程中断方法已经不推荐使用，例如：Thread.stop,Thread.suspend,Thread.resume都已经被废弃</p><p><strong>其次</strong></p><p>在Java中没有办法立即停止一条线程，然后停止线程尤为重要，如取消一个耗时操作。</p><p>因此，Java提供了一种用于线程停止的协商机制——中断</p><p><strong>中断是一种协商机制</strong>，Java没有给中断增加任何语法，中断过程完全由程序员自己实现，若要中断一个线程，可以手动调用该线程的interrupt方法，该方法也仅仅是将对象的终端标识设为true。</p><p><strong>9.1）线程中断方法</strong></p><ol><li><p>设置一个volatile的变量标识位</p></li><li><p>设置一个AtomicBoolean的原子布尔值标识位</p></li><li><p>通过Thread类自带的中断api实例方法实现</p><ol><li>isInterrupted()标识位 和 interrupt</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArrayListTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Thread</span> thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isInterrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello -------interrupt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token punctuation">&#123;</span>            <span class="token comment">//将isInterrupted设为true中断线程</span>            thread<span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>如果isInterrupt标识的线程正在 调用 Thread.sleep()、Thread.wait()、Thread.join时，用interrupt去更改标识位会返回InterruptException异常</li><li>如果线程结束了，isInterrupt会变为默认的false，也就是说interrupt只对正在活跃的线程有效，不活跃的线程不受影响</li></ul></li></ol><p><strong>interrupted</strong></p><p>此方法会返回当前线程的标识位状态，如果标识位为false则没有后续操作，如果标识位为true，就会将标识位置为false</p><p>通俗来说，就是如果在调用interrupted之前有调用过interrupt方法，他不仅会线程的标识位还会将interrput设置过的true清空</p><h1 id="10-线程唤醒"><a href="#10-线程唤醒" class="headerlink" title="10.线程唤醒"></a>10.线程唤醒</h1><h3 id="10-1）wait和notify"><a href="#10-1）wait和notify" class="headerlink" title="10.1）wait和notify"></a>10.1）<strong>wait和notify</strong></h3><ul><li>必须在同步块或同步方法中使用</li><li>wait是一个挂起操作，会释放锁</li><li>如果先notify后wait会导致线程无法被唤醒</li></ul><h3 id="10-2）Condition中await和signalAll的"><a href="#10-2）Condition中await和signalAll的" class="headerlink" title="10.2）Condition中await和signalAll的"></a>10.2）<strong>Condition中await和signalAll的</strong></h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> test <span class="token punctuation">&#123;</span>    <span class="token keyword">static</span> <span class="token class-name">Object</span> o <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token class-name">ReentrantLock</span> reentrantLock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token class-name">Condition</span> condition <span class="token operator">=</span> reentrantLock<span class="token punctuation">.</span><span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    reentrantLock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"进入等待程序"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    condition<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"唤醒成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span><span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>                    reentrantLock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>           <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>               reentrantLock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"进入唤醒程序"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                condition<span class="token punctuation">.</span><span class="token function">signalAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>               reentrantLock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="10-3）LockSupport中的part-和unpart"><a href="#10-3）LockSupport中的part-和unpart" class="headerlink" title="10.3）LockSupport中的part()和unpart()"></a>10.3）<strong>LockSupport中的part()和unpart()</strong></h3><ul><li>无需上锁，通行证机制，unpart(线程) 即可让对应的线程持有通行证，通信证最大只能有一张，连续调用unpart无效。part消费通信证，没有通行证的线程会阻塞</li><li>part类似wait的作用，unpart类似notify</li><li>先唤醒  后等待，一样不会出现无法唤醒的情况 。</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java">  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Thread</span> thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"等待被唤醒"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">LockSupport</span><span class="token punctuation">.</span><span class="token function">park</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"唤醒成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"唤醒"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token class-name">LockSupport</span><span class="token punctuation">.</span><span class="token function">unpark</span><span class="token punctuation">(</span>thread<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>面试题</strong></p><ul><li>为什可以捅破wait&#x2F;notify的原有调用顺序<ul><li>因为unpark让对应的线程获取了通信证，之后这个线程在调用park方法，就可以直接消费凭证，所以不会阻塞</li></ul></li><li>为什么唤醒两次后阻塞两次，最终会被阻塞<ul><li>因为通行证只有一个，连续调用两次unpark和调用一次是一样的，只会有一张通信证，但是在这个线程中连续调用两次part，会消费两张通信证，所以阻塞</li></ul></li></ul><h1 id="11-CAS"><a href="#11-CAS" class="headerlink" title="11.CAS"></a>11.CAS</h1><p>CAS的思想很简单：三个参数，一个当前内存值V、旧的预期值A、即将更新的值B，当且仅当预期值A和内存值V相同时，将内存值修改为B并返回true，否则什么都不做，并返回false。<br> JVM中的CAS操作正是利用了提到的处理器提供的CMPXCHG指令实现的；循环CAS实现的基本思路就是循环进行CAS操作直到成功为止</p><p>Java底层调用的是unsafe类。这个类里的所有方法都是被native修饰过的。也就是使用的jdk中的c语言加汇编，是一个直接操作内存的类，所以能保证原子性</p><p>示例</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JUCTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">static</span> <span class="token class-name">AtomicReference</span> r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Thread</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token punctuation">&#123;</span>            <span class="token function">lock</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"进入线程1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"线程1成功执行完毕"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">unlock</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">20</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token punctuation">&#123;</span>            <span class="token function">lock</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"线程2成功执行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">unlock</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">lock</span><span class="token punctuation">(</span><span class="token class-name">Thread</span> t<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//如果不为null时就一直循环，直到为null添加线程占位</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>r<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">unlock</span><span class="token punctuation">(</span><span class="token class-name">Thread</span> t <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>r<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="11-1）CAS的缺点"><a href="#11-1）CAS的缺点" class="headerlink" title="11.1）CAS的缺点"></a>11.1）CAS的缺点</h2><ul><li><p>如果线程一直抢不到锁，一直循环将大量消耗cpu</p></li><li><p><strong>CAS存在ABA问题</strong>：比如说一个线程one从内存位置V中取出A，这时候另一个线程two也从内存中取出A，并且two进行了一些操作变成了B，然后two又将V位置的数据变成A，这时候线程one进行CAS操作发现内存中仍然是A，然后one操作成功。尽管线程one的CAS操作成功，但是不代表这个过程就是没有问题的。如果链表的头在变化了两次后恢复了原值，但是不代表链表就没有变化。</p></li></ul><h2 id="11-2）解决ABA"><a href="#11-2）解决ABA" class="headerlink" title="11.2）解决ABA"></a>11.2）解决ABA</h2><p><strong>AtomicStampedReference</strong>来解决ABA问题:这个类的compareAndSet方法作用是首先检查当前引用是否等于预期引用，并且当前标志是否等于预期标志，如果全部相等，则以原子方式将该引用和该标志的值设置为给定的更新值。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">compareAndSet</span><span class="token punctuation">(</span>               <span class="token class-name">V</span>      expectedReference<span class="token punctuation">,</span><span class="token comment">//预期引用</span>               <span class="token class-name">V</span>      newReference<span class="token punctuation">,</span><span class="token comment">//更新后的引用</span>              <span class="token keyword">int</span>    expectedStamp<span class="token punctuation">,</span> <span class="token comment">//预期标志</span>              <span class="token keyword">int</span>    newStamp <span class="token comment">//更新后的标志</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="11-3）原子类"><a href="#11-3）原子类" class="headerlink" title="11.3）原子类"></a>11.3）原子类</h2><p>原子八大类底层调用的是CAS，也就是unsafe类。与开题的AtmicReference一样，只不过AtmicReference可以指定泛型</p><h2 id="11-4）原子类之对属性原子修改"><a href="#11-4）原子类之对属性原子修改" class="headerlink" title="11.4）原子类之对属性原子修改"></a>11.4）原子类之对属性原子修改</h2><ul><li>AtomicIntegerFieldUpdater<ul><li>用于原子修改某个非线程安全的类中的某个属性</li><li>属性需配合volatile使用</li><li>需要使用AtomicIntegerFieldUpdater.newUpdater(类.class，”字段”)</li></ul></li><li>AtomicReferenceFieldUpdater 同理 三个参数 类.class 类型.class 字段名</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArrayListTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>        demo demo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">CountDownLatch</span> countDownLatch <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CountDownLatch</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token punctuation">&#123;</span>                    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    demo<span class="token punctuation">.</span><span class="token function">addInt</span><span class="token punctuation">(</span>demo<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>                        countDownLatch<span class="token punctuation">.</span><span class="token function">countDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        countDownLatch<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>demo<span class="token punctuation">.</span><span class="token function">getNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> demo<span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token string">"demo"</span><span class="token punctuation">;</span>    <span class="token keyword">volatile</span> <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token class-name">AtomicIntegerFieldUpdater</span><span class="token generics"><span class="token punctuation">&lt;</span>demo<span class="token punctuation">></span></span> fieldUpdater <span class="token operator">=</span> <span class="token class-name">AtomicIntegerFieldUpdater</span><span class="token punctuation">.</span><span class="token function">newUpdater</span><span class="token punctuation">(</span>demo<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span><span class="token string">"num"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addInt</span><span class="token punctuation">(</span>demo d<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        fieldUpdater<span class="token punctuation">.</span><span class="token function">getAndIncrement</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> num<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="11-5）java8新特性原子增强类"><a href="#11-5）java8新特性原子增强类" class="headerlink" title="11.5）java8新特性原子增强类"></a>11.5）java8新特性原子增强类</h2><ul><li><p>LongAdder、LongAccumulator等</p><p><strong>LongAdder</strong></p><pre class="line-numbers language-none"><code class="language-none">void add(Long x) 将当前的value加xvoid increment() 将当前的value加1void decrement() 将当前的value减1long sum()   返回当前值，但是不保证在并发情况下的值精确void reset()     将value重置为0，此方法只有在没并发更新的情况下调用long sumThenReset() 获取当前value，并将value重置为0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>LongAccumulator</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">LongAccumulator</span> l <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LongAccumulator</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token operator">-></span>x<span class="token operator">+</span>y<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//自定义函数操作。x是初始值，第二个参数给初始值赋值</span>l<span class="token punctuation">.</span><span class="token function">accumulate</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//传入y</span><span class="token number">1.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//最终结果2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="11-5-1）底层实现"><a href="#11-5-1）底层实现" class="headerlink" title="11.5.1）底层实现"></a>11.5.1）底层实现</h3><p>LongAdder类比AtmicLong效率高了好几倍，那么他的底层是怎么实现的呢</p><p><strong>高并发时，底层进行了分段cas操作，用了一个cell[]数组来进行分片cas操作，最后累加值返回，如果是单线程直接累加base值</strong></p><ul><li>LongAdder在无线程竞争的情况下，和AtomicLon一样，对同一个base操作，当出现竞争关系的时候采用化整为零分散热点的做法，用空间换时间，用一个数组cells,将一个value拆分进这个数组cells中，多个线程需要同时对value操作时，将线程的id进行hash得到hash值，在根据hash值映射到这个数组cells的某个下标，在对该下标的值进行操作。最后将cells的所有值和base的值累加得到最终结果</li></ul><p><strong>缺点</strong></p><ul><li>sum的值在循环cells数组和base累加求值时，可能base的值已经更新了，此时局部变量sum不会更新。造成不一致，其次cell的读取也没办法保证是最后一次写入的值。所以sum方法在没有并发的时候能获取精确值，有并发的情况下值可能并不精确。</li><li><strong>他采用的是最终一致性方案，而不是实时性的</strong></li></ul><h1 id="12-ThreadLocal"><a href="#12-ThreadLocal" class="headerlink" title="12.ThreadLocal"></a>12.ThreadLocal</h1><ul><li>单线程传输数据</li></ul><pre class="line-numbers language-none"><code class="language-none">public static  ThreadLocal&lt;MemberEntity&gt; threadLocal &#x3D;new ThreadLocal(); &#x2F;&#x2F;直接newpublic static  ThreadLocal&lt;MemberEntity&gt; threadLocal &#x3D; ThreadLocal.withInitial(()-&gt;null) ; &#x2F;&#x2F;或者采用这种，初始化可以传一个值进去get() 获取值set() 传值remove() 删除值<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>底层Entry。k为当前new 的 ThreadLocal对象，v为传入的值</li><li>同时继承了弱引用，防止内存泄漏，所以操作完成的的情况下，需要将里面的元素置为空，防止线程复用时出现bug，如果后续不再使用ThreadLocal需要将它指向null</li></ul><h1 id="13-JavaObject"><a href="#13-JavaObject" class="headerlink" title="13.JavaObject"></a>13.JavaObject</h1><p>java 一个对象包括</p><ul><li>对象头<ul><li>对象头包括：运行时元数据（Mark Word）、类型指针</li><li><strong>运行时元数据里有</strong>：哈希值、gc存活次数、锁状态标志等。<strong>类型指针：</strong>指向实例化的类，表示这个Object是这个类型</li></ul></li><li>实例数据<ul><li>类里的一些变量</li></ul></li><li>对其填充<ul><li>保证这个实例化对象的大小是8的倍数</li></ul></li></ul><h1 id="14-偏向锁-gt-轻量锁-gt-重量级锁"><a href="#14-偏向锁-gt-轻量锁-gt-重量级锁" class="headerlink" title="14.偏向锁-&gt;轻量锁-&gt;重量级锁"></a>14.偏向锁-&gt;轻量锁-&gt;重量级锁</h1><p>在java6之前，只有无锁和重量级锁。synchronized是重量级锁，效率低下，因为监视器锁（monitor）是依赖底层的操作系统的系统互斥量来实现的。挂起和恢复线程都需要转入内核态去完成，阻塞或唤醒需要操作系统切换Cpu状态来完成。</p><p>在Java6之后，为了减少获得锁和释放锁带来的性能消耗，引入了轻量级锁和偏向锁</p><p>偏向锁：对象头中的Mark word存储的是偏向的线程id</p><p>轻量锁：对象头中的Mark word存储的是线程栈中的Lock Record 的指针</p><p>重量锁：对象头中的Mark word存储的是指向堆中的monitor对象的指针</p><h2 id="14-1）偏向锁"><a href="#14-1）偏向锁" class="headerlink" title="14.1）偏向锁"></a><strong>14.1）偏向锁</strong></h2><p>偏向锁会偏向第一个访问锁的线程，在对象头MarkWord中记录偏向线程id。然后此线程之后不需要获取锁，释放锁无需频繁切换用户态和内核态。直接执行代码。</p><p>当非偏向线程来到方法中，会判断此线程的线程id和MarkWord中的id是不是一个，如果不是就用CAS的方式尝试替换偏向线程id。CAS返回true时（竞争成功）替换偏向线程id，如果竞争失败，则会升级成轻量级锁</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">java <span class="token operator">-</span><span class="token constant">XX</span><span class="token operator">:</span><span class="token operator">+</span><span class="token class-name">PrintFlagsInitial</span> <span class="token operator">|</span>grep <span class="token class-name">BiasedLock</span><span class="token operator">*</span> <span class="token comment">//查看偏向锁开关用git的软件查看</span><span class="token operator">-</span><span class="token constant">XX</span><span class="token operator">:</span><span class="token operator">+</span><span class="token class-name">UseBiasedLocking</span>   <span class="token operator">-</span><span class="token constant">XX</span><span class="token operator">:</span><span class="token class-name">BiaseLockingStartupDelay</span><span class="token operator">=</span><span class="token number">0</span>  <span class="token comment">//开启偏向锁，并且将延时时间设置为0</span><span class="token operator">-</span><span class="token constant">XX</span><span class="token operator">:</span><span class="token operator">-</span><span class="token class-name">UseBiasedLocking</span>   <span class="token comment">//关闭偏向锁</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://lfymall.oss-cn-fuzhou.aliyuncs.com/study/image-20230221210402793.png" alt="https://lfymall.oss-cn-fuzhou.aliyuncs.com/study/image-20230221210402793.png"></p><ul><li><p>BiasedLockingStartupDelay ：延时时间，Java启动后偏向锁启动需要延时4秒的时间才能生效</p></li><li><p>UseBiasedLocking ：是否开启偏向锁</p></li></ul><h2 id="14-2）轻量级锁"><a href="#14-2）轻量级锁" class="headerlink" title="14.2）轻量级锁"></a>14.2）轻量级锁</h2><p>当cas替换偏向线程id竞争失败时触发，锁是否升级需要在全局安全点（该时间节点上没有字节码在执行）时暂停持有偏向锁的线程判断两种情况</p><ol><li><p>持有偏向锁的线程的synchronize方法还没执行完：清空偏向锁状态为无锁然后升级并唤醒持有偏向锁的线程。轻量级锁由原持有偏向锁的线程持有。</p><p>首先虚拟机会在当前线程的栈帧中建立一个名为锁记录（Lock Record）的空间，用于存储锁对象目前的Mark Word的拷贝。拷贝成功后，虚拟机将尝试将Mark Word里记录更新为指向Lock Record的指针。如果成功则代表持有锁，如果失败则自旋尝试更新对象头的指针</p></li><li><p>持有偏向锁的线程的synchronize方法执行完了：将头对象头设置成无锁状态并重新偏向。</p></li></ol><h2 id="14-3）重量级锁"><a href="#14-3）重量级锁" class="headerlink" title="14.3）重量级锁"></a>14.3）重量级锁</h2><p>当轻量级锁自旋超过一定阈值，这个阈值不是固定的。JVM非常的智能，它会根据这个线程上一次获取轻量锁的次数进行增加。也就是自适应。</p><p>自适应意味着自旋的时间不再是固定的了，而是由前一次在同一个锁上的自旋时间及锁的拥有者的状态来决定的。如果在同一个锁对象上，自旋等待刚刚成功获得过锁，并且持有锁的线程正在运行中，那么虚拟机就会认为这次自旋也很有可能再次成功，进而允许自旋等待持续相对更长的时间，比如持续100次忙循环。</p><p>升级成重量级锁后，对象头MarkWord将不存储指向栈帧中的锁记录（Lock Record）指针，而是存储堆中ObjectMonitor对象。这个Monitor对象的hearder记录会存储原对象头中的MarkWord的一些，hash值、分代年龄等信息</p><h2 id="14-4）调用hashcode方法后将用不偏向"><a href="#14-4）调用hashcode方法后将用不偏向" class="headerlink" title="14.4）调用hashcode方法后将用不偏向"></a>14.4）调用hashcode方法后将用不偏向</h2><p>很多人误以为，markword中的hashcode是由我们经常覆写的hashcode（）方法生成的。</p><p><strong>实际上， markword中的hashcode只由底层 JDK C++ 源码计算得到（java侧调用方法为 System.identityHashCode() ）， 生成后固化到markword中，如果你覆写了hashcode()方法， 那么每次都会重新调用hashCode()方法重新计算哈希值。</strong></p><p>根本原因是因为你覆写hashcode()之后，该方法中很可能会利用被修改的成员来计算哈希值，所以jvm不敢将其存储到markword中。</p><p><strong>总而言之：java中hashcode规定一旦计算不能改变，所以在计算过一次identityHashCode的哈希值时，如果被偏向线程id更换了，下一次计算就不是一个值了，所以禁用，而自己重写的他不会写到对象头里所以不受影响</strong></p><p>因此凡是做过类似hashmap.put(k,v)操作且没覆写hashcode的k对象， 以后加锁时，都会直接略过偏向锁，升级成轻量锁。</p><p><strong>MarkWord中存储的分代年龄、哈希值等信息，会被覆盖成偏向线程id、偏向时间戳等信息。这样就没有存储hash值了。所以会直接升级成轻量锁</strong>。</p><p><strong>如果在偏向锁使用中的情况下调用将直接膨胀成重量级锁</strong></p><p>而轻量锁MarkWord的指针是指向线程栈帧中的LockRecord，<strong>lockRecord</strong>中存储了原来的分代年龄、cms_free、hashcode等固有属性</p><p>重量级锁是将MarkWord里的指针替换成堆中ObjectMonitor对象，Monitor对象的hearders中有也有记录原来的分代年龄、cms_free、hashcode等固有属性</p><p><strong>所以轻量锁和重量锁不受影响</strong></p><h1 id="15-ReentrantLock底层实现之AQS"><a href="#15-ReentrantLock底层实现之AQS" class="headerlink" title="15.ReentrantLock底层实现之AQS"></a>15.ReentrantLock底层实现之AQS</h1><p><strong>AQS：State（标志位，0表示没有人持有锁，1表示有人持有锁）+ CLH双向队列 （队列中有Node节点包含被volatile属性（prex、next、Thread、waitStatus等））</strong> </p><p>ReentrantLock类中有个sync类，这个类是继承了AQS类的，而sync的子类有NonfairSync（非公平锁）和FairSync（公平锁），他根据构造方法的boolean去实例化出对应的子类</p><ul><li><p>非公平锁</p><ul><li><p>当调用Lock方法时，会首先尝试CAS把AQS中的State替换成1，如果成功则线程持有锁，没有成功进入acquire方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndSetState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>             <span class="token function">setExclusiveOwnerThread</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">else</span>             <span class="token function">acquire</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span>         <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">acquire</span><span class="token punctuation">(</span><span class="token keyword">int</span> arg<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">tryAcquire</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>         <span class="token function">acquireQueued</span><span class="token punctuation">(</span><span class="token function">addWaiter</span><span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token punctuation">.</span><span class="token constant">EXCLUSIVE</span><span class="token punctuation">)</span><span class="token punctuation">,</span> arg<span class="token punctuation">)</span><span class="token punctuation">)</span>         <span class="token function">selfInterrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>acquire方法分为三部分tryAcquire、acquireQueued、selfInterrupt</p></li><li><p>首先进入tryAcquire（1），他会判断State是否为0，如果是尝试CAS替换AQS中的State，如果失败，他会判断AQS中的Thread标志位是否是当前线程，如果是State加1（<strong>可重入锁原理</strong>）。如果不是则调用addWaiter</p></li><li><p>进入addWaiter，<strong>方法内是一个大循环</strong>，首先判断AQS的队列中的尾结点是否为空，如果尾结点为空则初始化队列，实例化一个空的node节点，然后将队列的头和尾指针指向这个节点（哨兵节点）。第二次循环，判断尾节点是否为空，这时候已经初始化好了，将当前线程节点入队，把尾节点指向当前入队的线程节点，并和前置节点的指针关联；然后出来调用acquireQueued</p></li><li><p>进入acquireQueued，<strong>方法内是一个循环</strong>，他会判断当前线程节点的前置节点是否头节点，如果是再次重复tryAcquire尝试获取锁。如果获取失败则将此线程的前置节点的waitStatus改为-1并且将当前线程使用LockSupport.park挂起。这时候就需要持有锁的线程unLock了</p></li><li><p>当被唤醒后，由于acquireQueued是一个循环方法，将会继续尝试tryAcquire获取锁（原因是非公平锁调用Lock时就会尝试CAS替换线程标志位，虽然队列中轮到这个节点了，但是还是有可能被半路截胡）。如果获取失败被截胡了，将会继续走LockSupport.part等待截胡线程的unLock。如果成功了，将会把AQS中的State置位1，然后将线程标志位改为自己。<strong>并且将队列中原哨兵节点的前后指针取消，让他没有指针指向而被Gc回收，最后将自己这个节点的Thread状态改为null，把自己当做新的哨兵节点</strong></p></li></ul><p><strong>unLock</strong></p><ul><li><p>当持有锁的线程进行unLock时，会将AQS中的State置位0，并且将线程标志位为null。然后将头节点的waitStatus设置为0，并且将下一个节点唤醒unpart</p></li><li><p>非公平锁</p><p>区别在于非公平锁第一次上锁就会进行一个CAS尝试替换操作，而公平锁没有，还有就是公平锁的tryAcquire中会多判断一个hasQueuedPredecessors()方法，这个方法用于判断  </p><p>1.队列的尾指针是否等于头指针，如果是说明队列就一个哨兵节点或者没有初始化（头尾都是null）可以直接抢锁</p><p>2.队列的头指针的下一个节点是否为null或头节点的下一个节点就是本线程，如果下一个节点是null说明就一个哨兵节点。可以直接抢锁</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">  <span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">tryAcquire</span><span class="token punctuation">(</span><span class="token keyword">int</span> acquires<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">final</span> <span class="token class-name">Thread</span> current <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//                hasQueuedPredecessors()这个方法在非公平锁没有</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">hasQueuedPredecessors</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>                    <span class="token function">compareAndSetState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> acquires<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token function">setExclusiveOwnerThread</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>current <span class="token operator">==</span> <span class="token function">getExclusiveOwnerThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">int</span> nextc <span class="token operator">=</span> c <span class="token operator">+</span> acquires<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>nextc <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"Maximum lock count exceeded"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">setState</span><span class="token punctuation">(</span>nextc<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 并发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx进阶篇</title>
      <link href="/2022/11/12/nginx-jin-jie-pian/"/>
      <url>/2022/11/12/nginx-jin-jie-pian/</url>
      
        <content type="html"><![CDATA[<h1 id="1-扩容"><a href="#1-扩容" class="headerlink" title="1.扩容"></a>1.扩容</h1><h3 id="1-1集群化：会话管理"><a href="#1-1集群化：会话管理" class="headerlink" title="1.1集群化：会话管理"></a>1.1集群化：会话管理</h3><h4 id="Nginx高级负载均衡"><a href="#Nginx高级负载均衡" class="headerlink" title="Nginx高级负载均衡"></a>Nginx高级负载均衡</h4><p><strong>ip_hash</strong></p><ul><li><p>场景：中小型项目（单体架构）搭建集群 会有一个会话问题。也就是session存在于某一台服务器内。无法做到集群共享session。如果说加SpirngSession这种框架需要更改代码。而Nginx提供了会话保持ip_hash方案。让不更改代码也可以进行会话保持</p><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token directive"><span class="token keyword">upstream</span> lfy</span> <span class="token punctuation">&#123;</span><span class="token directive"><span class="token keyword">ip_hash</span></span><span class="token punctuation">;</span> <span class="token comment">#ip_hash会让每个客户端随机固定访问一个服务器。不会再像之前进行轮循访问从而保持了会话</span><span class="token directive"><span class="token keyword">server</span> 192.168.44.102</span> <span class="token punctuation">;</span><span class="token directive"><span class="token keyword">server</span> 192.168.44.103</span> <span class="token punctuation">;</span><span class="token punctuation">&#125;</span>     <span class="token directive"><span class="token keyword">server</span></span> <span class="token punctuation">&#123;</span>     <span class="token directive"><span class="token keyword">listen</span>       <span class="token number">80</span></span><span class="token punctuation">;</span>     <span class="token directive"><span class="token keyword">server_name</span>  www.lvfeiy.top</span><span class="token punctuation">;</span>       <span class="token directive"><span class="token keyword">location</span> /</span> <span class="token punctuation">&#123;</span>  <span class="token directive"><span class="token keyword">proxy_pass</span> http://lfy</span><span class="token punctuation">;</span>     <span class="token comment"># root   html;</span>     <span class="token punctuation">&#125;</span>       <span class="token directive"><span class="token keyword">location</span> ~*/(css|img|js)</span> <span class="token punctuation">&#123;</span>       <span class="token directive"><span class="token keyword">root</span>   /usr/local/nginx/html</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>总结：如果想快速搭建集群，也不想改代码。可以通过此方式保持会话。只需要加一台服务器即可</p></li></ul><p><strong>hash    $request_uri</strong></p><p>场景：资源分配不平均。当资源很大时，不能做到集群每个服务器都存在这个资源。可以使用此hash来让请求固定到一台服务器</p><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token directive"><span class="token keyword">upstream</span> lfy</span> <span class="token punctuation">&#123;</span><span class="token directive"><span class="token keyword">hash</span>    <span class="token variable">$request_uri</span></span><span class="token punctuation">;</span> <span class="token directive"><span class="token keyword">server</span> 192.168.44.102</span> <span class="token punctuation">;</span><span class="token directive"><span class="token keyword">server</span> 192.168.44.103</span> <span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>如果不知道会固定到哪台服务器。可以先进行访问测试。看看hash指向哪台服务器。然后把资源放到对应的服务器即可</li></ul><h1 id="2-KeepAlive"><a href="#2-KeepAlive" class="headerlink" title="2.KeepAlive"></a>2.KeepAlive</h1><p>在http协议header中可以看到当前连接状态</p><h4 id="测试工具charles"><a href="#测试工具charles" class="headerlink" title="测试工具charles"></a>测试工具charles</h4><p><strong>下载地址</strong></p><p><a href="https://www.charlesproxy.com/assets/release/4.6.2/charles-proxy-4.6.2-win64.msi?k=fc1457e312">https://www.charlesproxy.com/assets/release/4.6.2/charles-proxy-4.6.2-win64.msi?k=fc1457e312</a></p><p><strong>官网</strong></p><p><a href="https://www.charlesproxy.com/">https://www.charlesproxy.com</a></p><h4 id="什么时候使用？"><a href="#什么时候使用？" class="headerlink" title="什么时候使用？"></a>什么时候使用？</h4><p>明显的预知用户会在当前连接上有下一步操作</p><p>复用连接，有效减少握手次数，尤其是https建立一次连接开销会更大</p><h4 id="什么时候不用？"><a href="#什么时候不用？" class="headerlink" title="什么时候不用？"></a>什么时候不用？</h4><p>访问内联资源一般用缓存，不需要keepalive</p><p>长时间的tcp连接容易导致系统资源无效占用</p><h3 id="2-1）对客户端使用keepalive"><a href="#2-1）对客户端使用keepalive" class="headerlink" title="2.1）对客户端使用keepalive"></a>2.1）对客户端使用keepalive</h3><p><strong>keepalive_time</strong> </p><p>限制keepalive保持连接的最大时间</p><p>1.19.10新功能</p><p><strong>keepalive_timeout</strong></p><p>用于设置Nginx服务器与客户端保持连接的超时时间</p><p>用于踢出不活动连接</p><p>keepalive_timeout &#x3D; 0 即关闭</p><p><strong>send_timeout</strong></p><ul><li>send_timeout 10;  10秒</li><li>send_timeout 10 10; 同时下发一个header 告诉浏览器</li></ul><p>两次向客户端写操作之间的间隔 如果大于这个时间则关闭连接 默认60s</p><p><strong>此处有坑</strong>，注意耗时的同步操作有可能会丢弃用户连接</p><p>该设置表示Nginx服务器与客户端连接后，某次会话中服务器等待客户端响应超过10s，就会自动关闭连接。</p><p><strong>keepalive_request</strong></p><p>默认1000</p><p>单个连接中可处理的请求数</p><p><strong>keepalive_disable</strong></p><p>不对某些浏览器建立长连接</p><p>默认msie6</p><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token directive"><span class="token keyword">http</span></span> <span class="token punctuation">&#123;</span>    <span class="token directive"><span class="token keyword">include</span>       mime.types</span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">default_type</span>  application/octet-stream</span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">sendfile</span>        <span class="token boolean">on</span></span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">keepalive_timeout</span>  <span class="token number">65</span> <span class="token number">65</span></span><span class="token punctuation">;</span> <span class="token comment">#超过这个时间 没有活动，会让keepalive失效 </span>    <span class="token directive"><span class="token keyword">keepalive_time</span> <span class="token number">1h</span></span><span class="token punctuation">;</span> <span class="token comment"># 一个tcp连接总时长，超过之后 强制失效</span>      <span class="token directive"><span class="token keyword">send_timeout</span> <span class="token number">60</span></span><span class="token punctuation">;</span><span class="token comment"># 默认60s  此处有坑！！ 系统中 若有耗时操作，超过 send_timeout 强制断开连接。 注意：准备过程中，不是传输过程</span>    <span class="token directive"><span class="token keyword">keepalive_requests</span> <span class="token number">1000</span></span><span class="token punctuation">;</span>  <span class="token comment">#一个tcp复用中 可以并发接收的请求个数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2）对后端服务器使用keepalive"><a href="#2-2）对后端服务器使用keepalive" class="headerlink" title="2.2）对后端服务器使用keepalive"></a>2.2）对后端服务器使用keepalive</h3><p>首先需要配置使用http1.1协议。以便建立更高效的传输，默认使用http1.0，在http1.0中需要配置header才能</p><p>在Upstream中所配置的上游服务器默认都是用短连接，即每次请求都会在完成之后断开</p><h4 id="相关配置"><a href="#相关配置" class="headerlink" title="相关配置"></a>相关配置</h4><h5 id="upstream中配置"><a href="#upstream中配置" class="headerlink" title="upstream中配置"></a>upstream中配置</h5><p>配置</p><p><strong>keepalive 100;</strong></p><p>向上游服务器的保留连接数</p><p>**keepalive_timeout  **</p><p>连接保留时间</p><p> **keepalive_requests ** </p><p>一个tcp复用中 可以并发接收的请求个数</p><h5 id="配置示例"><a href="#配置示例" class="headerlink" title="配置示例"></a>配置示例</h5><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token directive"><span class="token keyword">http</span></span> <span class="token punctuation">&#123;</span>    <span class="token directive"><span class="token keyword">access_log</span>  /var/log/nginx/access.log  main</span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">sendfile</span>        <span class="token boolean">on</span></span><span class="token punctuation">;</span> <span class="token comment">#数据0拷贝</span>    <span class="token comment">#=======客户端配置===========</span>    <span class="token directive"><span class="token keyword">keepalive_timeout</span>  <span class="token number">65</span> <span class="token number">65</span></span><span class="token punctuation">;</span> <span class="token comment">#超过这个时间 没有活动，会让keepalive失效 </span>    <span class="token directive"><span class="token keyword">keepalive_time</span> <span class="token number">1h</span></span><span class="token punctuation">;</span> <span class="token comment"># 一个tcp连接总时长，超过之后 强制失效</span>    <span class="token directive"><span class="token keyword">send_timeout</span> <span class="token number">60</span></span><span class="token punctuation">;</span><span class="token comment"># 默认60s  此处有坑！！ 系统中 若有耗时操作，超过 send_timeout 强制断开连接。 注意：准备过程中，不是传输过程</span>    <span class="token directive"><span class="token keyword">keepalive_requests</span> <span class="token number">1000</span></span><span class="token punctuation">;</span>  <span class="token comment">#一个tcp复用中 可以并发接收的请求个数</span>        <span class="token comment">#======后端配置==================</span>    <span class="token directive"><span class="token keyword">upstream</span> lfy</span><span class="token punctuation">&#123;</span>        <span class="token directive"><span class="token keyword">keepalive</span> <span class="token number">100</span></span><span class="token punctuation">;</span> <span class="token comment">#向后端服务器的保留连接数</span>        <span class="token directive"><span class="token keyword">keepalive_timeout</span> <span class="token number">65</span></span><span class="token punctuation">;</span> <span class="token comment">#连接保留时间，默认65</span>        <span class="token directive"><span class="token keyword">keepalive_requests</span> <span class="token number">100</span></span><span class="token punctuation">;</span> <span class="token comment">#一个tcp复用中 可以并发接收的请求个数</span>        <span class="token directive"><span class="token keyword">proxy_http_version</span> 1.1</span><span class="token punctuation">;</span> <span class="token comment">#http版本默认1.0,配置1.1的性能更好</span>        <span class="token directive"><span class="token keyword">server</span> test.lvfeiy.top weight=9</span><span class="token punctuation">;</span> <span class="token comment">#weight负载均衡权重值</span>        <span class="token directive"><span class="token keyword">server</span> test.lvfeiy2.top weight=1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token directive"><span class="token keyword">server</span></span><span class="token punctuation">&#123;</span>    <span class="token directive"><span class="token keyword">listen</span>       <span class="token number">80</span></span><span class="token punctuation">;</span> <span class="token comment">#监听的端口号</span>    <span class="token directive"><span class="token keyword">server_name</span>  www.lvfeiy.top</span><span class="token punctuation">;</span><span class="token comment">#当前这台虚拟主机的主机名，通常是域名</span>    <span class="token directive"><span class="token keyword">location</span> /</span><span class="token punctuation">&#123;</span>        <span class="token directive"><span class="token keyword">proxy_pass</span> http://lfy        proxy_set_header Connection <span class="token string">""</span></span><span class="token punctuation">;</span> <span class="token comment">#默认使用http1.0协议，需要在request中增加”Connection： keep-alive“ header才能够支持，而HTTP1.1默认支持。 </span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token directive"><span class="token keyword">proxy_http_version</span> 1.1</span><span class="token punctuation">;</span>配置http版本号默认使用http1.0协议，需要在request中增加”Connection： <span class="token directive"><span class="token keyword">keep-alive“</span> header才能够支持，而HTTP1.1默认支持。proxy_set_header Connection <span class="token string">""</span></span><span class="token punctuation">;</span>清空close信息<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>因为配置了http1.1的版本，所以要建立长链接要清空Connection，因为默认使用的http协议是1.0版本的，1.0版本不支持长链接 里面Connection 的值是close；</p></li><li><p>nginx会将浏览器发送过来的请求头全部清空。转发后端收到的请求头是空的 可以使用proxy_set_header Host $host; 来把客户端的请求头重新设置进去发送给后端的请求头就会带有客户端中带的请求头</p></li></ul><h1 id="3-关于请求头丢失"><a href="#3-关于请求头丢失" class="headerlink" title="3.关于请求头丢失"></a>3.关于请求头丢失</h1><h4 id="setHeader"><a href="#setHeader" class="headerlink" title="setHeader"></a>setHeader</h4><p><strong>获取真实用户电脑ip</strong></p><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token directive"><span class="token keyword">proxy_set_header</span> X-Forwarded-For <span class="token variable">$remote_addr</span></span><span class="token punctuation">;</span><span class="token comment">#经过nginx反向代理之后的请求在后端服务器中会显示nginx的ip而原客户端ip会丢失，所以需要手动填充</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>获取真实用户请求的域名</strong></p><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token directive"><span class="token keyword">http</span></span><span class="token punctuation">&#123;</span>    <span class="token directive"><span class="token keyword">upstream</span> lfy</span><span class="token punctuation">&#123;</span>        server 111.11.11.1    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token directive"><span class="token keyword">server</span></span><span class="token punctuation">&#123;</span>    <span class="token directive"><span class="token keyword">location</span> /</span><span class="token punctuation">&#123;</span>        <span class="token directive"><span class="token keyword">proxy_set_header</span> Host <span class="token variable">$host</span></span><span class="token punctuation">;</span>        proxy_pass http://lfy    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">#Host在后端服务器获取时会显示lfy而不是真实的域名，需要手动填充Host。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="4-Gzip"><a href="#4-Gzip" class="headerlink" title="4.Gzip"></a>4.Gzip</h1><p>作用域 <code>http, server, location</code></p><p><strong>gzip on;</strong></p><p>开关，默认关闭</p><p><strong>gzip_buffers 32 4k|16 8k</strong></p><p>缓冲区大小</p><p><strong>gzip_comp_level</strong> 1；</p><p>压缩等级 1-9，数字越大压缩比越高</p><p><strong>gzip_http_version 1.1;</strong></p><p>使用gzip的最小版本</p><p><strong>gzip_min_length</strong></p><p>设置将被gzip压缩的响应的最小长度。 长度仅由“Content-Length”响应报头字段确定。</p><p><strong>gzip_proxied 多选</strong></p><p>off 为不做限制</p><p>作为反向代理时，针对上游服务器返回的头信息进行压缩</p><p>expired - 启用压缩，如果header头中包含 “Expires” 头信息<br>no-cache - 启用压缩，如果header头中包含 “Cache-Control:no-cache” 头信息<br>no-store - 启用压缩，如果header头中包含 “Cache-Control:no-store” 头信息<br>private - 启用压缩，如果header头中包含 “Cache-Control:private” 头信息<br>no_last_modified - 启用压缩,如果header头中不包含 “Last-Modified” 头信息<br>no_etag - 启用压缩 ,如果header头中不包含 “ETag” 头信息<br>auth - 启用压缩 , 如果header头中包含 “Authorization” 头信息<br>any - 无条件启用压缩</p><p><strong>gzip_vary on;</strong></p><p>增加一个header，适配老的浏览器 <code>Vary: Accept-Encoding</code></p><p><strong>gzip_types</strong></p><p>哪些mime类型的文件进行压缩</p><p><strong>gzip_disable</strong></p><p>禁止某些浏览器使用gzip</p><p><strong>完整实例</strong></p><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token directive"><span class="token keyword">gzip</span> <span class="token boolean">on</span></span><span class="token punctuation">;</span><span class="token directive"><span class="token keyword">gzip_buffers</span> <span class="token number">16</span> <span class="token number">8k</span></span><span class="token punctuation">;</span><span class="token directive"><span class="token keyword">gzip_comp_level</span> <span class="token number">6</span></span><span class="token punctuation">;</span><span class="token directive"><span class="token keyword">gzip_http_version</span> 1.1</span><span class="token punctuation">;</span><span class="token directive"><span class="token keyword">gzip_min_length</span> <span class="token number">256</span></span><span class="token punctuation">;</span><span class="token directive"><span class="token keyword">gzip_proxied</span> any</span><span class="token punctuation">;</span><span class="token directive"><span class="token keyword">gzip_vary</span> <span class="token boolean">on</span></span><span class="token punctuation">;</span><span class="token directive"><span class="token keyword">gzip_types</span> text/plain application/x-javascript text/css application/xml</span><span class="token punctuation">;</span><span class="token directive"><span class="token keyword">gzip_types</span>  text/xml application/xml application/atom+xml application/rss+xml application/xhtml+xml image/svg+xml  text/javascript application/javascript application/x-javascript  text/x-json application/json application/x-web-app-manifest+json  text/css text/plain text/x-component  font/opentype application/x-font-ttf application/vnd.ms-fontobject  image/x-icon</span><span class="token punctuation">;</span><span class="token directive"><span class="token keyword">gzip_disable</span> <span class="token string">"MSIE [1-6]\.(?!.*SV1)"</span></span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token directive"><span class="token keyword">HTTP/1.1</span> <span class="token number">200</span>Server: nginx/1.21.6Date: Wed, <span class="token number">18</span> May <span class="token number">2022</span> 17:42:35 GMTContent-Type: text/html</span><span class="token punctuation">;</span>charset=utf-8Content-Length: 7832Connection: keep-aliveKeep-Alive: timeout=65<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="ngx-http-gunzip-module"><a href="#ngx-http-gunzip-module" class="headerlink" title="ngx_http_gunzip_module"></a>ngx_http_gunzip_module</h3><p>帮助不支持gzip的客户端解压本地文件</p><h4 id="http-gzip-static-module"><a href="#http-gzip-static-module" class="headerlink" title="http_gzip_static_module"></a>http_gzip_static_module</h4><p>需要重新编译nginx</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./configure --with-http_gzip_static_module<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token directive"><span class="token keyword">gzip_static</span> <span class="token boolean">on</span></span><span class="token punctuation">;</span> <span class="token comment">#on开启 off关闭 always不考虑对方客户端是否支持gzip强制发送gzip格式。on的话会判断对方客户端是否支持gzip，不支持就发送源文件</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>需要将文件提前压缩。</li><li>如果是on的话需要保留源文件和gzip格式的文件。如果是always的话可以把源文件全部删除，只保留gzip文件 ，配合gunzip使用。</li></ul><h1 id="5-合并客户端请求"><a href="#5-合并客户端请求" class="headerlink" title="5.合并客户端请求"></a>5.合并客户端请求</h1><p>Concat模块</p><p>Tengine</p><p>Nginx官方介绍</p><p><a href="https://www.nginx.com/resources/wiki/modules/concat/">https://www.nginx.com/resources/wiki/modules/concat/</a></p><p>git地址</p><p><a href="https://github.com/alibaba/nginx-http-concat">https://github.com/alibaba/nginx-http-concat</a></p><ul><li>安装</li></ul><p>下载源码解压缩编译安装</p><ul><li>配置</li></ul><pre class="line-numbers language-none"><code class="language-none">concat on;concat_max_files 30;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>??xxx1.css,xxx2.css<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheel<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="6-多级缓存"><a href="#6-多级缓存" class="headerlink" title="6.多级缓存"></a>6.多级缓存</h1><p><strong>缓存有两类</strong></p><ol><li>内存缓存：最快</li><li>磁盘缓存（disk cache）:轻微延迟</li></ol><h3 id="6-1强制缓存与协商缓存"><a href="#6-1强制缓存与协商缓存" class="headerlink" title="6.1强制缓存与协商缓存"></a>6.1<strong>强制缓存与协商缓存</strong></h3><ul><li><p><strong>协商缓存(默认开启)</strong></p><ul><li>第一次请求加载页面时，nginx会下发两个头参数，last-modified代表文件最后修改的时间，etag表示文件哈希值</li></ul><pre class="line-numbers language-none"><code class="language-none">last-modified: Mon, 16 Jan 2023 06:39:53 GMTetag: W&#x2F;&quot;7faa2292953c2f78f0f88c35c123c841&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>​       当文件进行修改时，最后修改时间和文件哈希值都会发生改变</p><ul><li>然后在次刷新时，浏览器会带上两个头，去nginx中比对，如果说哈希值和最后修改时间都没发生变化，说明文件没有发生修改，就直接从本地文件中加载缓存。</li></ul><pre class="line-numbers language-none"><code class="language-none">if-modified-since: Mon, 16 Jan 2023 06:39:53 GMTif-none-match: W&#x2F;&quot;7faa2292953c2f78f0f88c35c123c841&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li><p><strong>关闭协商缓存</strong></p><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token directive"><span class="token keyword">location</span> /</span><span class="token punctuation">&#123;</span><span class="token directive"><span class="token keyword">etag</span> <span class="token boolean">off</span></span><span class="token punctuation">;</span><span class="token directive"><span class="token keyword">if_modifed_since</span> <span class="token boolean">off</span></span><span class="token punctuation">;</span> <span class="token comment">#或add_header Last-Modifed "";</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p><strong>强制缓存</strong></p></li></ul><h5 id="cache-control"><a href="#cache-control" class="headerlink" title="cache-control"></a><strong>cache-control</strong></h5><p>http1.1的规范，使用max-age表示文件可以在浏览器中缓存的时间以秒为单位</p><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token directive"><span class="token keyword">location</span> /</span><span class="token punctuation">&#123;</span><span class="token directive"><span class="token keyword">add_header</span> cache-control <span class="token string">"max-stale:300"</span></span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>标记</th><th>类型</th><th>功能</th></tr></thead><tbody><tr><td>public</td><td>响应头</td><td>响应的数据可以被缓存，客户端和代理层都可以缓存</td></tr><tr><td>private</td><td>响应头</td><td>可私有缓存，客户端可以缓存，代理层不能缓存（CDN，proxy_pass）</td></tr><tr><td>no-cache</td><td>请求头</td><td>可以使用本地缓存，但是必须发送请求到服务器回源验证</td></tr><tr><td>no-store</td><td>请求和响应</td><td>应禁用缓存</td></tr><tr><td>max-age</td><td>请求和响应</td><td>文件可以在浏览器中缓存的时间以秒为单位</td></tr><tr><td>s-maxage</td><td>请求和响应</td><td>用户代理层缓存，CDN下发，当客户端数据过期时会重新校验</td></tr><tr><td>max-stale</td><td>请求和响应</td><td>缓存最大使用时间，如果缓存过期，但还在这个时间范围内则可以使用缓存数据</td></tr><tr><td>min-fresh</td><td>请求和响应</td><td>缓存最小使用时间，</td></tr><tr><td>must-revalidate</td><td>请求和响应</td><td>当缓存过期后，必须回源重新请求资源。比no-cache更严格。因为HTTP 规范是允许客户端在某些特殊情况下直接使用过期缓存的，比如校验请求发送失败的时候。那么带有must-revalidate的缓存必须校验，其他条件全部失效。</td></tr><tr><td>proxy-revalidate</td><td>请求和响应</td><td>和must-revalidate类似，只对CDN这种代理服务器有效，客户端遇到此头，需要回源验证</td></tr><tr><td>stale-while-revalidate</td><td>响应</td><td>表示在指定时间内可以先使用本地缓存，后台进行异步校验</td></tr><tr><td>stale-if-error</td><td>响应</td><td>在指定时间内，重新验证时返回状态码为5XX的时候，可以用本地缓存</td></tr><tr><td>only-if-cached</td><td>响应</td><td>那么只使用缓存内容，如果没有缓存 则504 getway timeout</td></tr></tbody></table><p>在浏览器和服务器端验证文件是否过期的时候，浏览器在二次请求的时候会携带IF-Modified-Since属性</p><h4 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h4><h5 id="cache-control-expires-强制缓存"><a href="#cache-control-expires-强制缓存" class="headerlink" title="cache-control expires 强制缓存"></a>cache-control expires 强制缓存</h5><p>页面首次打开，直接读取缓存数据，刷新，会向服务器发起请求</p><h5 id="etag-lastmodify-协商缓存"><a href="#etag-lastmodify-协商缓存" class="headerlink" title="etag lastmodify  协商缓存"></a>etag lastmodify  协商缓存</h5><p>当哈希值和最后修改时间，没发生变化 返回304 不发送数据</p><h4 id="浏览器缓存原则"><a href="#浏览器缓存原则" class="headerlink" title="浏览器缓存原则"></a>浏览器缓存原则</h4><ul><li><p>多级集群负载时last-modified（文件最后修改时间）必须保持一致</p></li><li><p>还有一些场景下我们希望禁用浏览器缓存。比如轮训api上报数据数据</p></li><li><p>浏览器缓存很难彻底禁用，大家的做法是加版本号，随机数等方法。</p></li><li><p>只缓存200响应头的数据，像3XX这类跳转的页面不需要缓存。</p></li><li><p>对于js，css这类可以缓存很久的数据，可以通过加版本号的方式更新内容</p></li><li><p>不需要强一致性的数据，可以缓存几秒</p></li><li><p>异步加载的接口数据，可以使用ETag来校验。</p></li><li><p>在服务器添加Server头，有利于排查错误</p></li><li><p>分为手机APP和Client以及是否遵循http协议</p></li><li><p>在没有联网的状态下可以展示数据</p></li><li><p>流量消耗过多</p></li><li><p>提前下发  避免秒杀时同时下发数据造成流量短时间暴增</p></li><li><p>兜底数据 在服务器崩溃和网络不可用的时候展示</p></li><li><p>临时缓存  退出即清理</p></li><li><p>固定缓存  展示框架这种，可能很长时间不会更新，可用随客户端下发</p><ul><li><strong>首页</strong>有的时候可以看做是框架 应该禁用缓存，以保证加载的资源都是最新的</li></ul></li><li><p>父子连接 页面跳转时有一部分内容不需要重新加载，可用从父菜单带过来</p></li><li><p>预加载     某些逻辑可用判定用户接下来的操作，那么可用异步加载那些资源</p></li><li><p>漂亮的加载过程 异步加载 先展示框架，然后异步加载内容，避免主线程阻塞</p></li></ul><h3 id=""><a href="#" class="headerlink" title=""></a></h3>]]></content>
      
      
      <categories>
          
          <category> Nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx</title>
      <link href="/2022/11/12/nginx/"/>
      <url>/2022/11/12/nginx/</url>
      
        <content type="html"><![CDATA[<h1 id="1-配置文件"><a href="#1-配置文件" class="headerlink" title="1.配置文件"></a>1.配置文件</h1><h3 id="nginx-conf"><a href="#nginx-conf" class="headerlink" title="nginx.conf"></a>nginx.conf</h3><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token directive"><span class="token keyword">user</span>  nginx</span><span class="token punctuation">;</span><span class="token directive"><span class="token keyword">worker_processes</span>  <span class="token number">1</span></span><span class="token punctuation">;</span> <span class="token comment">#默认为1表示开启一个进程</span><span class="token directive"><span class="token keyword">error_log</span>  /var/log/nginx/error.log warn</span><span class="token punctuation">;</span><span class="token directive"><span class="token keyword">pid</span>        /var/run/nginx.pid</span><span class="token punctuation">;</span><span class="token directive"><span class="token keyword">events</span></span> <span class="token punctuation">&#123;</span>    <span class="token directive"><span class="token keyword">worker_connections</span>  <span class="token number">1024</span></span><span class="token punctuation">;</span><span class="token comment">#每一个进程可以创建多少连接</span><span class="token punctuation">&#125;</span><span class="token directive"><span class="token keyword">http</span></span> <span class="token punctuation">&#123;</span>    <span class="token directive"><span class="token keyword">include</span>       /etc/nginx/mime.types</span><span class="token punctuation">;</span> <span class="token comment">#把别的配置文件引入到这个主配置文件里，mime.type是一个解析文件，告诉浏览器什么样的后缀名需要用什么格式解析</span>    <span class="token directive"><span class="token keyword">default_type</span>  application/octet-stream</span><span class="token punctuation">;</span> <span class="token comment">#如果说mime.type中不包含的类型，则使用application/octet-stream这种流的形式传输给浏览器</span>    <span class="token directive"><span class="token keyword">log_format</span>  main  <span class="token string">'<span class="token variable">$remote_addr</span> - <span class="token variable">$remote_user</span> [<span class="token variable">$time_local]</span> "<span class="token variable">$request</span>" '</span>                      <span class="token string">'<span class="token variable">$status</span> <span class="token variable">$body_bytes_sent</span> "<span class="token variable">$http_referer</span>" '</span>                      <span class="token string">'"<span class="token variable">$http_user_agent</span>" "<span class="token variable">$http_x_forwarded_for</span>"'</span></span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">access_log</span>  /var/log/nginx/access.log  main</span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">sendfile</span>        <span class="token boolean">on</span></span><span class="token punctuation">;</span> <span class="token comment">#数据0拷贝</span>    <span class="token comment">#tcp_nopush     on;</span>    <span class="token directive"><span class="token keyword">keepalive_timeout</span>  <span class="token number">65</span></span><span class="token punctuation">;</span><span class="token comment">#保持连接，超时时间</span>    <span class="token comment">#gzip  on;</span>    <span class="token directive"><span class="token keyword">include</span> /etc/nginx/conf.d/*.conf</span><span class="token punctuation">;</span> <span class="token comment">#把/etc/nginx/conf.d目录下所有conf结尾的配置文件加载进来</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>sendfile</strong>：数据0拷贝<ul><li>如果把这个关了，列如一个用户来下载一个视频，nginx需要先把视频读取到内存中，然后复制给网络接口，通过网络接口，发送给客户端。</li><li>如果开了这个，nginx不执行读取内存这个步骤，直接给网络接口发送一个信号sendfile(文件描述符)，网络接口读取这个文件直接发送给客户端</li></ul></li></ul><p><strong>etc&#x2F;nginx&#x2F;conf.d&#x2F;default.conf</strong></p><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token comment">#在上述主配置文件中通过这个配置include /etc/nginx/conf.d/*.conf;，引入了这个default.conf</span><span class="token comment">#一个虚拟主机server和多个虚拟主机都可以配置进conf，以端口号区分主机。server就是一个虚拟主机的配置</span><span class="token directive"><span class="token keyword">server</span></span> <span class="token punctuation">&#123;</span>    <span class="token directive"><span class="token keyword">listen</span>       <span class="token number">80</span></span><span class="token punctuation">;</span> <span class="token comment">#监听的端口号</span>    <span class="token directive"><span class="token keyword">server_name</span>  localhost</span><span class="token punctuation">;</span><span class="token comment">#当前这台虚拟主机的主机名，通常是域名</span>    <span class="token comment">#charset koi8-r;</span>    <span class="token comment">#access_log  /var/log/nginx/log/host.access.log  main;</span><span class="token comment">#location /可以理解为域名后面跟的路径。也就是uri(资源路径) 为/则进入此规则</span>    <span class="token directive"><span class="token keyword">location</span> /</span> <span class="token punctuation">&#123;</span>    <span class="token comment">#当路径匹配进来后，root就代表了让这个请求到/usr/share/nginx/html这个路径去寻找资源  而proxy_pass 代表让请求转到某某域名下</span>        <span class="token directive"><span class="token keyword">root</span>   /usr/share/nginx/html</span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">index</span>  index.html index.htm</span><span class="token punctuation">;</span> <span class="token comment">#默认页</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">#error_page  404              /404.html;</span>    <span class="token comment"># redirect server error pages to the static page /50x.html</span>    <span class="token comment">#</span>    <span class="token directive"><span class="token keyword">error_page</span>   <span class="token number">500</span> <span class="token number">502</span> <span class="token number">503</span> <span class="token number">504</span>  /50x.html</span><span class="token punctuation">;</span> <span class="token comment">#如果说访问出错了，出现了这些错误码，则会跳转到 /50.html这个页面</span>    <span class="token comment">#而/50.html这个页面会到 /usr/share/nginx/html目录下寻找/50x.html</span>    <span class="token directive"><span class="token keyword">location</span> = /50x.html</span> <span class="token punctuation">&#123;</span>        <span class="token directive"><span class="token keyword">root</span>   /usr/share/nginx/html</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment"># proxy the PHP scripts to Apache listening on 127.0.0.1:80</span>    <span class="token comment">#</span>    <span class="token comment">#location ~ \.php$ &#123;</span>    <span class="token comment">#    proxy_pass   http://127.0.0.1;</span>    <span class="token comment">#&#125;</span>    <span class="token comment"># pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span>    <span class="token comment">#</span>    <span class="token comment">#location ~ \.php$ &#123;</span>    <span class="token comment">#    root           html;</span>    <span class="token comment">#    fastcgi_pass   127.0.0.1:9000;</span>    <span class="token comment">#    fastcgi_index  index.php;</span>    <span class="token comment">#    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span>    <span class="token comment">#    include        fastcgi_params;</span>    <span class="token comment">#&#125;</span>    <span class="token comment"># deny access to .htaccess files, if Apache's document root</span>    <span class="token comment"># concurs with nginx's one</span>    <span class="token comment">#</span>    <span class="token comment">#location ~ /\.ht &#123;</span>    <span class="token comment">#    deny  all;</span>    <span class="token comment">#&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="2-虚拟主机与域名解析"><a href="#2-虚拟主机与域名解析" class="headerlink" title="2.虚拟主机与域名解析"></a>2.虚拟主机与域名解析</h1><p>现在很多服务器的性能非常好，以前一个服务器只能对应一个域名，非常的浪费资源。现在有了nginx之后，我们可以使用多个域名同时解析到同一个服务器的ip。我们只需要在nginx中配置多个虚拟主机，设置规则判断是通过哪个域名来访问我们服务器，让这些请求进入到对应的资源目录下即可。</p><h3 id="2-1域名"><a href="#2-1域名" class="headerlink" title="2.1域名"></a>2.1域名</h3><p><img src="https://lfymall.oss-cn-fuzhou.aliyuncs.com/study/yuming.png"></p><ul><li>@表示解析域名本身</li><li>*表示任意二级域名，列如，<a href="http://www.lvfeiy.top,test.lvfeiy.top等/">www.lvfeiy.top，test.lvfeiy.top等</a></li></ul><h3 id="2-2虚拟主机"><a href="#2-2虚拟主机" class="headerlink" title="2.2虚拟主机"></a>2.2虚拟主机</h3><ul><li>一个server_name  可以填写多个域名，可以使用通配符,列如</li></ul><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token directive"><span class="token keyword">server</span></span> <span class="token punctuation">&#123;</span>    <span class="token directive"><span class="token keyword">listen</span>       <span class="token number">80</span></span><span class="token punctuation">;</span> <span class="token comment">#监听的端口号</span>    <span class="token directive"><span class="token keyword">server_name</span>  *.lfymall.com www.lfy.com</span> <span class="token punctuation">;</span><span class="token comment">#当前这台虚拟主机的主机名，通常是域名</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-2-1）location匹配规则"><a href="#2-2-1）location匹配规则" class="headerlink" title="2.2.1）location匹配规则"></a><strong>2.2.1）location匹配规则</strong></h4><table><thead><tr><th>模式</th><th>含义</th></tr></thead><tbody><tr><td>location &#x3D; &#x2F;uri</td><td>精确匹配，只有完全匹配上才能生效</td></tr><tr><td>location ^~ &#x2F;uri</td><td>对url路径进行前缀匹配，如果不带^<del>匹配优先级会在正则匹配之后，带^</del>则会优先于正则匹配</td></tr><tr><td>location ~ pattern</td><td>表示区分大小写的正则匹配</td></tr><tr><td>location ~* pattern</td><td>表示不区分大小写的正则匹配</td></tr><tr><td>location &#x2F;uri</td><td>不带任何修饰符，也表示前缀匹配，但是匹配优先级在正则之后</td></tr><tr><td>location &#x2F;</td><td>通用通配符，任何未匹配到其他location规则的请求都会匹配到 &#x2F;，相当于默认</td></tr></tbody></table><h4 id="2-2-2）location匹配优先级"><a href="#2-2-2）location匹配优先级" class="headerlink" title="2.2.2）location匹配优先级"></a>2.2.2）location匹配优先级</h4><ol><li>精确匹配 &#x3D; </li><li>前缀匹配 ^~</li><li>按文件中顺序的正则匹配</li><li>匹配不带任何修饰符的前缀匹配</li><li>交给 &#x2F; 通用匹配</li></ol><p><strong>匹配示例</strong></p><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token comment">#精确匹配</span><span class="token directive"><span class="token keyword">location</span> = /</span> <span class="token punctuation">&#123;</span>    <span class="token directive"><span class="token keyword">echo</span> <span class="token string">"规则A"</span></span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token directive"><span class="token keyword">location</span> = /login</span> <span class="token punctuation">&#123;</span>   <span class="token directive"><span class="token keyword">echo</span> <span class="token string">"规则B"</span></span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">#优先于正则的前缀匹配</span><span class="token directive"><span class="token keyword">location</span> ^~ /static/</span> <span class="token punctuation">&#123;</span>   <span class="token directive"><span class="token keyword">echo</span> <span class="token string">"规则C"</span></span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token directive"><span class="token keyword">location</span> ^~ /static/files</span> <span class="token punctuation">&#123;</span>    <span class="token directive"><span class="token keyword">echo</span> <span class="token string">"规则X"</span></span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">#正则匹配（区分大小写）</span><span class="token directive"><span class="token keyword">location</span> ~ \.(gif|jpg|png|js|css)$</span> <span class="token punctuation">&#123;</span>   <span class="token directive"><span class="token keyword">echo</span> <span class="token string">"规则D"</span></span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">#正则匹配（不区分大小写）</span><span class="token directive"><span class="token keyword">location</span> ~* \.png$</span> <span class="token punctuation">&#123;</span>   <span class="token directive"><span class="token keyword">echo</span> <span class="token string">"规则E"</span></span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">#前缀匹配（不加^~优先级低于正则匹配）</span><span class="token directive"><span class="token keyword">location</span> /img</span> <span class="token punctuation">&#123;</span>    <span class="token directive"><span class="token keyword">echo</span> <span class="token string">"规则Y"</span></span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">#通用匹配（以上规则匹配不到时进入此默认规则）</span><span class="token directive"><span class="token keyword">location</span> /</span> <span class="token punctuation">&#123;</span>   <span class="token directive"><span class="token keyword">echo</span> <span class="token string">"规则F"</span></span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-2-3）定义规则"><a href="#2-2-3）定义规则" class="headerlink" title="2.2.3）定义规则"></a>2.2.3）定义规则</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">location / <span class="token punctuation">&#123;</span>   <span class="token comment">#当路径匹配进来后，root就代表了让这个请求到/usr/share/nginx/html这个路径去寻找资源  而proxy_pass 代表让请求转到某某域名下</span>       root   /usr/share/nginx/html<span class="token punctuation">;</span>       index  index.html index.htm<span class="token punctuation">;</span> <span class="token comment">#默认页</span>   <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>root :表示去哪里寻找资源</li><li>index表示默认页名字，如果请求 &#x2F;进入此规则，意思就是去&#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html目录下找index.html或index.htm</li></ul><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token directive"><span class="token keyword">http</span></span> <span class="token punctuation">&#123;</span>    <span class="token comment">#upstream 定义一组负载均衡地址</span>    <span class="token directive"><span class="token keyword">upstream</span> lfymall</span><span class="token punctuation">&#123;</span>         <span class="token directive"><span class="token keyword">server</span> 192.168.1.4</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span>    <span class="token directive"><span class="token keyword">include</span> /etc/nginx/conf.d/*.conf</span><span class="token punctuation">;</span> <span class="token directive"><span class="token keyword">server</span></span> <span class="token punctuation">&#123;</span>     <span class="token directive"><span class="token keyword">isten</span>        <span class="token number">80</span>     server_name    lfymall.com location /test</span> <span class="token punctuation">&#123;</span>        proxy_pass http://baidu.com  <span class="token punctuation">&#125;</span>  <span class="token directive"><span class="token keyword">location</span> /test2</span> <span class="token punctuation">&#123;</span>        proxy_pass http://lfymall  <span class="token punctuation">&#125;</span>  <span class="token directive"><span class="token keyword">location</span> /test3</span><span class="token punctuation">&#123;</span>        proxy_pass http://192.168.158.139  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>upstream 表示定义一组负载均衡地址，名字自定义</p></li><li><p>proxy_pass 表示请求进入之后跳转到某个地址，这个地址可以是一个网址，也可以是ip <a href="http://192.222.22.xx/">http://192.222.22.xx</a>  也可以是一个使用upstream自定义一组负载均衡的地址</p><ul><li>需要注意的是，如果跟上的地址是顶层域名，也就是例如<a href="http://lvfeiyt.top/">http://lvfeiyt.top</a>  不包含前缀的域名，会重定向。如果是二级域名则不会。发生重定向后，后面的请求将不走nginx</li></ul></li></ul><h3 id="2-3负载均衡"><a href="#2-3负载均衡" class="headerlink" title="2.3负载均衡"></a>2.3负载均衡</h3><p>上述所说upstream 定义一组需要负载均衡的地址</p><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token directive"><span class="token keyword">upstream</span> lfymall</span><span class="token punctuation">&#123;</span>     <span class="token directive"><span class="token keyword">server</span> 192.168.1.4</span> <span class="token punctuation">;</span>     <span class="token directive"><span class="token keyword">server</span> 192.168.2.4</span> <span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token directive"><span class="token keyword">upstream</span> lfymall1</span><span class="token punctuation">&#123;</span>     <span class="token directive"><span class="token keyword">server</span> 192.168.1.4 weight=8</span><span class="token punctuation">;</span>     <span class="token directive"><span class="token keyword">server</span> 192.168.2.4 weight=2</span><span class="token punctuation">;</span>     <span class="token directive"><span class="token keyword">server</span> 192.168.3.4 weight=1 backup</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>默认什么都不加为轮循</li><li>weight：权重，也就是负载均衡访问到目标ip的。比例，访问192.168.1.4的比例次数概率为8&#x2F;8+2</li><li>backup：备用机，正常情况下不负载均衡到此ip。当192.168.2.4宕机时启动备用服务器<ul><li>实际上backup用的比较少，因为如果说服务器出现宕机，备用机的内容和主应用服务器应该是相同的，那么就算备用机顶上去也会出现各种原因引发的宕机</li></ul></li></ul><p><strong>以下属于只需了解的负载均衡规则</strong></p><ul><li>ip_hash：根据客户端的ip地址转发同一台服务器，可以保持会话。目前分布式session状态问题已经被springSession配合redis解决，而且主流趋势也趋向于使用jwt token等方式，所以用的比较少</li><li>least_conn：最少连接访问</li><li>url_hash：根据用户访问的url定向转发请求</li><li>fair：根据后端服务器的响应时间转发请求，<strong>需要安装插件</strong>，容易流量倾斜，所以也用的少</li></ul><h3 id="2-4动静分离"><a href="#2-4动静分离" class="headerlink" title="2.4动静分离"></a>2.4动静分离</h3><p>首先需要让请求经过nginx进行反向代理，也就是 客户端 - -&gt; nginx 转发–&gt; tomcat服务器。当请求经过nginx时，写一个匹配规则，如果说是一个静态资源的请求，让这个请求直接去nginx的某个目录寻找资源</p><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token directive"><span class="token keyword">server</span></span> <span class="token punctuation">&#123;</span>    <span class="token directive"><span class="token keyword">listen</span>       <span class="token number">80</span></span><span class="token punctuation">;</span> <span class="token comment">#监听的端口号</span>    <span class="token directive"><span class="token keyword">server_name</span>  www.lvfeiy.top</span><span class="token punctuation">;</span><span class="token comment">#当前这台虚拟主机的主机名，通常是域名</span><span class="token directive"><span class="token keyword">location</span> /static</span><span class="token punctuation">&#123;</span><span class="token directive"><span class="token keyword">root</span> /usr/share/nginx/html</span><span class="token punctuation">;</span> <span class="token comment">#让静态请求进入/usr/share/nginx/html寻找资源</span><span class="token punctuation">&#125;</span>    <span class="token directive"><span class="token keyword">location</span> /</span> <span class="token punctuation">&#123;</span>        <span class="token directive"><span class="token keyword">root</span>   /usr/share/nginx/html</span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">index</span>  index.html index.htm</span><span class="token punctuation">;</span> <span class="token comment">#默认页</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>比如一个tomcat服务器的地址为192.111.222.33 ，nginx服务器的地址为110.110.11.11。那么我只需要解析一个域名<a href="http://www.lvfeiy.top指向nginx的ip./">www.lvfeiy.top指向nginx的ip。</a></p><p>nginx在设定规则，是转发给tomcat服务器。还是直接让请求进入nginx目录寻找资源。</p><p>如果发起的请求是一个动态api请求，我写一个匹配规则proxy_pass  <a href="http://192.111.222.33/">http://192.111.222.33</a> 让这个请求转发给tomcat服务器。</p><p>如果发起的请求是一个静态请求，我写一个匹配规则 root &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html 让请求直接从nginx服务器中寻找资源，而不去tomcat服务器中寻找。</p></li><li><p>这个请求会自己根据路径寻找资源。比如</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"/static/js/xxx.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>sctipt<span class="token operator">></span><span class="token comment">//那么/代表根路径，会自动带上当前的域名或ip。正常情况下这个请求地址应该是http://192.111.222.33/static/js/xxx.js。而我们是通过nginx反向代理指向的请求</span><span class="token comment">//也就是说我们通过htpp://www.lvfeiy.top反向代理到了192.111.222.33服务器。所以地址为http:/www.lvfeiy.top/static/js/xxx.js。根据这个路径写一个前缀匹配规则location /static。请求会进入/usr/share/nginx/html寻找 /static/js/xxx.js  。也就是这样不再去tomcat中寻找资源，直接从nginx中返回。完成了动静分离</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p><strong>nginx的反向代理只会转发ip。也就是只会改变请求对应ip地址。然后拼接上原路径</strong></p></li></ul><h3 id="2-5UrlRewrite"><a href="#2-5UrlRewrite" class="headerlink" title="2.5UrlRewrite"></a><strong>2.5UrlRewrite</strong></h3><p>用于隐藏后端api接口</p><p><strong>rewrite</strong>语法格式及参数语法</p><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx">    <span class="token directive"><span class="token keyword">location</span> /spitPage</span> <span class="token punctuation">&#123;</span>      <span class="token directive"><span class="token keyword">rewrite</span> ^/([0-9]+).html$ /spitPage?pageNum=<span class="token variable">$1</span> break</span><span class="token punctuation">;</span> <span class="token comment">#$1代表匹配第一个正则规则的值</span>      proxy_pass http://192.111.11.11    <span class="token punctuation">&#125;</span><span class="token comment"># 原本的后端接口为地址为spitPage 参数为pageNum 。通过rewrite写一个正则表达式规则，可以让地址变为http://192.111.11.11/数字.html。相当于取了一个别名。让nginx帮我们转发。隐藏了后端真实api 。</span>flag标记说明：last <span class="token comment">#本条规则匹配完成后，继续向下匹配新的location URI规则</span>break <span class="token comment">#本条规则匹配完成即终止，不再匹配后面的任何规则</span>redirect <span class="token comment">#返回302临时重定向，浏览器地址会显示跳转后的URL地址</span>permanent <span class="token comment">#返回301永久重定向，浏览器地址栏会显示跳转后的URL地址</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-6防盗链"><a href="#2-6防盗链" class="headerlink" title="2.6防盗链"></a>2.6防盗链</h3><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx">    <span class="token directive"><span class="token keyword">location</span> /test</span> <span class="token punctuation">&#123;</span>        <span class="token directive"><span class="token keyword">valid_referers</span> www.lvfeiy.top</span><span class="token punctuation">;</span> <span class="token comment">#设置可以访问静态资源的Referer</span>        <span class="token directive"><span class="token keyword">if</span> (<span class="token variable">$invalid_referer</span>)</span> <span class="token punctuation">&#123;</span>        <span class="token directive"><span class="token keyword">return</span> <span class="token number">403</span></span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>               <span class="token directive"><span class="token keyword">root</span>   /usr/share/nginx/html</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token comment">#valid_referers none www.lvfeiy.top</span>none， 如果Referer 头域不存在也可以访问。但是如果有referer就必须正确，否则无法访问。blocked，检测 Referer 头域的值被防火墙或者代理服务器删除或伪装的情况。这种情况该头域的值不以“http://” 或 “https://” 开头。server_names ，设置一个或多个 URL ，检测 Referer 头域的值是否是这些 URL 中的某一个。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>当使用动静分离时。配置valid_referers <a href="http://www.lvfeiy.top/">www.lvfeiy.top</a> 。可以防止用户直接通过浏览器 <a href="http://www.lvfeiyt.top/xxx/xxx.jpg%E8%BF%99%E7%A7%8D%E5%BD%A2%E5%BC%8F%E8%AE%BF%E9%97%AE%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90">http://www.lvfeiyt.top/xxx/xxx.jpg这种形式访问静态资源</a></p><p>而通过反向代理的前端展示图片不受影响</p></li><li><p>原理：比如打开<a href="http://www.lvfeiy.top这个网址.然后页面初始化的时候加载静态资源.发送给nginx的静态资源请求中会带有一个referer/">www.lvfeiy.top这个网址。然后页面初始化的时候加载静态资源。发送给nginx的静态资源请求中会带有一个Referer</a>: <a href="http://www.lvfeiy.top/">http://www.lvfeiy.top</a> 表示当前打开网页的域名。而如果是直接通过<a href="http://www.lvfeiy.top/static/xxx.jpg%E8%BF%99%E7%A7%8D%E5%BD%A2%E5%BC%8F%E7%9A%84%E8%AE%BF%E9%97%AE%E6%98%AF%E4%B8%8D%E4%BC%9A%E5%B8%A6%E6%9C%89Referer%E8%AF%B7%E6%B1%82%E5%A4%B4%E7%9A%84%E3%80%82">http://www.lvfeiy.top/static/xxx.jpg这种形式的访问是不会带有Referer请求头的。</a></p><p>或是别人的网页放置了我们的资源。比如别人网页是<a href="http://www.test.com/%E3%80%82%E9%A1%B5%E9%9D%A2%E5%88%9D%E5%A7%8B%E5%8C%96%E5%8F%91%E9%80%81%E8%AF%B7%E6%B1%82%E7%BB%99%E6%88%91%E4%BB%AC%E7%9A%84nginx%E6%9C%8D%E5%8A%A1%E5%99%A8%E3%80%82%E4%BD%86%E6%98%AF%E8%BF%99%E6%97%B6%E5%80%99%E5%88%AB%E4%BA%BA%E7%9A%84Referer%E6%98%AFwww.test.com%E3%80%82%E5%92%8C%E6%88%91%E4%BB%AC%E8%AE%BE%E7%BD%AE%E7%9A%84%E5%8F%AF%E9%80%9A%E8%BF%87%E7%9A%84referer%E8%A7%84%E5%88%99%E4%B8%8D%E4%B8%80%E8%87%B4%E5%B0%B1%E4%BC%9A%E8%BF%94%E5%9B%9E403%E3%80%82%E8%BF%99%E6%A0%B7%E8%AE%BE%E7%BD%AE%E7%9A%84%E8%A7%84%E5%88%99%E5%B0%B1%E9%81%BF%E5%85%8D%E4%BA%86%E5%88%AB%E4%BA%BA%E7%9B%97%E7%94%A8%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90">http://www.test.com/。页面初始化发送请求给我们的nginx服务器。但是这时候别人的Referer是www.test.com。和我们设置的可通过的referer规则不一致就会返回403。这样设置的规则就避免了别人盗用静态资源</a></p></li></ul><h4 id="2-6-1）防盗链给用户展示自定义错误页面"><a href="#2-6-1）防盗链给用户展示自定义错误页面" class="headerlink" title="2.6.1）防盗链给用户展示自定义错误页面"></a>2.6.1）防盗链给用户展示自定义错误页面</h4><p>展示403错误码略微有点潦草。如需要给用户一个友好的提示。</p><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx">   <span class="token directive"><span class="token keyword">location</span> /test</span> <span class="token punctuation">&#123;</span>    <span class="token directive"><span class="token keyword">valid_referers</span> www.lvfeiy.top</span><span class="token punctuation">;</span> <span class="token comment">#设置可以访问静态资源的Referer</span>    <span class="token directive"><span class="token keyword">if</span> (<span class="token variable">$invalid_referer</span>)</span> <span class="token punctuation">&#123;</span>    <span class="token directive"><span class="token keyword">return</span> <span class="token number">403</span></span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>           <span class="token directive"><span class="token keyword">root</span>   /usr/share/nginx/html</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token directive"><span class="token keyword">error_page</span>   <span class="token number">403</span>  /error/403.html</span><span class="token punctuation">;</span> <span class="token directive"><span class="token keyword">location</span> = /error</span> <span class="token punctuation">&#123;</span>    <span class="token directive"><span class="token keyword">root</span>   /usr/share/nginx/html</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>只需要让 403错误码 错误页指向 &#x2F;error&#x2F;403.html  然后被一个前缀匹配的location&#x2F;error规则捕获。让其到&#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html目录下寻找&#x2F;error&#x2F;403.html。即可完成自定义页面展示</li></ul><h4 id="2-61）防盗链给用户展示自定义错误图片"><a href="#2-61）防盗链给用户展示自定义错误图片" class="headerlink" title="2.61）防盗链给用户展示自定义错误图片"></a>2.61）防盗链给用户展示自定义错误图片</h4><p>如果不想展示一个html想展示一个图片可以这么来做</p><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx">   <span class="token directive"><span class="token keyword">location</span> /test</span> <span class="token punctuation">&#123;</span>    <span class="token directive"><span class="token keyword">valid_referers</span> www.lvfeiy.top</span><span class="token punctuation">;</span> <span class="token comment">#设置可以访问静态资源的Referer</span>    <span class="token directive"><span class="token keyword">if</span> (<span class="token variable">$invalid_referer</span>)</span> <span class="token punctuation">&#123;</span>    <span class="token directive"><span class="token keyword">rewrite</span> ^/    /img/fdl.jpg break</span><span class="token punctuation">;</span> <span class="token comment"># ^/正则表示匹配所有地址。  让其请求地  址变为/img/fdl.jpg  break浏览器不显示跳转地址</span>    <span class="token punctuation">&#125;</span>        <span class="token directive"><span class="token keyword">root</span>   /usr/share/nginx/html</span><span class="token punctuation">;</span> <span class="token comment">#然后去/usr/share/nginx/html寻找/img/fdl.jpg</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="3-linux应用服务器防火墙"><a href="#3-linux应用服务器防火墙" class="headerlink" title="3.linux应用服务器防火墙"></a>3.linux应用服务器防火墙</h1><ul><li><p>开启防火墙</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl start firewalld<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>重启防火墙</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl restart firewalld<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>重载规则</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">firewall-cmd <span class="token parameter variable">--reload</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>查看已配置规则</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">firewall-cmd --list-all<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>指定ip访问和端口</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">firewall-cmd <span class="token parameter variable">--permanent</span> --add-rich-rule<span class="token operator">=</span><span class="token string">"rule family="</span>ipv4<span class="token string">" source address="</span><span class="token number">192.168</span>.44.101<span class="token string">"port protocol="</span>tcp<span class="token string">" port="</span><span class="token number">8080</span><span class="token string">" accept"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>添加一个可信任地址192.168.44.101 ，并开放tcp连接端口8080</li></ul></li><li><p>移除规则</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">firewall-cmd <span class="token parameter variable">--permanent</span> --remove-rich-rule<span class="token operator">=</span><span class="token string">"rule family="</span>ipv4<span class="token string">" sourceaddress="</span><span class="token number">192.168</span>.44.101<span class="token string">" port port="</span><span class="token number">8080</span><span class="token string">" protocol="</span>tcp<span class="token string">" accept"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h1 id="4-nginx高可用keeplivated"><a href="#4-nginx高可用keeplivated" class="headerlink" title="4.nginx高可用keeplivated"></a>4.nginx高可用keeplivated</h1><p>下载</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> openssl-devel <span class="token comment">#安装依赖    </span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> keepalived <span class="token comment">#安装keeplicated</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果是docker安装的nginx 。也一样。docker的nginx暴露出哪个端口就通过keepalived暴露的ip加端口。也就是说keepalived是通过帮我们把多台网卡的ip更换成一个固定ip</p><p>每一台nginx都安装keeplivated，它会帮我们检测对方是否存活。如果宕机了会使用ip漂移到另一台机器，也就是说我们只需要连接keeplivated的ip，然后把组分好即可</p><p>配置在&#x2F;etc&#x2F;keepalived&#x2F;keepalived.conf</p><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token directive"><span class="token keyword">global_defs</span></span> <span class="token punctuation">&#123;</span>router_id lb111 <span class="token comment">#自定义id</span><span class="token punctuation">&#125;</span><span class="token directive"><span class="token keyword">vrrp_instance</span> lfy</span> <span class="token punctuation">&#123;</span><span class="token directive"><span class="token keyword">state</span> MASTER <span class="token comment">#名字可以自定义</span>interface ens33 <span class="token comment">#网卡名</span>virtual_router_id <span class="token number">51</span> priority <span class="token number">100</span> <span class="token comment">#权重值，存活多台nginx的时候谁来当主机</span>advert_int <span class="token number">1</span> <span class="token comment">#检测存活的时间</span><span class="token comment">#在内网中组成一组需要让auth_type 和auth_pass的值相同       </span>authentication</span> <span class="token punctuation">&#123;</span>auth_type PASSauth_pass 1111<span class="token punctuation">&#125;</span><span class="token comment">#虚拟ip。只需要外界连接这个ip即可</span><span class="token directive"><span class="token keyword">virtual_ipaddress</span></span> <span class="token punctuation">&#123;</span>192.168.139.111<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl start keepalived <span class="token comment">#启动</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4-1测试"><a href="#4-1测试" class="headerlink" title="4.1测试"></a>4.1测试</h3><p>启动两台虚拟机启动docker的nginx容器和keepalived。外界ping  keepalived的ip。然后关机一台权重较高的虚拟机。出现短暂延时，依然可以ping通</p><p><img src="https://lfymall.oss-cn-fuzhou.aliyuncs.com/study/ping.png"></p>]]></content>
      
      
      <categories>
          
          <category> Nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java8新特性Stream流</title>
      <link href="/2022/11/01/stream-liu/"/>
      <url>/2022/11/01/stream-liu/</url>
      
        <content type="html"><![CDATA[<h1 id="1-基本使用案例"><a href="#1-基本使用案例" class="headerlink" title="1.基本使用案例"></a>1.基本使用案例</h1><h4 id="1-1）创建流"><a href="#1-1）创建流" class="headerlink" title="1.1）创建流"></a>1.1）创建流</h4><p>单例集合（重点）：集合对象.stream（）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> lambda01 <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      lambda01 lambda01 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">lambda01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> test <span class="token operator">=</span> lambda01<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> stream <span class="token operator">=</span> test<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stream<span class="token punctuation">.</span><span class="token function">distinct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>i <span class="token operator">-></span> i<span class="token operator">></span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>i<span class="token operator">-></span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> array<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>集合.stream获取流，然后调用distinct去重，filter过滤，最后foreach打印输出流 </li><li>每个流必须有终结操作，列如foreach就是一个终结操作，否则前面的一些过滤将没有意义，方法体将不会执行。</li></ul><p>数组：Arrays.stream（数组）或使用Stream.of创建</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//Arrays是数组工具类</span><span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> stream <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> stream2<span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//方法示例</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">arr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> stream <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>        stream<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>i <span class="token operator">-></span> i<span class="token operator">></span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>ints <span class="token operator">-></span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ints<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>双列集合：转换成单例结合在创建</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> map <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Hashmap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"吕飞扬"</span>，<span class="token number">123</span><span class="token punctuation">)</span>；<span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span><span class="token punctuation">></span></span> stream <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//方法示例</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> map <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"吕飞扬1"</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"吕飞扬2"</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"吕飞扬3"</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span><span class="token punctuation">></span></span> stream <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stream<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>set<span class="token operator">-></span>set<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>set <span class="token operator">-></span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"key是"</span><span class="token operator">+</span>set<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">",value是"</span><span class="token operator">+</span>set<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="2-中间操作"><a href="#2-中间操作" class="headerlink" title="2.中间操作"></a>2.中间操作</h1><h3 id="2-1）filter"><a href="#2-1）filter" class="headerlink" title="2.1）filter"></a>2.1）filter</h3><ul><li>可以对流中的元素进行过滤，符合过滤条件的才能继续留在流中。</li><li>例如 author.stream.filter(author -&gt; author.getAge()&gt;10)    把作者年龄大于10的保留在流中，排除年龄小于等于10的作者</li></ul><h3 id="2-2）map"><a href="#2-2）map" class="headerlink" title="2.2）map"></a>2.2）map</h3><ul><li><p>类型转换</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> map <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"吕飞扬1"</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"吕飞扬2"</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"吕飞扬3"</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>set<span class="token operator">-></span>set<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">//调用map把set类型转换成String类型，在用foreach直接输出，</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>map方法可以多个</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">map<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>set<span class="token operator">-></span>set<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>key<span class="token operator">-></span>key<span class="token operator">+</span><span class="token string">"真帅"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>列如在上述案例中还可以添加map给String类型的key拼接一个真帅</li></ul></li></ul><h3 id="2-3）distinct"><a href="#2-3）distinct" class="headerlink" title="2.3）distinct"></a>2.3）distinct</h3><ul><li>可以除去流中的重复元素</li><li>注意：distinct方法依赖Object的equals方法来判断是否是相同对象的。所以需要注意重写equals方法。</li></ul><h3 id="2-4）sorted"><a href="#2-4）sorted" class="headerlink" title="2.4）sorted"></a>2.4）sorted</h3><ul><li><p>排序：注意需要先去重才能排序</p></li><li><h5 id="第一种（空参sorted）"><a href="#第一种（空参sorted）" class="headerlink" title="第一种（空参sorted）"></a>第一种（空参sorted）</h5><ul><li>如果是排序实体类需要让实体类实现 Comparable&lt;实体类&gt; 接口 重写compareTo方法，在compareTo方法中编写比较逻辑</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token annotation punctuation">@EqualsAndHashCode</span><span class="token annotation punctuation">@ToString</span><span class="token keyword">public</span> <span class="token keyword">class</span> author <span class="token keyword">implements</span> <span class="token class-name">Comparable</span><span class="token generics"><span class="token punctuation">&lt;</span>author<span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> age<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span>author o<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>o<span class="token punctuation">.</span>age<span class="token punctuation">;</span>        <span class="token comment">//如果想降序 return o.getAge()-this.getAge();</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//方法示例</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       author a1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">author</span><span class="token punctuation">(</span><span class="token string">"吕飞扬"</span><span class="token punctuation">,</span> <span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       author b1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">author</span><span class="token punctuation">(</span><span class="token string">"吕飞扬"</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       author c1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">author</span><span class="token punctuation">(</span><span class="token string">"吕飞扬"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span>author<span class="token punctuation">></span></span> list<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>a1<span class="token punctuation">,</span>b1<span class="token punctuation">,</span>c1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">distinct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>author <span class="token operator">-></span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>author<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><h5 id="第二种（有参sorted）"><a href="#第二种（有参sorted）" class="headerlink" title="第二种（有参sorted）"></a>第二种（有参sorted）</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   author a1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">author</span><span class="token punctuation">(</span><span class="token string">"吕飞扬"</span><span class="token punctuation">,</span> <span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    author b1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">author</span><span class="token punctuation">(</span><span class="token string">"吕飞扬"</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    author c1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">author</span><span class="token punctuation">(</span><span class="token string">"吕飞扬"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span>author<span class="token punctuation">></span></span> list<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>a1<span class="token punctuation">,</span>b1<span class="token punctuation">,</span>c1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">distinct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">(</span>author1<span class="token punctuation">,</span>author2<span class="token punctuation">)</span><span class="token operator">-></span>author2<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>author1<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>直接在sorted中重写compareTo匿名内部类，并用lambda表达式来格式转换</li></ul></li></ul><h3 id="2-5）limit"><a href="#2-5）limit" class="headerlink" title="2.5）limit"></a>2.5）limit</h3><ul><li>设置流的最大长度</li><li>stream对象.limit(长度)</li></ul><h3 id="2-6）skip"><a href="#2-6）skip" class="headerlink" title="2.6）skip"></a>2.6）skip</h3><ul><li><p>跳过流中的前n个元素，返回剩下的元素</p></li><li><p>stream对象.skip(个数)</p></li></ul><h3 id="2-7）flatMap"><a href="#2-7）flatMap" class="headerlink" title="2.7）flatMap"></a>2.7）flatMap</h3><ul><li><p>与map相似，格式转换，只不过这个转换完还是用流接收</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> author<span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> age<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">List</span> list<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>适用于这种，对象中带集合或者带对象的，对象为流，对象中的集合和对象中的对象 也可以继续转换成流的形式，我愿称为流中流</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//方法示例</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">flatmap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span>author<span class="token punctuation">></span></span> authors <span class="token operator">=</span> <span class="token function">getauthors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        authors<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span>author <span class="token operator">-></span> author<span class="token punctuation">.</span><span class="token function">getList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">distinct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h1 id="3-终结操作"><a href="#3-终结操作" class="headerlink" title="3.终结操作"></a>3.终结操作</h1><h3 id="3-1）foreach"><a href="#3-1）foreach" class="headerlink" title="3.1）foreach"></a>3.1）foreach</h3><ul><li>循环输出</li></ul><h3 id="3-2）count"><a href="#3-2）count" class="headerlink" title="3.2）count"></a>3.2）count</h3><ul><li>可以用来获取当前流中的元素个数</li></ul><h3 id="3-3）max与min"><a href="#3-3）max与min" class="headerlink" title="3.3）max与min"></a>3.3）max与min</h3><ul><li><p>获取流中最值</p></li><li><p>流对象.max((scorel,scorel)-&gt;score1-score2);</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span>author<span class="token punctuation">></span></span> authors <span class="token operator">=</span> <span class="token function">getAuthors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> max <span class="token operator">=</span> authors<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>author <span class="token operator">-></span> author<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> s2<span class="token punctuation">)</span> <span class="token operator">-></span> s1 <span class="token operator">-</span> s2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>max<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>而我们发现其实用max是单独取这个最大的数值，如果想取这个最大数值的全部作家信息应该用sorted加limit</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">authors<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">(</span>author1<span class="token punctuation">,</span>author2<span class="token punctuation">)</span><span class="token operator">-></span>author2<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>author1<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li></ul><h3 id="3-4）collect"><a href="#3-4）collect" class="headerlink" title="3.4）collect"></a>3.4）collect</h3><ul><li><p>把当前流转换成一个集合</p></li><li><p>参数：</p><ul><li><p>Collectors.toSet()：转换成Set集合</p></li><li><p>Collectors.toList()：转换成List集合</p></li><li><pre><code class="java">    public static void test2(List&lt;Integer&gt; list)&#123;        List&lt;Integer&gt; collect = list.stream().distinct().sorted(Comparator.comparingInt(sorce -&gt; sorce)).collect(Collectors.toList());        for (Integer a : collect             ) &#123;            System.out.println(a);        &#125;    &#125;<pre class="line-numbers language-none"><code class="language-none">- Collectors.toMap(参数1指定key,参数2指定value)：  &#96;&#96;&#96;java      public static void collectMap()&#123;          List&lt;author&gt; authors &#x3D; getAuthors();          Map&lt;String, Integer&gt; collect &#x3D; authors.stream().collect(Collectors.toMap(author -&gt; author.getName(), author -&gt; author.getAge()));          Set&lt;String&gt; mapkey &#x3D; collect.keySet();          for (String key:mapkey               ) &#123;              System.out.println(key+&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;+collect.get(key));          &#125;      &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>- 注意了map的key是不能重复的</code></pre></li><li><p>Collectors.toCollention()</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">TreeSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">DomianThread</span><span class="token punctuation">></span></span> collect2 <span class="token operator">=</span> domianThreads<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toCollection</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token keyword">new</span> <span class="token class-name">TreeSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token class-name">Comparator</span><span class="token punctuation">.</span><span class="token function">comparingInt</span><span class="token punctuation">(</span><span class="token class-name">DomianThread</span><span class="token operator">::</span><span class="token function">getSort</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>可以转换为TreeMap，根据实体中的某个字段值排序并去重。</li></ul></li><li><p><strong>Collectors.groupingBy分组（指定分组属性，分组类型）</strong></p><ul><li><p><strong>分组属性</strong></p><ul><li>如果集合中是是对象，可以以对象属性为分组属性</li><li>如果集合中是基本类型，可以用Function.identity() 集合自身为分组属性</li></ul></li><li><p><strong>分组类型</strong>可选</p><ul><li><p>Collectors.joining(“连接符号”) 以xxx连接分组之后的属性   </p></li><li><p>Collectors.summingLong(“属性值”) 属性累加值     </p></li><li><p>Collectors.averagingInt(“属性值”)  统计属性的平均值</p></li><li><p>Collectors.counting()统计分组之后的属性个数</p></li><li><p>Collectors.mapping(“属性值”，Collectors.toList()) 转变分组结果 。简而言之就是分组后Map还想进一步的处理value。第一个参数等同于map()，第二个参数等同于在写了一次collect</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;转换分组结果为Name的List集合groupingBy(Employee::getCity, Collectors.mapping(Employee::getName, Collectors.toList())<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>Collectors.toList() 直接以list返回分组结果</p></li></ul></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">SkuSaleAttrValueEntity</span><span class="token punctuation">></span><span class="token punctuation">></span></span> collect <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">groupingBy</span><span class="token punctuation">(</span><span class="token class-name">SkuSaleAttrValueEntity</span><span class="token operator">::</span><span class="token function">getAttrId</span><span class="token punctuation">,</span> <span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p>基本属性分组示例</p><ul><li>Function.identity() 集合本身</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java">      <span class="token comment">//基本属性 统计值</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> strings <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"apple"</span><span class="token punctuation">,</span> <span class="token string">"banana"</span><span class="token punctuation">,</span> <span class="token string">"banana"</span><span class="token punctuation">,</span> <span class="token string">"orange"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Collectors.groupingBy(Function.identity(),Collectors.counting()) 以集合自身为key，以统计值为value</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">></span></span> collect<span class="token operator">=</span>strings<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">groupingBy</span><span class="token punctuation">(</span><span class="token class-name">Function</span><span class="token punctuation">.</span><span class="token function">identity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">counting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>collect<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul></li></ul><h3 id="3-5）查找与匹配"><a href="#3-5）查找与匹配" class="headerlink" title="3.5）查找与匹配"></a>3.5）查找与匹配</h3><h4 id="3-5-1）anyMatch"><a href="#3-5-1）anyMatch" class="headerlink" title="3.5.1）anyMatch()"></a>3.5.1）anyMatch()</h4><ul><li><p>判断是否都符合匹配条件，结果为boolean类型。如果有一项符合结果为true，否则结果为false</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">authors<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">anyMatch</span><span class="token punctuation">(</span>author<span class="token operator">-></span>author<span class="token punctuation">.</span>getAge<span class="token operator">></span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h4 id="3-5-2）allMatch"><a href="#3-5-2）allMatch" class="headerlink" title="3.5.2）allMatch()"></a>3.5.2）allMatch()</h4><ul><li><p>判断是否全部符合匹配条件，结果为Boolean类型，如果全部符合才为true，否则为false</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">authors<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">allMatch</span><span class="token punctuation">(</span>author<span class="token operator">-></span>author<span class="token punctuation">.</span>getAge<span class="token operator">></span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//方法示例</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">allMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span>author<span class="token punctuation">></span></span> authors <span class="token operator">=</span> <span class="token function">getAuthors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> b <span class="token operator">=</span> authors<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">allMatch</span><span class="token punctuation">(</span>author <span class="token operator">-></span> author<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"结果为"</span><span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="3-5-2）noneMath"><a href="#3-5-2）noneMath" class="headerlink" title="3.5.2）noneMath()"></a>3.5.2）noneMath()</h4><ul><li><p>判断是否都不符合匹配条件，结果为Boolean类型</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">noneMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span>author<span class="token punctuation">></span></span> authors <span class="token operator">=</span> <span class="token function">getAuthors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> b <span class="token operator">=</span> authors<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">noneMatch</span><span class="token punctuation">(</span>author <span class="token operator">-></span> author<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"结果为"</span><span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="3-5-3）findAny"><a href="#3-5-3）findAny" class="headerlink" title="3.5.3）findAny()"></a>3.5.3）findAny()</h4><ul><li><p>获取流中任意一个对象</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Author</span><span class="token punctuation">></span></span> optionalAuthor <span class="token operator">=</span>list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">findAny</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>optionlAuthor<span class="token punctuation">.</span><span class="token function">ifPresent</span><span class="token punctuation">(</span>author<span class="token operator">-></span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>author<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//注意：findAny的流中如果没有数据是获取不到随机数据的</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="3-5-4）findfirst"><a href="#3-5-4）findfirst" class="headerlink" title="3.5.4）findfirst()"></a>3.5.4）findfirst()</h4><ul><li>获取流中第一个</li></ul><h4 id="3-5-5）总结"><a href="#3-5-5）总结" class="headerlink" title="3.5.5）总结"></a>3.5.5）总结</h4><ul><li><p>anyMatch()是只要流内元素有一个满足条件就返回true</p></li><li><p>allMatch()是需要流内所有元素都满足条件才返回true</p></li><li><p>noneMatch()是需要流内所有元素都不满足条件才返回true</p></li><li><p>findAny()是随机获取流中一个元素</p></li><li><p>findfirst()获取流中第一个元素</p></li></ul><h3 id="3-6）reduce归并"><a href="#3-6）reduce归并" class="headerlink" title="3.6）reduce归并"></a>3.6）reduce归并</h3><ul><li><p>对流中的数据按照你指定的计算方式计算出一个结果。（缩减操作）</p></li><li><p>reduce的作用的把stream中的元素给组合起来，我们可以传入一个初始值，它会按照我们的计算方式依次拿流中的元素和在初始化值得基础上进行计算，计算结果再和后面的元素计算。</p></li><li><p>他内部计算方式如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">T</span> result<span class="token operator">=</span>identity<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">T</span> element<span class="token operator">:</span><span class="token keyword">this</span> stream<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>result <span class="token operator">=</span> accumulator<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span>element<span class="token punctuation">)</span>；<span class="token punctuation">&#125;</span><span class="token keyword">return</span> result<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>参数：（变量的初始值，（变量，遍历到的数值）-&gt; 逻辑）</p><ul><li>初始值如果不写则把遍历到的第一个数值作为变量的初始值</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//方法示例</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span>author<span class="token punctuation">></span></span> authors <span class="token operator">=</span> <span class="token function">getAuthors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Integer</span> reduce <span class="token operator">=</span> authors<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>author <span class="token operator">-></span> author<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">distinct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>age1<span class="token punctuation">,</span> age2<span class="token punctuation">)</span> <span class="token operator">-></span> age1 <span class="token operator">+</span> age2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>reduce<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="3-7）注意事项"><a href="#3-7）注意事项" class="headerlink" title="3.7）注意事项"></a>3.7）注意事项</h3><ul><li>惰性求值（如果没有终结操作，没有中间操作是不会的到执行的）</li><li>流是一次性的（一旦一个流对象经过一个终结操作后，这个流就不能在被使用）</li><li>不会影响原数据（我们在流中可以多数据做很多处理，但是正常情况下是不会影响原来集合中的元素的。这往往也是我们期望的）</li></ul><h1 id="4-Optional"><a href="#4-Optional" class="headerlink" title="4.Optional"></a>4.Optional</h1><h3 id="4-1）概述"><a href="#4-1）概述" class="headerlink" title="4.1）概述"></a>4.1）概述</h3><p>我们在编写代码的时候出现最多的就是空指针异常。所以在很多情况下我们需要各种非空判断。</p><p>尤其是对象中的属性还是一个对象的情况下，这种判断会更多</p><p>而过多的判断语句会让我们的代码显得臃肿 不堪</p><p>所以在JDK8中引入了Optional，养成使用Optional的习惯你可以写出更有呀的代码来避免空指针异常</p><h3 id="4-2）使用"><a href="#4-2）使用" class="headerlink" title="4.2）使用"></a>4.2）使用</h3><h4 id="4-2-1）创建对象"><a href="#4-2-1）创建对象" class="headerlink" title="4.2.1）创建对象"></a>4.2.1）创建对象</h4><p>Optional就好像是包装类，可以把我们的具体数据封装Optional对象内部。然后我们去使用Optional中封装好的方法操作封装进去的数值就可以非常有呀的避免空指针异常</p><p>我们一般使用Optional的静态方法ofNullable来把数据封装成一个Optional对象。无论传入的参数是否为null都不会出现问题。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Author</span> author <span class="token operator">=</span> <span class="token function">getAuthor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">OPtional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Author</span><span class="token punctuation">></span></span> authorOptional<span class="token operator">=</span><span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>author<span class="token punctuation">)</span>authorOptional<span class="token punctuation">.</span><span class="token function">ifPresent</span><span class="token punctuation">(</span>author1<span class="token operator">-></span><span class="token class-name">Systemctl</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>author1<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>ifPresent：如果不为空，则执行后续操作</li></ul><p>你可能会觉得还要加一行代码来封装数据比较麻烦，但是如果改造一下getAuthor方法，让其的返回值就是封装好的Optional的话，我们在使用时就会方便很多。</p><p>而且在实际开发中我们的数据很多都是从数据库获取的。Mybatis从3.5版本也已经支持Optional了。我们可以直接把dao方法的返回值类型定义成Optional类型，Mybatis会自己把数据封装成Optional对象返回。封装的过程也不需要我们自己操作。</p><p>​如果你确定一个对象不是空的则可以使用Optional的静态方法of来把数据封装成Optional对象。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Author</span> author <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Author</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Author</span><span class="token punctuation">></span></span> authorOptional <span class="token operator">=</span> <span class="token class-name">Option</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>author<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>ofNullable传入空时不会报错，of方法传入空时会报错</li></ul><h4 id="4-2-2）ifPresent：安全消费值"><a href="#4-2-2）ifPresent：安全消费值" class="headerlink" title="4.2.2）ifPresent：安全消费值"></a>4.2.2）ifPresent：安全消费值</h4><p>我们获取到一个Option对象后肯定需要对其中的数据进行使用，这时候我们可以使用其ifPresent方法来对消费其中的值。</p><p>这个方法会判断其内封装的数据是否为空，不为空时才会执行具体的消费代码，这样使用起来更加安全了。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">authorOptional<span class="token punctuation">.</span><span class="token function">ifPresent</span><span class="token punctuation">(</span>author1<span class="token operator">-></span><span class="token class-name">Systemctl</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>author1<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="4-2-3）获取值"><a href="#4-2-3）获取值" class="headerlink" title="4.2.3）获取值"></a>4.2.3）获取值</h4><p>如果我们想获取值自己进行处理可以使用get方法获取，但是不推荐。因为当Optional内部的数据为空的时候会出现异常。</p><h4 id="4-2-4）安全获取值"><a href="#4-2-4）安全获取值" class="headerlink" title="4.2.4）安全获取值"></a>4.2.4）安全获取值</h4><p>如果我们期望安全的获取值。不推荐使用get方法，而是使用Optional中的其他方法</p><ul><li><p>orElseGet：当Optional中的数据为null时，可以自己设置一个默认值返回</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">orElseGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span>author<span class="token punctuation">></span></span> option <span class="token operator">=</span> <span class="token function">getOption</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//当option中的数据为空时，设置一个author，并且名字为扬哥年龄为22</span>    author elseGet <span class="token operator">=</span> option<span class="token punctuation">.</span><span class="token function">orElseGet</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token keyword">new</span> <span class="token function">author</span><span class="token punctuation">(</span><span class="token string">"扬哥"</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>elseGet<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span>author<span class="token punctuation">></span></span> <span class="token function">getOption</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    author lfy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">author</span><span class="token punctuation">(</span><span class="token string">"吕飞扬"</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//故意传入空值</span>    <span class="token keyword">return</span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>orElseThrow：如果数据不为空就能获取到该数据，如果为空则根据你传入的参数来创建异常抛出</p></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">orElseThrow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span>author<span class="token punctuation">></span></span> option <span class="token operator">=</span> <span class="token function">getOption</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        option<span class="token punctuation">.</span><span class="token function">orElseThrow</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Throwable</span><span class="token punctuation">></span></span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"数据为null"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-2-5）过滤"><a href="#4-2-5）过滤" class="headerlink" title="4.2.5）过滤"></a>4.2.5）过滤</h4><ul><li><p>filter：和stream()流中的使用方法一样</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span>author<span class="token punctuation">></span></span> option <span class="token operator">=</span> <span class="token function">getOption</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       option<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>author <span class="token operator">-></span> author<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ifPresent</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="4-2-6）判断"><a href="#4-2-6）判断" class="headerlink" title="4.2.6）判断"></a>4.2.6）判断</h4><ul><li>isPresent：如果为空范围值为false，如果不为空返回值为true。<strong>更推荐使用ifPresent</strong></li></ul><h1 id="5-函数式接口"><a href="#5-函数式接口" class="headerlink" title="5.函数式接口"></a>5.函数式接口</h1><h3 id="5-1）概述"><a href="#5-1）概述" class="headerlink" title="5.1）概述"></a>5.1）概述</h3><p>​只有一个抽象方法的接口我们称之为函数接口。</p><p>​JDK的函数式接口都加上了@Functionallnterface注解进行表示，但是吴润是否加上该注解只要接口中只有一个抽象方法，都是函数式接口。</p><h3 id="5-2）常见函数式接口"><a href="#5-2）常见函数式接口" class="headerlink" title="5.2）常见函数式接口"></a>5.2）常见函数式接口</h3><ul><li><p>Consumer：消费接口</p></li><li><p>Function：计算转换接口</p></li><li><p>Predicate：判断接口</p></li><li><p>Supplier：生产型接口</p></li></ul><h3 id="5-3）常用的默认方法"><a href="#5-3）常用的默认方法" class="headerlink" title="5.3）常用的默认方法"></a>5.3）常用的默认方法</h3><ul><li><h5 id="and"><a href="#and" class="headerlink" title="and"></a>and</h5></li></ul><p>​我们在使用Predicate接口时候可能需要进行判断条件的拼接，而and方法相当于是使用&amp;&amp;来拼接两个判断条件。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span>author<span class="token punctuation">></span></span> authors <span class="token operator">=</span> <span class="token function">getAuthors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    authors<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Predicate</span><span class="token generics"><span class="token punctuation">&lt;</span>author<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">test</span><span class="token punctuation">(</span>author author<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> author<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">19</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Predicate</span><span class="token generics"><span class="token punctuation">&lt;</span>author<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">test</span><span class="token punctuation">(</span>author author<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> author<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token number">100</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​这个只能使用匿名内部类，不能使用lambda表达式，这样看起来似乎有些鸡肋，但实际上这个and方法并不是这样使用的，<strong>使用and方法更多的是在自己定义匿名内部类的时候</strong></p><ul><li><h5 id="or"><a href="#or" class="headerlink" title="or"></a>or</h5></li></ul><p>​or方法相当于使用||来拼接两个判断条件</p><ul><li><h5 id="negate"><a href="#negate" class="headerlink" title="negate"></a>negate</h5></li></ul><p>​negate方法相当于是在判断添加前面加了个！表示取反</p><h1 id="6-方法引用"><a href="#6-方法引用" class="headerlink" title="6.方法引用"></a>6.方法引用</h1><p>​我们在使用lambda时，如果方法体只有一个方法的调用话（包括构造方法），我们可以用方法引用进一步简化代码。</p><h3 id="6-1）推荐用法"><a href="#6-1）推荐用法" class="headerlink" title="6.1）推荐用法"></a>6.1）推荐用法</h3><p>​我们在使用lambda时不需要考虑什么时候方法引用，用哪种方法引用，方法引用的格式是什么。我们值需要在写完lambda方法发现方法体只有一行代码，并且方法的调用时使用快捷键尝试是否能够转换成方法引用即可。</p><h3 id="6-2）基本格式"><a href="#6-2）基本格式" class="headerlink" title="6.2）基本格式"></a>6.2）基本格式</h3><p>类名或对象名::方法名</p><h3 id="6-3）语法详解（了解）"><a href="#6-3）语法详解（了解）" class="headerlink" title="6.3）语法详解（了解）"></a>6.3）语法详解（了解）</h3><h4 id="6-3-1）引用静态方法"><a href="#6-3-1）引用静态方法" class="headerlink" title="6.3.1）引用静态方法"></a>6.3.1）引用静态方法</h4><p>​其实就是引用类的静态方法</p><p><strong>格式</strong></p><pre class="line-numbers language-none"><code class="language-none">类名::方法名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>使用前提</strong></p><p>​如果我们在重写方法的时候，方法体中只有<strong>一行代码</strong>，并且这行代码是<strong>调用了某个类的静态方法</strong>，并且我们要把重写的<strong>抽象方法中所有的参数都按照顺序传入这个静态方法中</strong>，这个时候我们就可以引用类的静态方法。</p><h4 id="6-3-2）引用对象的实例方法"><a href="#6-3-2）引用对象的实例方法" class="headerlink" title="6.3.2）引用对象的实例方法"></a>6.3.2）引用对象的实例方法</h4><p><strong>格式</strong></p><pre class="line-numbers language-none"><code class="language-none">对象名::方法名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>使用前提</strong></p><p>​如果我们在重写方法的时候，方法体中只有<strong>一行代码，</strong>并且这行代码是<strong>调用了某个对象的成员方法</strong>，并且我们把要重写的抽象方法中<strong>所有的参数都按照顺序传入了这个成员方法中</strong>，这个时候就可以引用对象的实例方法。</p><h4 id="6-3-3）引用类的实例方法"><a href="#6-3-3）引用类的实例方法" class="headerlink" title="6.3.3）引用类的实例方法"></a>6.3.3）引用类的实例方法</h4><p><strong>格式</strong></p><pre class="line-numbers language-none"><code class="language-none">类名::方法名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>使用前提</strong></p><p>​如果我们在重写方法的时候，方法体中只有<strong>一行代码，</strong>并且这行代码是<strong>调用了第一个参数的成员方法</strong>，并且我们把要重写的抽象方法中<strong>剩余的所有的参数都按照顺序传入了这个成员方法中</strong>，这个时候就可以引用类的实例方法。</p><h1 id="7-高级"><a href="#7-高级" class="headerlink" title="7.高级"></a>7.高级</h1><p><strong>基本数据类型优化</strong></p><p>如果我们使用的是包装类，比如Integer</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">authors<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>author<span class="token operator">-></span>author<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>age<span class="token operator">-></span>age<span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">)</span>   <span class="token punctuation">.</span><span class="token function">foeEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>因为我们author中Age是Integer类型的，这里我们把age+10，会触发自动拆箱，如果数据量很大时会影响效率</p><p>所以为了让我们能够对这部分的时间小号进行优化，Stream提供了很多方法</p><p><strong>列如：mapToInt,mapToLong,mapToDouble,flatMapTolnt,flatMapToDouble等。</strong></p><p>上述方法优化</p><pre class="line-numbers language-none"><code class="language-none">authors.stream()   .mapToInt(author-&gt;author.getAge())   .map(age-&gt;age+10)   .foeEach(System.out::println);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-1）并行流"><a href="#7-1）并行流" class="headerlink" title="7.1）并行流"></a>7.1）并行流</h3><p>​当流中有大量元素时，我们可以使用并行流去提高操作的效率，其实并行流就是把任务分配给多个线程去完成。如果我们自己去用代码实现的话会非常复杂，并且要求你对并发编程有足够的理解和认识。而如果我们使用Stream的话，我们值需要修改一个方法的调用就可以使用并行流来帮我们实现，从而提高效率</p><p><strong>用法</strong></p><ul><li><p>paraller:可以把串行流转换成并行流。</p><ul><li><p>stream对象.paraller()</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">paraller</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span>author<span class="token punctuation">></span></span> authors <span class="token operator">=</span> <span class="token function">getAuthors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//两种方法第一种先获取stream对象在调用parallel或者直接调用parallelStream</span><span class="token comment">//    authors.stream().parallel().forEach(System.out::println);</span>    authors<span class="token punctuation">.</span><span class="token function">parallelStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>peek()方法可以查看线程</p></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">paraller</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span>author<span class="token punctuation">></span></span> authors <span class="token operator">=</span> <span class="token function">getAuthors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span>author<span class="token punctuation">></span></span> stream <span class="token operator">=</span> authors<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           stream<span class="token punctuation">.</span><span class="token function">parallel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Consumer</span><span class="token generics"><span class="token punctuation">&lt;</span>author<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>               <span class="token annotation punctuation">@Override</span>               <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">accept</span><span class="token punctuation">(</span>author author<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                   <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>author<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token punctuation">&#125;</span>           <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>author <span class="token operator">-></span> author<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java8 </tag>
            
            <tag> 新特性 </tag>
            
            <tag> 流式编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot</title>
      <link href="/2022/10/29/springboot/"/>
      <url>/2022/10/29/springboot/</url>
      
        <content type="html"><![CDATA[<h1 id="第一章-JavaConfig"><a href="#第一章-JavaConfig" class="headerlink" title="第一章  JavaConfig"></a>第一章  JavaConfig</h1><ul><li><p>为什么要使用 Spring Boot</p><p> 因为Spring， SpringMVC 需要使用的大量的配置文件 （xml文件）</p><p> 还需要配置各种对象，把使用的对象放入到spring容器中才能使用对象</p><p> 需要了解其他框架配置规则。</p></li><li><p>SpringBoot 就相当于 不需要配置文件的Spring+SpringMVC。 常用的框架和第三方库都已经配置好了。</p><p> 拿来就可以使用了。</p></li><li><p>SpringBoot开发效率高，使用方便多了</p></li></ul><h1 id="第二-章-Spring-Boot"><a href="#第二-章-Spring-Boot" class="headerlink" title="第二 章 Spring Boot"></a>第二 章 Spring Boot</h1><h2 id="2-1-介绍"><a href="#2-1-介绍" class="headerlink" title="2.1 介绍"></a>2.1 介绍</h2><p>SpringBoot是Spring中的一个成员， 可以简化Spring，SpringMVC的使用。 他的核心还是IOC容器。</p><p>特点：</p><ul><li><p>Create stand-alone Spring applications</p><p> 创建spring应用</p></li><li><p>Embed Tomcat, Jetty or Undertow directly (no need to deploy WAR files)</p><p>内嵌的tomcat， jetty ， Undertow </p></li><li><p>Provide opinionated ‘starter’ dependencies to simplify your build configuration</p><p>提供了starter起步依赖，简化应用的配置。   </p><p>比如使用MyBatis框架 ， 需要在Spring项目中，配置MyBatis的对象 SqlSessionFactory ， Dao的代理对象</p><p>在SpringBoot项目中，在pom.xml里面, 加入一个 mybatis-spring-boot-starter依赖</p></li><li><p>Automatically configure Spring and 3rd party libraries whenever possible</p><p>尽可能去配置spring和第三方库。叫做自动配置（就是把spring中的，第三方库中的对象都创建好，放到容器中， 开发人员可以直接使用）</p></li><li><p>Provide production-ready features such as metrics, health checks, and externalized configuration</p><p> 提供了健康检查， 统计，外部化配置</p></li><li><p>Absolutely no code generation and no requirement for XML configuration</p><p>不用生成代码， 不用使用xml，做配置</p></li></ul><h2 id="2-2-创建Spring-Boot项目"><a href="#2-2-创建Spring-Boot项目" class="headerlink" title="2.2 创建Spring Boot项目"></a>2.2 创建Spring Boot项目</h2><h3 id="2-2-1-第一种方式，-使用Spring提供的初始化器，-就是向导创建SpringBoot应用"><a href="#2-2-1-第一种方式，-使用Spring提供的初始化器，-就是向导创建SpringBoot应用" class="headerlink" title="2.2.1 第一种方式， 使用Spring提供的初始化器， 就是向导创建SpringBoot应用"></a>2.2.1 第一种方式， 使用Spring提供的初始化器， 就是向导创建SpringBoot应用</h3><p>使用的地址： <a href="https://start.spring.io/">https://start.spring.io</a></p><p>SpringBoot项目的结构：</p><h3 id="2-2-1-使用国内的地址"><a href="#2-2-1-使用国内的地址" class="headerlink" title="2.2.1  使用国内的地址"></a>2.2.1  使用国内的地址</h3><p><a href="https://start.springboot.io/">https://start.springboot.io</a></p><h2 id="2-3-注解的使用"><a href="#2-3-注解的使用" class="headerlink" title="2.3  注解的使用"></a>2.3  注解的使用</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span>符合注解：由<span class="token annotation punctuation">@SpringBootConfiguration</span><span class="token annotation punctuation">@EnableAutoConfiguration</span><span class="token annotation punctuation">@ComponentScan</span>        <span class="token number">1.</span>@<span class="token class-name">SpringBootConfiguration</span>    <span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">SpringBootConfiguration</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@AliasFor</span><span class="token punctuation">(</span>        annotation <span class="token operator">=</span> <span class="token class-name">Configuration</span><span class="token punctuation">.</span><span class="token keyword">class</span>    <span class="token punctuation">)</span>    <span class="token keyword">boolean</span> <span class="token function">proxyBeanMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>说明：使用了<span class="token annotation punctuation">@SpringBootConfiguration</span>注解标注的类，可以作为配置文件使用的，    可以使用<span class="token class-name">Bean</span>声明对象，注入到容器<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.@EnableAutoConfiguration</p><p>启用自动配置， 把java对象配置好，注入到spring容器中。例如可以把mybatis的对象创建好，放入到容器中</p><p>3.@ComponentScan</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@ComponentScan</span> 扫描器，找到注解，根据注解的功能创建对象，给属性赋值等等。默认扫描的包： <span class="token annotation punctuation">@ComponentScan</span>所在的类所在的包和子包。    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="2-4-SpringBoot的配置文件"><a href="#2-4-SpringBoot的配置文件" class="headerlink" title="2.4 SpringBoot的配置文件"></a>2.4 SpringBoot的配置文件</h2><p>配置文件名称： application</p><p>扩展名有： properties( k&#x3D;v) ;  yml ( k: v)</p><p>使用application.properties,   application.yml</p><p>例1：application.properties设置 端口和上下文</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">#设置端口号server.port=8082#设置访问应用上下文路径， contextpathserver.servlet.context-path=/myboot<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>例2： application.yml</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8083</span>  <span class="token key atrule">servlet</span><span class="token punctuation">:</span>    <span class="token key atrule">context-path</span><span class="token punctuation">:</span> /myboot2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-5-多环境配置"><a href="#2-5-多环境配置" class="headerlink" title="2.5 多环境配置"></a>2.5 多环境配置</h2><p>有开发环境， 测试环境， 上线的环境。</p><p>每个环境有不同的配置信息， 例如端口， 上下文件， 数据库url，用户名，密码等等</p><p>使用多环境配置文件，可以方便的切换不同的配置。</p><p>使用方式： 创建多个配置文件， 名称规则： application-环境名称.properties(yml)</p><p>创建开发环境的配置文件： application-dev.properties(  application-dev.yml )</p><p>创建测试者使用的配置： application-test.properties</p><h2 id="2-6-ConfigurationProperties"><a href="#2-6-ConfigurationProperties" class="headerlink" title="2.6 @ConfigurationProperties"></a>2.6 @ConfigurationProperties</h2><p>@ConfigurationProperties: 把配置文件的数据映射为java对象。</p><p>属性：prefix 配置文件中的某些key的开头的内容。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"school"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SchoolInfo</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> website<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> address<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getWebsite</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> website<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setWebsite</span><span class="token punctuation">(</span><span class="token class-name">String</span> website<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>website <span class="token operator">=</span> website<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> address<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAddress</span><span class="token punctuation">(</span><span class="token class-name">String</span> address<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>address <span class="token operator">=</span> address<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"SchoolInfo&#123;"</span> <span class="token operator">+</span>                <span class="token string">"name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token char">'\''</span> <span class="token operator">+</span>                <span class="token string">", website='"</span> <span class="token operator">+</span> website <span class="token operator">+</span> <span class="token char">'\''</span> <span class="token operator">+</span>                <span class="token string">", address='"</span> <span class="token operator">+</span> address <span class="token operator">+</span> <span class="token char">'\''</span> <span class="token operator">+</span>                <span class="token char">'&#125;'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>application.properties</p><pre class="line-numbers language-pro" data-language="pro"><code class="language-pro">#配置端口号server.port&#x3D;8082#context-pathserver.servlet.context-path&#x3D;&#x2F;myboot#自定义key&#x3D;valueschool.name&#x3D;动力节点school.website&#x3D;www.bjpowernode.comschool.address&#x3D;北京的大兴区site&#x3D;www.bjpowernode.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-7-使用jsp"><a href="#2-7-使用jsp" class="headerlink" title="2.7  使用jsp"></a>2.7  使用jsp</h2><p>SpringBoot不推荐使用jsp ，而是使用模板技术代替jsp</p><p>使用jsp需要配置：</p><p>1） 加入一个处理jsp的依赖。 负责编译jsp文件</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.tomcat.embed<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>tomcat-embed-jasper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>如果需要使用servlet， jsp，jstl的功能</li></ol><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jstl<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>javax.servlet-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.servlet.jsp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>javax.servlet.jsp-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.3.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>创建一个存放jsp的目录，一般叫做webapp</li></ol><p>​    index.jsp</p><ol start="4"><li>需要在pom.xml指定jsp文件编译后的存放目录。</li></ol><p>  META-INF&#x2F;resources</p><p>5）创建Controller， 访问jsp</p><p>6）在application.propertis文件中配置视图解析器</p><h2 id="2-8-使用容器"><a href="#2-8-使用容器" class="headerlink" title="2.8 使用容器"></a>2.8 使用容器</h2><p>你想通过代码，从容器中获取对象。</p><p>通过SpringApplication.run(Application.class, args); 返回值获取容器。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">ConfigurableApplicationContext</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> primarySource<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span>primarySource<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">ConfigurableApplicationContext</span> <span class="token operator">:</span> 接口，是<span class="token class-name">ApplicationContext</span>的子接口<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ConfigurableApplicationContext</span> <span class="token keyword">extends</span> <span class="token class-name">ApplicationContext</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-9-ComnandLineRunner-接口-，-ApplcationRunner接口"><a href="#2-9-ComnandLineRunner-接口-，-ApplcationRunner接口" class="headerlink" title="2.9 ComnandLineRunner 接口 ，  ApplcationRunner接口"></a>2.9 ComnandLineRunner 接口 ，  ApplcationRunner接口</h2><p>这两个接口都 有一个run方法。 执行时间在容器对象创建好后， 自动执行run（）方法。</p><p>可以完成自定义的在容器对象创建好的一些操作。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@FunctionalInterface</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">CommandLineRunner</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@FunctionalInterface</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ApplicationRunner</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">ApplicationArguments</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="第三章-Web组件"><a href="#第三章-Web组件" class="headerlink" title="第三章 Web组件"></a>第三章 Web组件</h1><p>讲三个内容： 拦截器， Servlet ，Filter</p><h2 id="3-1-拦截器"><a href="#3-1-拦截器" class="headerlink" title="3.1 拦截器"></a>3.1 拦截器</h2><p>拦截器是SpringMVC中一种对象，能拦截器对Controller的请求。</p><p>拦截器框架中有系统的拦截器， 还可以自定义拦截器。  实现对请求预先处理。</p><p>实现自定义拦截器：</p><ol><li><p>创建类实现SpringMVC框架的HandlerInterceptor接口</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">HandlerInterceptor</span> <span class="token punctuation">&#123;</span> <span class="token keyword">default</span> <span class="token keyword">boolean</span> <span class="token function">preHandle</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">Object</span> handler<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">postHandle</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">Object</span> handler<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">ModelAndView</span> modelAndView<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span> <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">afterCompletion</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">Object</span> handler<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><p>2.需在SpringMVC的配置文件中，声明拦截器</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>interceptors</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>interceptor</span><span class="token punctuation">></span></span>    &lt;mvc:path="url" />        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>拦截器类全限定名称<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>interceptor</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>interceptors</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>SpringBoot中注册拦截器：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyAppConfig</span> <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//添加拦截器对象， 注入到容器中</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addInterceptors</span><span class="token punctuation">(</span><span class="token class-name">InterceptorRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//创建拦截器对象</span>        <span class="token class-name">HandlerInterceptor</span> interceptor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LoginInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//指定拦截的请求uri地址</span>        <span class="token class-name">String</span> path <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"/user/**"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token comment">//指定不拦截的地址</span>        <span class="token class-name">String</span> excludePath  <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"/user/login"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        registry<span class="token punctuation">.</span><span class="token function">addInterceptor</span><span class="token punctuation">(</span>interceptor<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">addPathPatterns</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">excludePathPatterns</span><span class="token punctuation">(</span>excludePath<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-2-Servlet"><a href="#3-2-Servlet" class="headerlink" title="3.2  Servlet"></a>3.2  Servlet</h2><p>在SpringBoot框架中使用Servlet对象。</p><p>使用步骤：</p><ol><li>创建Servlet类。 创建类继承HttpServlet</li><li>注册Servlet ，让框架能找到Servlet</li></ol><p> 例子：</p><p>1.创建自定义Servlet</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//创建Servlet类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token function">doPost</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>resp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>       <span class="token comment">//使用HttpServletResponse输出数据，应答结果</span>        resp<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"text/html;charset=utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">PrintWriter</span> out  <span class="token operator">=</span> resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"===执行的是Servlet=="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        out<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        out<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>注册Servlet</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebApplictionConfig</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//定义方法， 注册Servlet对象</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">ServletRegistrationBean</span> <span class="token function">servletRegistrationBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//public ServletRegistrationBean(T servlet, String... urlMappings)</span>        <span class="token comment">//第一个参数是 Servlet对象， 第二个是url地址</span>        <span class="token comment">//ServletRegistrationBean bean =</span>                <span class="token comment">//new ServletRegistrationBean( new MyServlet(),"/myservlet");</span>        <span class="token class-name">ServletRegistrationBean</span> bean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServletRegistrationBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bean<span class="token punctuation">.</span><span class="token function">setServlet</span><span class="token punctuation">(</span> <span class="token keyword">new</span> <span class="token class-name">MyServlet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bean<span class="token punctuation">.</span><span class="token function">addUrlMappings</span><span class="token punctuation">(</span><span class="token string">"/login"</span><span class="token punctuation">,</span><span class="token string">"/test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &lt;url-pattern></span>        <span class="token keyword">return</span> bean<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-3-过滤器Filter"><a href="#3-3-过滤器Filter" class="headerlink" title="3.3 过滤器Filter"></a>3.3 过滤器Filter</h2><p>Filter是Servlet规范中的过滤器，可以处理请求， 对请求的参数， 属性进行调整。 常常在过滤器中处理字符编码</p><p>在框架中使用过滤器：</p><ol><li>创建自定义过滤器类</li><li>注册Filter过滤器对象</li></ol><p>例子：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 自定义过滤器</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyFilter</span> <span class="token keyword">implements</span> <span class="token class-name">Filter</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> servletRequest<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> servletResponse<span class="token punctuation">,</span> <span class="token class-name">FilterChain</span> filterChain<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ServletException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行了MyFilter，doFilter "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        filterChain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>servletRequest<span class="token punctuation">,</span>servletResponse<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注册Filter</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebApplicationConfig</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">FilterRegistrationBean</span> <span class="token function">filterRegistrationBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">FilterRegistrationBean</span> bean  <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FilterRegistrationBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bean<span class="token punctuation">.</span><span class="token function">setFilter</span><span class="token punctuation">(</span> <span class="token keyword">new</span> <span class="token class-name">MyFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bean<span class="token punctuation">.</span><span class="token function">addUrlPatterns</span><span class="token punctuation">(</span><span class="token string">"/user/*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> bean<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-4-字符集过滤器"><a href="#3-4-字符集过滤器" class="headerlink" title="3.4 字符集过滤器"></a>3.4 字符集过滤器</h2><p>CharacterEncodingFilter : 解决post请求中乱码的问题</p><p>在SpringMVC框架， 在web.xml 注册过滤器。 配置他的属性。 </p><p>第一种方式：</p><p>使用步骤：</p><ol><li><p>配置字符集过滤器</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebSystemConfig</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//注册Servlet</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">ServletRegistrationBean</span> <span class="token function">servletRegistrationBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">MyServlet</span> myServlet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyServlet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ServletRegistrationBean</span> reg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServletRegistrationBean</span><span class="token punctuation">(</span>myServlet<span class="token punctuation">,</span><span class="token string">"/myservlet"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> reg<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//注册Filter</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">FilterRegistrationBean</span> <span class="token function">filterRegistrationBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">FilterRegistrationBean</span> reg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FilterRegistrationBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//使用框架中的过滤器类</span>        <span class="token class-name">CharacterEncodingFilter</span> filter  <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CharacterEncodingFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//指定使用的编码方式</span>        filter<span class="token punctuation">.</span><span class="token function">setEncoding</span><span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//指定request ， response都使用encoding的值</span>        filter<span class="token punctuation">.</span><span class="token function">setForceEncoding</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        reg<span class="token punctuation">.</span><span class="token function">setFilter</span><span class="token punctuation">(</span>filter<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//指定 过滤的url地址</span>        reg<span class="token punctuation">.</span><span class="token function">addUrlPatterns</span><span class="token punctuation">(</span><span class="token string">"/*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> reg<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>修改application.properties文件， 让自定义的过滤器起作用</p></li></ol><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token comment">#SpringBoot中默认已经配置了CharacterEncodingFilter。 编码默认ISO-8859-1</span><span class="token comment">#设置enabled=false 作用是关闭系统中配置好的过滤器， 使用自定义的CharacterEncodingFilter</span><span class="token key attr-name">server.servlet.encoding.enabled</span><span class="token punctuation">=</span><span class="token value attr-value">false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>第二种方式</p><p>修改application.properties文件</p><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token key attr-name">server.port</span><span class="token punctuation">=</span><span class="token value attr-value">9001</span><span class="token key attr-name">server.servlet.context-path</span><span class="token punctuation">=</span><span class="token value attr-value">/myboot</span><span class="token comment">#让系统的CharacterEncdoingFilter生效</span><span class="token key attr-name">server.servlet.encoding.enabled</span><span class="token punctuation">=</span><span class="token value attr-value">true</span><span class="token comment">#指定使用的编码方式</span><span class="token key attr-name">server.servlet.encoding.charset</span><span class="token punctuation">=</span><span class="token value attr-value">utf-8</span><span class="token comment">#强制request，response都使用charset属性的值</span><span class="token key attr-name">server.servlet.encoding.force</span><span class="token punctuation">=</span><span class="token value attr-value">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="第四章-ORM-操作-MySQL"><a href="#第四章-ORM-操作-MySQL" class="headerlink" title="第四章 ORM 操作 MySQL"></a>第四章 ORM 操作 MySQL</h1><p>使用MyBatis框架操作数据，  在SpringBoot框架集成MyBatis</p><p>使用步骤：</p><ol><li><p>mybatis起步依赖 ： 完成mybatis对象自动配置， 对象放在容器中</p></li><li><p>pom.xml 指定把src&#x2F;main&#x2F;java目录中的xml文件包含到classpath中</p></li><li><p>创建实体类Student</p></li><li><p>创建Dao接口 StudentDao , 创建一个查询学生的方法 </p></li><li><p>创建Dao接口对应的Mapper文件， xml文件， 写sql语句</p></li><li><p>创建Service层对象， 创建StudentService接口和他的实现类。 去dao对象的方法。完成数据库的操作</p></li><li><p>创建Controller对象，访问Service。</p></li><li><p>写application.properties文件</p><p>配置数据库的连接信息。</p></li></ol><h3 id="第一种方式-：-Mapper"><a href="#第一种方式-：-Mapper" class="headerlink" title="第一种方式 ： @Mapper"></a>第一种方式 ： @Mapper</h3><p>@Mapper：放在dao接口的上面， 每个接口都需要使用这个注解。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @Mapper：告诉MyBatis这是dao接口，创建此接口的代理对象。 *     位置：在类的上面 */</span><span class="token annotation punctuation">@Mapper</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">StudentDao</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Student</span> <span class="token function">selectById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"stuId"</span><span class="token punctuation">)</span> <span class="token class-name">Integer</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第二种方式-MapperScan"><a href="#第二种方式-MapperScan" class="headerlink" title="第二种方式  @MapperScan"></a>第二种方式  @MapperScan</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @MapperScan: 找到Dao接口和Mapper文件 *     basePackages：Dao接口所在的包名 */</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@MapperScan</span><span class="token punctuation">(</span>basePackages <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"com.bjpowernode.dao"</span><span class="token punctuation">,</span><span class="token string">"com.bjpowernode.mapper"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Application</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第三种方式：-Mapper文件和Dao接口分开管理"><a href="#第三种方式：-Mapper文件和Dao接口分开管理" class="headerlink" title="第三种方式： Mapper文件和Dao接口分开管理"></a>第三种方式： Mapper文件和Dao接口分开管理</h3><p> 现在把Mapper文件放在resources目录下</p><p>1）在resources目录中创建子目录 （自定义的） ， 例如mapper</p><p>2）把mapper文件放到 mapper目录中</p><p>3）在application.properties文件中，指定mapper文件的目录</p><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token comment">#指定mapper文件的位置</span><span class="token key attr-name">mybatis.mapper-locations</span><span class="token punctuation">=</span><span class="token value attr-value">classpath:mapper/*.xml</span><span class="token comment">#指定mybatis的日志</span><span class="token key attr-name">mybatis.configuration.log-impl</span><span class="token punctuation">=</span><span class="token value attr-value">org.apache.ibatis.logging.stdout.StdOutImpl</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li>在pom.xml中指定 把resources目录中的文件 ， 编译到目标目录中</li></ol><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--resources插件--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resources</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">></span></span>src/main/resources<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includes</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>includes</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resources</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第四个-事务"><a href="#第四个-事务" class="headerlink" title="第四个  事务"></a>第四个  事务</h3><p>Spring框架中的事务：</p><p>1） 管理事务的对象： 事务管理器（接口， 接口有很多的实现类）</p><p>​      例如：使用Jdbc或mybatis访问数据库，使用的事务管理器：DataSourceTransactionManager</p><p>2 ) 声明式事务：  在xml配置文件或者使用注解说明事务控制的内容</p><p>​     控制事务： 隔离级别，传播行为， 超时时间</p><p>3）事务处理方式：</p><p>​      1） Spring框架中的@Transactional</p><p>​      2)    aspectj框架可以在xml配置文件中，声明事务控制的内容</p><p>​    </p><p>SpringBoot中使用事务： 上面的两种方式都可以。</p><p>1）在业务方法的上面加入@Transactional ,  加入注解后，方法有事务功能了。</p><p>2）明确的在 主启动类的上面 ，加入@EnableTransactionManager</p><p>例子：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @Transactional: 表示方法的有事务支持 *       默认：使用库的隔离级别， REQUIRED 传播行为； 超时时间  -1 *       抛出运行时异常，回滚事务 */</span><span class="token annotation punctuation">@Transactional</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">addStudent</span><span class="token punctuation">(</span><span class="token class-name">Student</span> student<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"业务方法addStudent"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> rows  <span class="token operator">=</span>  studentDao<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行sql语句"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//抛出一个运行时异常， 目的是回滚事务</span>    <span class="token comment">//int m   = 10 / 0 ;</span>    <span class="token keyword">return</span> rows<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="第五章-接口架构风格-—RESTful"><a href="#第五章-接口架构风格-—RESTful" class="headerlink" title="第五章 接口架构风格 —RESTful"></a>第五章 接口架构风格 —RESTful</h1><p>接口： API（Application Programming Interface，应用程序接口）是一些预先定义的接口（如函数、HTTP接口），或指<a href="https://baike.baidu.com/item/%E8%BD%AF%E4%BB%B6%E7%B3%BB%E7%BB%9F/224122">软件系统</a>不同组成部分衔接的约定。 用来提供<a href="https://baike.baidu.com/item/%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F">应用程序</a>与开发人员基于某<a href="https://baike.baidu.com/item/%E8%BD%AF%E4%BB%B6">软件</a>或硬件得以访问的一组<a href="https://baike.baidu.com/item/%E4%BE%8B%E7%A8%8B/2390628">例程</a>，而又无需访问源码，或理解内部<a href="https://baike.baidu.com/item/%E5%B7%A5%E4%BD%9C%E6%9C%BA%E5%88%B6/9905789">工作机制</a>的细节。</p><p>接口（API）： 可以指访问servlet， controller的url，   调用其他程序的 函数</p><p>架构风格： api组织方式（样子）</p><p>   就是一个传统的：    <a href="http://localhost:9002/mytrans/addStudent?name=lisi&amp;age=26">http://localhost:9002/mytrans/addStudent?name=lisi&amp;age=26</a> </p><p>​                                      在地址上提供了 访问的资源名称addStudent, 在其后使用了get方式传递参数。</p><h3 id="5-1-REST"><a href="#5-1-REST" class="headerlink" title="5.1  REST"></a>5.1  REST</h3><p>RESTful架构风格</p><p>1)REST :  （英文： Representational State Transfer , 中文： 表现层状态转移)。</p><p>   REST：是一种接口的架构风格和设计的理念，不是标准。</p><p>   优点： 更简洁，更有层次</p><p>   表现层状态转移: </p><p>​         表现层就是视图层， 显示资源的， 通过视图页面，jsp等等显示操作资源的结果。</p><p>​          状态： 资源变化</p><p>​         转移： 资源可以变化的。 资源能创建，new状态，  资源创建后可以查询资源， 能看到资源的内容，</p><p>这个资源内容 ，可以被修改， 修改后资源 和之前的不一样。  </p><p>2）REST中的要素：</p><p>   用REST表示资源和对资源的操作。  在互联网中，表示一个资源或者一个操作。 </p><p>   资源使用url表示的， 在互联网， 使用的图片，视频， 文本，网页等等都是资源。</p><p>   资源是用名词表示。</p><p>  对资源： </p><p>​        查询资源： 看，通过url找到资源。 </p><p>​        创建资源： 添加资源</p><p>​        更新资源：更新资源 ，编辑</p><p>​        删除资源： 去除</p><p>​       </p><p> 资源使用url表示，通过名词表示资源。</p><p>​     在url中，使用名词表示资源， 以及访问资源的信息,  在url中，使用“ &#x2F; “ 分隔对资源的信息</p><p>​     <a href="http://localhost:8080/myboot/student/1001">http://localhost:8080/myboot/student/1001</a></p><p> 使用http中的动作（请求方式）， 表示对资源的操作（CURD）</p><p>   GET:  查询资源  –  sql select</p><p>​                 处理单个资源： 用他的单数方式</p><p>​                  <a href="http://localhost:8080/myboot/student/1001">http://localhost:8080/myboot/student/1001</a></p><p>​                 <a href="http://localhost:8080/myboot/student/1001/1">http://localhost:8080/myboot/student/1001/1</a></p><p>​                处理多个资源：使用复数形式</p><p>​                  <a href="http://localhost:8080/myboot/students/1001/1002">http://localhost:8080/myboot/students/1001/1002</a></p><p>​                </p><p>   POST: 创建资源  – sql insert</p><p>​                <a href="http://localhost:8080/myboot/student">http://localhost:8080/myboot/student</a></p><p>​                在post请求中传递数据</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://localhost:8080/myboot/student<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>姓名：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    年龄：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>   PUT： 更新资源  –  sql  update</p>   <pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://localhost:8080/myboot/student/1<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>姓名：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    年龄：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>_method<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>PUT<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>   DELETE: 删除资源  – sql delete</p><pre><code><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://localhost:8080/myboot/student/1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>删除1的数据<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none"> 需要的分页，  排序等参数，依然放在  url的后面， 例如  http:&#x2F;&#x2F;localhost:8080&#x2F;myboot&#x2F;students?page&#x3D;1&amp;pageSize&#x3D;20   &#96;  3） 一句话说明REST： ​    使用url表示资源 ，使用http动作操作资源。4) 注解  @PathVariable :  从url中获取数据  @GetMapping:    支持的get请求方式，  等同于 @RequestMapping( method&#x3D;RequestMethod.GET)  @PostMapping:  支持post请求方式 ，等同于 @RequestMapping( method&#x3D;RequestMethod.POST)  @PutMapping:  支持put请求方式，  等同于 @RequestMapping( method&#x3D;RequestMethod.PUT)   @DeleteMapping: 支持delete请求方式，  等同于 @RequestMapping( method&#x3D;RequestMethod.DELETE)    @RestController:  符合注解， 是@Controller 和@ResponseBody组合。​               在类的上面使用@RestController ， 表示当前类者的所有方法都加入了 @ResponseBody5) Postman : 测试工具   使用Postman : 可以测试 get ，post ， put ，delete 等请求### 5.2  在页面中或者ajax中，支持put，delete请求在SpringMVC中 有一个过滤器， 支持post请求转为put ,delete过滤器： org.springframework.web.filter.HiddenHttpMethodFilter作用： 把请求中的post请求转为 put ， delete实现步骤：1. application.properties(yml) : 开启使用 HiddenHttpMethodFilter 过滤器2. 在请求页面中，包含 _method参数， 他的值是 put， delete  ，  发起这个请求使用的post方式# 第六章 RedisRedis ： 一个NoSQL数据库，  常用作 缓存使用 （cache）Redis的数据类型： string  ,  hash  ,set  ,zset , listRedis是一个中间件： 是一个独立的服务器。java中著名的客户端： Jedis ，  lettuce ， RedissonSpring,SpringBoot中有 一个RedisTemplate（StringRedisTemplate） ，处理和redis交互  ## 6.1  配置Windows版本的redisRedis-x64-3.2.100.rar 解压缩到一个 非中文 的目录redis-server.exe：服务端， 启动后，不要关闭redis-cli.exe：客户端， 访问redis中的数据redisclient-win32.x86_64.2.0.jar : Redis图形界面客户端执行方式： 在这个文件所在的目录，  执行 java -jar redisclient-win32.x86_64.2.0.jarRedisTemplate 使用的  lettuce 客户端库&#96;&#96;&#96;xml&lt;!--redis起步依赖： 直接在项目中使用RedisTemplate(StringRedisTemplate)--&gt;&lt;dependency&gt;   &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;   &lt;artifactId&gt;spring-boot-starter-data-redis&lt;&#x2F;artifactId&gt;&lt;&#x2F;dependency&gt;data-redis使用的   lettuce 客户端库在程序中使用RedisTemplate类的方法 操作redis数据， 实际就是调用的lettuce 客户端的中的方法<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></code></pre><h2 id="6-2-对比-StringRedisTemplate-和-RedisTemplate"><a href="#6-2-对比-StringRedisTemplate-和-RedisTemplate" class="headerlink" title="6.2 对比 StringRedisTemplate 和 RedisTemplate"></a>6.2 对比 StringRedisTemplate 和 RedisTemplate</h2><p>StringRedisTemplate ： 把k，v 都是作为String处理， 使用的是String的序列化 ， 可读性好</p><p>RedisTemplate ： 把k，v 经过了序列化存到redis。 k，v 是序列化的内容， 不能直接识别.</p><p>​                                 默认使用的jdk序列化， 可以修改为前提的序列化</p><p> 序列化：把对象转化为可传输的字节序列过程称为序列化。</p><p>反序列化：把字节序列还原为对象的过程称为反序列化。</p><p>为什么需要序列化</p><p>序列化最终的目的是为了对象可以跨平台存储，和进行网络传输。而我们进行跨平台存储和网络传输的方式就是IO，而我们的IO支持的数据格式就是字节数组。我们必须在把对象转成字节数组的时候就制定一种规则（序列化），那么我们从IO流里面读出数据的时候再以这种规则把对象还原回来（反序列化）。</p><p>什么情况下需要序列化</p><p>通过上面我想你已经知道了凡是需要进行“跨平台存储”和”网络传输”的数据，都需要进行序列化。</p><p>本质上存储和网络传输 都需要经过 把一个对象状态保存成一种跨平台识别的字节格式，然后其他的平台才可以通过字节信息解析还原对象信息。</p><p>序列化的方式</p><p>序列化只是一种拆装组装对象的规则，那么这种规则肯定也可能有多种多样，比如现在常见的序列化方式有：</p><p>JDK（不支持跨语言）、JSON、XML、Hessian、Kryo（不支持跨语言）、Thrift、Protofbuff、</p><p>Student( name&#x3D;zs, age&#x3D;20)   —-  { “name”:”zs”, “age”:20 }</p><p>java的序列化： 把java对象转为byte[], 二进制数据</p><p>json序列化：json序列化功能将对象转换为 JSON 格式或从 JSON 格式转换对象。例如把一个Student对象转换为JSON字符串{“name”:”李四”, “age”:29} )，反序列化(将JSON字符串 {“name”:”李四”, “age”:29} 转换为Student对象)</p><p>设置key或者value的序列化方式</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 使用RedisTemplate ，在存取值之前，设置序列化</span><span class="token comment">// 设置 key 使用String的序列化</span>redisTemplate<span class="token punctuation">.</span><span class="token function">setKeySerializer</span><span class="token punctuation">(</span> <span class="token keyword">new</span> <span class="token class-name">StringRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 设置 value 的序列化</span>redisTemplate<span class="token punctuation">.</span><span class="token function">setValueSerializer</span><span class="token punctuation">(</span> <span class="token keyword">new</span> <span class="token class-name">StringRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="第八章-打包"><a href="#第八章-打包" class="headerlink" title="第八章  打包"></a>第八章  打包</h1><h2 id="8-1-打包war"><a href="#8-1-打包war" class="headerlink" title="8.1 打包war"></a>8.1 打包war</h2><p>1.创建了一个jsp应用</p><p>2.修改pom.xml</p><p> 1)指定打包后的文件名称</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>   <span class="token comment">&lt;!--打包后的文件名称--></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>finalName</span><span class="token punctuation">></span></span>myboot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>finalName</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>2)指定jsp编译目录</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--resources插件， 把jsp编译到指定的目录--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resources</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">></span></span>src/main/webapp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>targetPath</span><span class="token punctuation">></span></span>META-INF/resources<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>targetPath</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includes</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>includes</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">></span></span>   <span class="token comment">&lt;!--使用了mybatis ，而且mapper文件放在src/main/java目录--></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">></span></span>src/main/java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includes</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>includes</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">></span></span>   <span class="token comment">&lt;!--把src/main/resources下面的所有文件，都包含到classes目录--></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">></span></span>src/main/resources<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includes</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>includes</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resources</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3）执行打包是war</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--打包类型--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>packaging</span><span class="token punctuation">></span></span>war<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>packaging</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>4）主启动类继承SpringBootServletInitializer</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * SpringBootServletInitializer: 继承这个类， 才能使用独立tomcat服务器 */</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JspApplication</span>  <span class="token keyword">extends</span> <span class="token class-name">SpringBootServletInitializer</span>  <span class="token punctuation">&#123;</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">JspApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token annotation punctuation">@Override</span>   <span class="token keyword">protected</span> <span class="token class-name">SpringApplicationBuilder</span> <span class="token function">configure</span><span class="token punctuation">(</span><span class="token class-name">SpringApplicationBuilder</span> builder<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> builder<span class="token punctuation">.</span><span class="token function">sources</span><span class="token punctuation">(</span><span class="token class-name">JspApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>5）部署war</p><p> 把war放到tomcat等服务器的发布目录中。  tomcat为例， myboot.war放到tomcat&#x2F;webapps目录。</p><h2 id="8-2-打包为jar"><a href="#8-2-打包为jar" class="headerlink" title="8.2 打包为jar"></a>8.2 打包为jar</h2><p>1.创建了一个包含了jsp的项目</p><p>2.修改pom.xml</p><p>​     1) 指定打包后的文件名称</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>   <span class="token comment">&lt;!--打包后的文件名称--></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>finalName</span><span class="token punctuation">></span></span>myboot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>finalName</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>指定springboot-maven-plugin版本</li></ol><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token comment">&lt;!--打包jar， 有jsp文件时，必须指定maven-plugin插件的版本是 1.4.2.RELEASE--></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.4.2.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3）最后执行 maven clean package</p><p>​       在target目录中，生成jar 文件， 例子是myboot.jar</p><p>​       执行独立的springboot项目  在cmd中 java  -jar  myboot.jar</p><h1 id="第九章-总结"><a href="#第九章-总结" class="headerlink" title="第九章 总结"></a>第九章 总结</h1><h2 id="9-1-注解"><a href="#9-1-注解" class="headerlink" title="9.1 注解"></a>9.1 注解</h2><p>Spring + SpringMVC + SpringBoot </p><pre class="line-numbers language-java" data-language="java"><code class="language-java">创建对象的：<span class="token annotation punctuation">@Controller</span><span class="token operator">:</span> 放在类的上面，创建控制器对象，注入到容器中<span class="token annotation punctuation">@RestController</span><span class="token operator">:</span> 放在类的上面，创建控制器对象，注入到容器中。             作用：复合注解是<span class="token annotation punctuation">@Controller</span> <span class="token punctuation">,</span> <span class="token annotation punctuation">@ResponseBody</span><span class="token punctuation">,</span> 使用这个注解类的，里面的控制器方法的返回值                   都是数据<span class="token annotation punctuation">@Service</span> ： 放在业务层的实现类上面，创建service对象，注入到容器<span class="token annotation punctuation">@Repository</span> <span class="token operator">:</span> 放在dao层的实现类上面，创建dao对象，放入到容器。 没有使用这个注解，是因为现在使用<span class="token class-name">MyBatis</span>框               架，  dao对象是<span class="token class-name">MyBatis</span>通过代理生成的。 不需要使用<span class="token annotation punctuation">@Repository</span>、 所以没有使用。<span class="token annotation punctuation">@Component</span><span class="token operator">:</span>  放在类的上面，创建此类的对象，放入到容器中。 赋值的：<span class="token annotation punctuation">@Value</span> ： 简单类型的赋值， 例如 在属性的上面使用<span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"李四"</span><span class="token punctuation">)</span> <span class="token keyword">private</span> <span class="token class-name">String</span> name          还可以使用<span class="token annotation punctuation">@Value</span><span class="token punctuation">,</span>获取配置文件者的数据（properties或yml）。           <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"$&#123;server.port&#125;"</span><span class="token punctuation">)</span> <span class="token keyword">private</span> <span class="token class-name">Integer</span> port<span class="token annotation punctuation">@Autowired</span><span class="token operator">:</span> 引用类型赋值自动注入的，支持byName<span class="token punctuation">,</span> byType<span class="token punctuation">.</span> 默认是byType 。 放在属性的上面，也可以放在构造             方法的上面。 推荐是放在构造方法的上面<span class="token annotation punctuation">@Qualifer</span><span class="token operator">:</span>  给引用类型赋值，使用byName方式。               <span class="token annotation punctuation">@Autowird</span><span class="token punctuation">,</span> <span class="token annotation punctuation">@Qualifer</span>都是<span class="token class-name">Spring</span>框架提供的。<span class="token annotation punctuation">@Resource</span> ： 来自jdk中的定义， javax<span class="token punctuation">.</span>annotation。 实现引用类型的自动注入， 支持byName<span class="token punctuation">,</span> byType<span class="token punctuation">.</span>             默认是byName<span class="token punctuation">,</span> 如果byName失败， 再使用byType注入。 在属性上面使用其他：<span class="token annotation punctuation">@Configuration</span> ： 放在类的上面，表示这是个配置类，相当于xml配置文件<span class="token annotation punctuation">@Bean</span>：放在方法的上面， 把方法的返回值对象，注入到spring容器中。<span class="token annotation punctuation">@ImportResource</span> ： 加载其他的xml配置文件， 把文件中的对象注入到spring容器中<span class="token annotation punctuation">@PropertySource</span> ： 读取其他的properties属性配置文件<span class="token annotation punctuation">@ComponentScan</span>： 扫描器 ，指定包名，扫描注解的<span class="token annotation punctuation">@ResponseBody</span><span class="token operator">:</span> 放在方法的上面，表示方法的返回值是数据， 不是视图<span class="token annotation punctuation">@RequestBody</span> <span class="token operator">:</span> 把请求体中的数据，读取出来， 转为java对象使用。<span class="token annotation punctuation">@ControllerAdvice</span><span class="token operator">:</span>  控制器增强， 放在类的上面， 表示此类提供了方法，可以对controller增强功能。<span class="token annotation punctuation">@ExceptionHandler</span> <span class="token operator">:</span> 处理异常的，放在方法的上面<span class="token annotation punctuation">@Transcational</span> <span class="token operator">:</span>  处理事务的， 放在service实现类的<span class="token keyword">public</span>方法上面， 表示此方法有事务<span class="token class-name">SpringBoot</span>中使用的注解    <span class="token annotation punctuation">@SpringBootApplication</span> ： 放在启动类上面， 包含了<span class="token annotation punctuation">@SpringBootConfiguration</span>                          <span class="token annotation punctuation">@EnableAutoConfiguration</span>， <span class="token annotation punctuation">@ComponentScan</span><span class="token class-name">MyBatis</span>相关的注解<span class="token annotation punctuation">@Mapper</span> ： 放在类的上面 ， 让<span class="token class-name">MyBatis</span>找到接口， 创建他的代理对象    <span class="token annotation punctuation">@MapperScan</span> <span class="token operator">:</span>放在主类的上面 ， 指定扫描的包， 把这个包中的所有接口都创建代理对象。 对象注入到容器中<span class="token annotation punctuation">@Param</span> ： 放在dao接口的方法的形参前面， 作为命名参数使用的。   <span class="token class-name">Dubbo</span>注解<span class="token annotation punctuation">@DubboService</span><span class="token operator">:</span> 在提供者端使用的，暴露服务的， 放在接口的实现类上面<span class="token annotation punctuation">@DubboReference</span><span class="token operator">:</span>  在消费者端使用的， 引用远程服务， 放在属性上面使用。<span class="token annotation punctuation">@EnableDubbo</span> <span class="token operator">:</span> 放在主类上面， 表示当前引用启用<span class="token class-name">Dubbo</span>功能。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 后端开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redisson分布式锁</title>
      <link href="/2022/10/29/redisson-fen-bu-shi-suo/"/>
      <url>/2022/10/29/redisson-fen-bu-shi-suo/</url>
      
        <content type="html"><![CDATA[<h1 id="1-分布式锁"><a href="#1-分布式锁" class="headerlink" title="1.分布式锁"></a>1.分布式锁</h1><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Bean</span> <span class="token keyword">public</span> <span class="token class-name">Redisson</span> <span class="token function">redisson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>     <span class="token comment">//单机配置</span>     <span class="token class-name">Config</span> config <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     config<span class="token punctuation">.</span><span class="token function">useSingleServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAddress</span><span class="token punctuation">(</span><span class="token string">"redis://localhost:6379"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setDatabase</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">Redisson</span><span class="token punctuation">)</span> <span class="token class-name">Redisson</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-data-redis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--        分布式锁--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.redisson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>redisson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.6.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Resource</span><span class="token keyword">private</span> <span class="token class-name">Redisson</span> redisson<span class="token punctuation">;</span><span class="token class-name">String</span> key <span class="token operator">=</span> xxx<span class="token class-name">Rlock</span> lock <span class="token operator">=</span> redisson<span class="token punctuation">.</span><span class="token function">getLock</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token comment">//上锁</span>lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//解锁</span>lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="2-读写锁"><a href="#2-读写锁" class="headerlink" title="2.读写锁"></a>2.读写锁</h1><ul><li>保证一定能读取到最新的数据，修改期间，写锁是一个互斥锁，读锁是一个共享锁<ul><li>读+读：相当于无锁，并发读</li><li>写+读：等待写锁释放，在执行读锁</li><li>写+写：阻塞</li><li>读+写：等待读锁释放，在执行写锁</li></ul></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">RReadWriteLock</span> lock <span class="token operator">=</span> redisson<span class="token punctuation">.</span><span class="token function">getReadWriteLock</span><span class="token punctuation">(</span><span class="token string">"锁名"</span><span class="token punctuation">)</span><span class="token comment">//写锁</span><span class="token class-name">Rlock</span> lock <span class="token operator">=</span> lock<span class="token punctuation">.</span><span class="token function">writeLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//读锁</span><span class="token class-name">Rlock</span> lock <span class="token operator">=</span> lock<span class="token punctuation">.</span><span class="token function">readLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="3-信号量锁"><a href="#3-信号量锁" class="headerlink" title="3.信号量锁"></a>3.信号量锁</h1><ul><li>指定一个信号量锁key，然后自己赋值，只有获取到有设定的值不为0的情况才能执行业务,否则阻塞(<strong>acquire</strong>)或返回false(<strong>tryAcquire</strong>)</li><li>比如卖东西使用这个锁就不错</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">RSeaphore</span> park <span class="token operator">=</span> redisson<span class="token punctuation">.</span><span class="token function">getSemaphore</span><span class="token punctuation">(</span><span class="token string">"信号量的key"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取阻塞信号量锁（信号量锁-1）</span> park<span class="token punctuation">.</span><span class="token function">acquire</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//如果信号量的值等于0，则一直等待阻塞</span><span class="token comment">//获取非阻塞信号量锁（信号量锁-1）</span><span class="token keyword">boolean</span> flag <span class="token operator">=</span>  park<span class="token punctuation">.</span><span class="token function">tryAcquire</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">//如果信号量的值等于0，直接返回flase，大于0则返回true</span><span class="token class-name">RSeaphore</span> park <span class="token operator">=</span> redisson<span class="token punctuation">.</span><span class="token function">getSemaphore</span><span class="token punctuation">(</span><span class="token string">"信号量的key"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//释放一个锁（信号量锁+1）</span>park<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="4-闭锁"><a href="#4-闭锁" class="headerlink" title="4.闭锁"></a>4.闭锁</h1><ul><li>指定一个数，然后等待，等这个数的锁全部释放完毕执行业务</li><li>用于等待别的业务全部执行完在执行当前业务的场景</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">RCountDownLatch</span> lock <span class="token operator">=</span> redisson<span class="token punctuation">.</span><span class="token function">getCountDownLatch</span><span class="token punctuation">(</span><span class="token string">"闭锁名"</span><span class="token punctuation">)</span>lock<span class="token punctuation">.</span><span class="token function">trySetCount</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>lock<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//等待闭锁都完成</span><span class="token class-name">RCountDownLatch</span> lock <span class="token operator">=</span> redisson<span class="token punctuation">.</span><span class="token function">getCountDownLatch</span><span class="token punctuation">(</span><span class="token string">"闭锁名"</span><span class="token punctuation">)</span>lock<span class="token punctuation">.</span><span class="token function">countDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//计数减1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> nosql </category>
          
          <category> redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> nosql </tag>
            
            <tag> redis </tag>
            
            <tag> 分布式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis中的Wrapper</title>
      <link href="/2022/10/17/mybati-plus/"/>
      <url>/2022/10/17/mybati-plus/</url>
      
        <content type="html"><![CDATA[<h1 id="1-Wrapper"><a href="#1-Wrapper" class="headerlink" title="1.Wrapper"></a>1.Wrapper</h1><p>用于sql中where的查询条件</p><p>实例</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">QueryWrapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">QueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">></span></span> wrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//        组装条件</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> map<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//map&lt;key,value> key列名，value查询的值</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span><span class="token string">"吕飞扬"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">,</span><span class="token string">"22"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        wrapper<span class="token punctuation">.</span><span class="token function">allEq</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//调用map自己的查询方法</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">></span></span> students <span class="token operator">=</span> studentMapper<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Student</span> student <span class="token operator">:</span> students<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其实就是和Mybatis逆向工程差不多的东西，Wrapper是一个工具，用于封装条件，然后使用MP自带的查询，把Wrapper作为参数传进去就可以了</p><h1 id="2-方法解读"><a href="#2-方法解读" class="headerlink" title="2.方法解读"></a>2.方法解读</h1><h4 id="2-1）select篇：QueryWrapper"><a href="#2-1）select篇：QueryWrapper" class="headerlink" title="2.1）select篇：QueryWrapper"></a>2.1）select篇：QueryWrapper</h4><ul><li><h5 id="allEq-：基于map的相等"><a href="#allEq-：基于map的相等" class="headerlink" title="allEq()：基于map的相等"></a>allEq()：基于map的相等</h5><ul><li>参数map（），用于封装查询条件</li><li>如果Map对象中有key的value是null，则需要传入第二个参数boolean<ul><li>这个参数是用于判断是否考察是否要将null作为条件</li><li>true：处理空值，where条件加入字段is null</li><li>false：忽略空值,不作为where条件</li></ul></li></ul></li><li><h5 id="last-拼接sql语句"><a href="#last-拼接sql语句" class="headerlink" title="last:拼接sql语句"></a>last:拼接sql语句</h5><ul><li>可以在QueryWrapper调用方法之后在调用last(SQL语句片段)</li></ul></li><li><h5 id="eq-：-x3D"><a href="#eq-：-x3D" class="headerlink" title="eq()：&#x3D;"></a>eq()：&#x3D;</h5><ul><li>参数（“列名”，“值”）</li><li>查询条件相等的</li></ul></li><li><h5 id="ne-：！-x3D"><a href="#ne-：！-x3D" class="headerlink" title="ne()：！&#x3D;"></a>ne()：！&#x3D;</h5><ul><li>参数（“列名”，“值”）</li><li>查询条件不相等的</li></ul></li><li><h5 id="gt-gt"><a href="#gt-gt" class="headerlink" title="gt(): &gt;"></a>gt(): &gt;</h5><ul><li>参数（“列名”，“值”）</li></ul></li><li><h5 id="ge-gt-x3D"><a href="#ge-gt-x3D" class="headerlink" title="ge(): &gt;&#x3D;"></a>ge(): &gt;&#x3D;</h5><ul><li>参数（“列名”，“值”）</li></ul></li><li><h5 id="lt-lt"><a href="#lt-lt" class="headerlink" title="lt(): &lt;"></a>lt(): &lt;</h5><ul><li>参数（“列名”，“值”）</li></ul></li><li><h5 id="le-lt-x3D"><a href="#le-lt-x3D" class="headerlink" title="le(): &lt;&#x3D;"></a>le(): &lt;&#x3D;</h5><ul><li>参数（“列名”，“值”）</li></ul></li><li><h5 id="between-在（？-and-？）"><a href="#between-在（？-and-？）" class="headerlink" title="between(): 在（？ and ？）"></a>between(): 在（？ and ？）</h5><ul><li>参数（“列名”，“初始值”，“结束值”）</li><li>包含等于</li><li>where 列名&gt;&#x3D;初始值 and 列名&lt;&#x3D;结束值</li></ul></li><li><h5 id="nobetween-不在（？and？）"><a href="#nobetween-不在（？and？）" class="headerlink" title="nobetween(): 不在（？and？）"></a>nobetween(): 不在（？and？）</h5><ul><li>参数（“列名”，“初始值”，“结束值”）</li><li>where 列名&lt;初始值 and 列名&gt;结束值</li></ul></li><li><h5 id="like-：匹配值"><a href="#like-：匹配值" class="headerlink" title="like()：匹配值"></a>like()：匹配值</h5><ul><li>参数（“列名”，“值”）</li><li>like ‘%值%’</li></ul></li><li><h5 id="notlike-：不匹配值"><a href="#notlike-：不匹配值" class="headerlink" title="notlike()：不匹配值"></a>notlike()：不匹配值</h5><ul><li>参数（“列名”，“值”）</li><li>not like ‘%值%’</li></ul></li><li><h5 id="likeLeft"><a href="#likeLeft" class="headerlink" title="likeLeft"></a>likeLeft</h5><ul><li>like ‘%值’</li></ul></li><li><h5 id="likerRight"><a href="#likerRight" class="headerlink" title="likerRight"></a>likerRight</h5><ul><li>like ‘值%’</li></ul></li><li><h5 id="is-null"><a href="#is-null" class="headerlink" title="is null"></a>is null</h5><ul><li>参数（“列名”）</li></ul></li><li><h5 id="is-not-null"><a href="#is-not-null" class="headerlink" title="is not null"></a>is not null</h5><ul><li>参数（“列名”）</li></ul></li><li><h5 id="in"><a href="#in" class="headerlink" title="in"></a>in</h5><ul><li>参数（“列名”，“值”，“值”，…..）</li></ul></li><li><h5 id="not-in"><a href="#not-in" class="headerlink" title="not in"></a>not in</h5><ul><li>参数（“列名”，“值”，“值”，…….）</li></ul></li><li><h5 id="inSql：子查询"><a href="#inSql：子查询" class="headerlink" title="inSql：子查询"></a>inSql：子查询</h5><ul><li>参数（“列名”，“sql语句”）</li><li>where 列名 in sql语句结果</li></ul></li><li><h5 id="notInSql：子查询"><a href="#notInSql：子查询" class="headerlink" title="notInSql：子查询"></a>notInSql：子查询</h5><ul><li>参数（“列名”，“sql语句”）</li><li>where 列名 not in sql语句结果</li></ul></li><li><h5 id="groupBy：自己写吧，没必要用MP框架写这个"><a href="#groupBy：自己写吧，没必要用MP框架写这个" class="headerlink" title="groupBy：自己写吧，没必要用MP框架写这个"></a>groupBy：自己写吧，没必要用MP框架写这个</h5></li><li><h5 id="OderByAsc：按字段升序"><a href="#OderByAsc：按字段升序" class="headerlink" title="OderByAsc：按字段升序"></a>OderByAsc：按字段升序</h5><ul><li>参数（“列名”，……）</li></ul></li><li><h5 id="OderByDesc：按字段降序"><a href="#OderByDesc：按字段降序" class="headerlink" title="OderByDesc：按字段降序"></a>OderByDesc：按字段降序</h5><ul><li>参数（“列名”，……）</li></ul></li><li><h5 id="orderBy-："><a href="#orderBy-：" class="headerlink" title="orderBy()："></a>orderBy()：</h5><ul><li>参数<ul><li>boolean condition：条件内容是否加入到sql语句的后面。</li><li>boolean isAsc：升序true 降序 false</li><li>colums：“列名”</li></ul></li></ul></li><li><h5 id="exists：拼接sql"><a href="#exists：拼接sql" class="headerlink" title="exists：拼接sql"></a>exists：拼接sql</h5><ul><li><p>参数（“SQL语句”）</p></li><li><p>实例</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">qw<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token string">"select * from student where age > 20"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>判断子查询条件是否成立</li></ul></li></ul></li><li><h5 id="not-exists-和上面的相反"><a href="#not-exists-和上面的相反" class="headerlink" title="not exists: 和上面的相反"></a>not exists: 和上面的相反</h5></li></ul><h3 id="2-2）分页"><a href="#2-2）分页" class="headerlink" title="2.2）分页"></a>2.2）分页</h3><ol><li><h5 id="配置分页插件，实现物理分页，默认是内存分页"><a href="#配置分页插件，实现物理分页，默认是内存分页" class="headerlink" title="配置分页插件，实现物理分页，默认是内存分页"></a>配置分页插件，实现物理分页，默认是内存分页</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Config</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">PaginationInterceptor</span> <span class="token function">paginationInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">PaginationInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><h5 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java">    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testpage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//创建qw</span>        <span class="token class-name">QueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">></span></span> wq <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//创建page</span>        <span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">></span></span> page <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//指定分页数据</span>        page<span class="token punctuation">.</span><span class="token function">setCurrent</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//第一页</span>        page<span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//每页记录数</span>        <span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">></span></span> result <span class="token operator">=</span> studentMapper<span class="token punctuation">.</span><span class="token function">selectPage</span><span class="token punctuation">(</span>page<span class="token punctuation">,</span> wq<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//获取分页后的记录</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">></span></span> students <span class="token operator">=</span> result<span class="token punctuation">.</span><span class="token function">getRecords</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"当前页分隔线============================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Student</span> student <span class="token operator">:</span> students<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"当前页分隔线============================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//有多少页</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"有多少页"</span><span class="token operator">+</span>result<span class="token punctuation">.</span><span class="token function">getPages</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//总记录数</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"总记录数"</span><span class="token operator">+</span>result<span class="token punctuation">.</span><span class="token function">getTotal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//当前页码</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"当前页码"</span><span class="token operator">+</span>result<span class="token punctuation">.</span><span class="token function">getCurrent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//每页的记录数</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"每页的记录数"</span><span class="token operator">+</span>result<span class="token punctuation">.</span><span class="token function">getSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="3-创建对象时自动赋值"><a href="#3-创建对象时自动赋值" class="headerlink" title="3.创建对象时自动赋值"></a>3.创建对象时自动赋值</h1><h3 id="3-1）实体类"><a href="#3-1）实体类" class="headerlink" title="3.1）实体类"></a>3.1）实体类</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dept</span> <span class="token keyword">extends</span> <span class="token class-name">Model</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Dept</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token number">1L</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@TableId</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"id"</span><span class="token punctuation">,</span> type <span class="token operator">=</span> <span class="token class-name">IdType</span><span class="token punctuation">.</span><span class="token constant">AUTO</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> mobile<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> manager<span class="token punctuation">;</span>    <span class="token annotation punctuation">@TableField</span><span class="token punctuation">(</span>fill <span class="token operator">=</span> <span class="token class-name">FieldFill</span><span class="token punctuation">.</span><span class="token constant">INSERT</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">Date</span> create_time<span class="token punctuation">;</span>    <span class="token annotation punctuation">@TableField</span><span class="token punctuation">(</span>fill <span class="token operator">=</span> <span class="token class-name">FieldFill</span><span class="token punctuation">.</span><span class="token constant">INSERT_UPDATE</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">Date</span> update_time<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>在属性上面添加 <strong>@TableField(fill &#x3D; FieldFill.INSERT_UPDATE)<strong>用来指定什么时候</strong>触发自动填充值</strong></li></ul><h3 id="3-2）配置类"><a href="#3-2）配置类" class="headerlink" title="3.2）配置类"></a>3.2）配置类</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyBatisConfig</span> <span class="token keyword">implements</span> <span class="token class-name">MetaObjectHandler</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insertFill</span><span class="token punctuation">(</span><span class="token class-name">MetaObject</span> metaObject<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setFieldValByName</span><span class="token punctuation">(</span><span class="token string">"create_time"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>metaObject<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">updateFill</span><span class="token punctuation">(</span><span class="token class-name">MetaObject</span> metaObject<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setFieldValByName</span><span class="token punctuation">(</span><span class="token string">"update_time"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>metaObject<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href=""></a>实现MetaObjectHandler接口重写更新和创建的方法</p><ul><li>两个方法用于创建和更新时触发</li><li><strong>方法中参数为  字段名，填充值，metaObject</strong></li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> 框架 </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis原子删除token</title>
      <link href="/2022/10/17/lua-yuan-zi-shan-chu-token/"/>
      <url>/2022/10/17/lua-yuan-zi-shan-chu-token/</url>
      
        <content type="html"><![CDATA[<h1 id="reids原子删除token的lua脚本"><a href="#reids原子删除token的lua脚本" class="headerlink" title="reids原子删除token的lua脚本"></a>reids原子删除token的lua脚本</h1><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//lua脚本</span>        <span class="token class-name">String</span> sctipt<span class="token operator">=</span><span class="token string">"if redis.call('get', KEYS[1]) == ARGV[1] then return redis.call('del', KEYS[1]) else return 0 end"</span><span class="token punctuation">;</span>        <span class="token comment">//获取一直指定的值，当值相等时，删除值，0代表删除失败（对比失败），1：删除成功</span>        <span class="token class-name">Long</span> result <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Long</span><span class="token punctuation">)</span> redisTemplate<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DefaultRedisScript</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>sctipt<span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token class-name">OrderConstant</span><span class="token punctuation">.</span><span class="token constant">ORDER_TOKEN</span> <span class="token operator">+</span> memberEntity<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> orderSubmit<span class="token punctuation">.</span><span class="token function">getOrderToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>其中sctipt脚本的意思是，传入一个key，redis去get这个key与传入的ARGV数组进行对比，如果对比相同，则删除这个key并返回1，如果对比失败，返回0,</li><li>redisTemplate.execute（）执行lua脚本<ul><li>参数 new DefaultRedisScript((脚本，返回值类型),redis用于get的key，与get到的值相对比的值)</li><li>返回值 0 或 1</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> redis </tag>
            
            <tag> lua </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringCache</title>
      <link href="/2022/10/09/springcache/"/>
      <url>/2022/10/09/springcache/</url>
      
        <content type="html"><![CDATA[<h1 id="1-Spring-Cache-环境"><a href="#1-Spring-Cache-环境" class="headerlink" title="1.Spring Cache 环境"></a>1.Spring Cache 环境</h1><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-cache<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>使用redis 作为缓存 ， 在yml文件中</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">cache</span><span class="token punctuation">:</span>    <span class="token key atrule">type</span><span class="token punctuation">:</span> redis <span class="token comment">#指定缓存类型</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>开启缓存功能注解 @EnableChing</strong></p><h3 id="1-1）为什么使用Spring-Cache"><a href="#1-1）为什么使用Spring-Cache" class="headerlink" title="1.1）为什么使用Spring Cache"></a>1.1）为什么使用Spring Cache</h3><p>通常在使用到缓存时，业务逻辑通常为  查缓存， 有缓存？直接返回缓存，无缓存？从db中查数据，放入缓存，在返回数据。代码毫无技术可言且每个方法流程几乎一致，非常繁琐</p><p>使用Cache 的注解即可帮我们自动实现，省去了繁琐的代码</p><h3 id="1-2）配置类"><a href="#1-2）配置类" class="headerlink" title="1.2）配置类"></a>1.2）配置类</h3><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">cache</span><span class="token punctuation">:</span>    <span class="token key atrule">type</span><span class="token punctuation">:</span> redis    <span class="token key atrule">redis</span><span class="token punctuation">:</span>      <span class="token comment">#指定key 前缀，如果没指定，则用注解上的value作为前缀 </span>      <span class="token key atrule">key-prefix</span><span class="token punctuation">:</span> CACH_      <span class="token comment">#是否开启前缀，默认true</span>      <span class="token key atrule">use-key-prefix</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>      <span class="token comment">#是否存储空值，防止缓存穿透</span>      <span class="token key atrule">cache-null-values</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@EnableCaching</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CacheConfig</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">RedisCacheConfiguration</span> <span class="token function">redisCacheConfiguration</span><span class="token punctuation">(</span><span class="token class-name">CacheProperties</span> cacheProperties<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">RedisCacheConfiguration</span> config <span class="token operator">=</span> <span class="token class-name">RedisCacheConfiguration</span><span class="token punctuation">.</span><span class="token function">defaultCacheConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//序列化key</span>        config <span class="token operator">=</span> config<span class="token punctuation">.</span><span class="token function">serializeKeysWith</span><span class="token punctuation">(</span><span class="token class-name">RedisSerializationContext<span class="token punctuation">.</span>SerializationPair</span><span class="token punctuation">.</span><span class="token function">fromSerializer</span><span class="token punctuation">(</span><span class="token keyword">new</span>   <span class="token class-name">StringRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//序列化value</span>       config <span class="token operator">=</span>  config<span class="token punctuation">.</span><span class="token function">serializeValuesWith</span><span class="token punctuation">(</span><span class="token class-name">RedisSerializationContext<span class="token punctuation">.</span>SerializationPair</span><span class="token punctuation">.</span><span class="token function">fromSerializer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">GenericJackson2JsonRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">CacheProperties<span class="token punctuation">.</span>Redis</span> redisProperties <span class="token operator">=</span> cacheProperties<span class="token punctuation">.</span><span class="token function">getRedis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//将配置文件中的所有配置都生效</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>redisProperties<span class="token punctuation">.</span><span class="token function">getTimeToLive</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            config <span class="token operator">=</span> config<span class="token punctuation">.</span><span class="token function">entryTtl</span><span class="token punctuation">(</span>redisProperties<span class="token punctuation">.</span><span class="token function">getTimeToLive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>redisProperties<span class="token punctuation">.</span><span class="token function">getKeyPrefix</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            config <span class="token operator">=</span> config<span class="token punctuation">.</span><span class="token function">prefixKeysWith</span><span class="token punctuation">(</span>redisProperties<span class="token punctuation">.</span><span class="token function">getKeyPrefix</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>redisProperties<span class="token punctuation">.</span><span class="token function">isCacheNullValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            config <span class="token operator">=</span> config<span class="token punctuation">.</span><span class="token function">disableCachingNullValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>redisProperties<span class="token punctuation">.</span><span class="token function">isUseKeyPrefix</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            config <span class="token operator">=</span> config<span class="token punctuation">.</span><span class="token function">disableKeyPrefix</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> config<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="2-基本使用"><a href="#2-基本使用" class="headerlink" title="2.基本使用"></a>2.基本使用</h1><p>redis中的会以分区名为文件夹，放入的缓存 ，key为 分区名：：缓存名</p><h4 id="2-1）缓存读模式"><a href="#2-1）缓存读模式" class="headerlink" title="2.1）缓存读模式"></a>2.1）缓存读模式</h4><p><strong>@Cacheable</strong></p><ul><li><p>属性</p><ul><li><p>value：分区，放入同一分区的缓存可以统一管理</p></li><li><p>key：缓存名，默认是表达式，列如#root.method.name 就是指定缓存名为方法名，如果需要使用字符串指定，需要加上单引号</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Cacheable</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">"分区"</span><span class="token punctuation">,</span>key<span class="token operator">=</span><span class="token string">"'缓存名'"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li><li><p>一般用于查询方法上，表示这个方法有了缓存功能</p></li><li><p>如果缓存中有，方法不调用，缓存中没有，才会调用方法</p></li><li><p>key默认自动生成，指定key可以在注解属性中指定key</p></li><li><p>缓存的value值，默认使用jdk自带的序列化机制</p></li><li><p>默认ttl时间为-1</p></li></ul><p>示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token annotation punctuation">@Cacheable</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"catygory"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>key <span class="token operator">=</span> <span class="token string">"#root.method.name"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">CategoryEntity</span><span class="token punctuation">></span></span> <span class="token function">getParentCate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"从数据库中查询"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>categoryDao<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">CategoryEntity</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">CategoryEntity</span><span class="token operator">::</span><span class="token function">getParentCid</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>经过测试，发起多个请求时，方法只会执行一次，剩下的都去redis 中 查询</p><p><img src="https://lfymall.oss-cn-fuzhou.aliyuncs.com/image-20221107155902706.png"></p><p><img src="https://lfymall.oss-cn-fuzhou.aliyuncs.com/image-20221107160058256.png"></p><h4 id="2-2）缓存写模式"><a href="#2-2）缓存写模式" class="headerlink" title="2.2）缓存写模式"></a>2.2）缓存写模式</h4><p><strong>@CachePut</strong></p><ul><li>在方法上添加@CachePut注解，会把方法返回值放入redis缓存中，供其他地方使用了，它通常用于新增的方法中。</li></ul><h4 id="2-3-）失效模式"><a href="#2-3-）失效模式" class="headerlink" title="2.3 ）失效模式"></a>2.3 ）失效模式</h4><p><strong>@CacheEvict</strong></p><ul><li><p>属性</p><ul><li>value：分区</li><li>key：缓存名</li><li>allEntries &#x3D; true <strong>删除分区中所有缓存</strong></li></ul></li><li><p>方法上添加@CacheEvict注解，方法完成之后会删除缓存</p></li><li><p><strong>注意</strong>，在高并发下可能会造成缓存数据不一致问题，因为底层使用此注解的执行步骤是，对数据库进行修改，然后删除缓存</p><ul><li>列如有三个线程</li><li>第一个线程进入方法修改数据，然后删除redis缓存，这时缓存为空</li><li>第二个线程进入方法修改数据，因为网络延迟还没修改完成的时候，第三个线程过来读取数据（读取旧数据），发现缓存为空，就去数据库查询，查询完准备填充进redis缓存时，第二个线程修改完成并删除了缓存，第三个线程填充缓存。这时数据库最新的数据就和redis缓存中的数据造成了不一致</li></ul></li><li><p><strong>解决办法</strong>：</p><ul><li>1.不使用此注解，手写逻辑、2.去底层重写接口</li><li>（可以容忍几秒的数据不一致）延迟双删，删除完，使用定时器异步等待3秒在删一次</li><li>（不能容忍）使用分布式锁，如果在进行了数据修改，则让对数据库查询的线程阻塞，等修改完成之后才让查询</li></ul></li></ul><h4 id="2-4）多个操作"><a href="#2-4）多个操作" class="headerlink" title="2.4）多个操作"></a>2.4）多个操作</h4><p><strong>@Caching</strong> </p><p>示例</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Caching</span><span class="token punctuation">(</span>evict<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token annotation punctuation">@CacheEvict</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">"分区1"</span>，key<span class="token operator">=</span><span class="token string">"'xxx1号'"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token annotation punctuation">@CacheEvict</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">"分区2"</span>，key<span class="token operator">=</span><span class="token string">"'xxx2号'"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>可以使用Caching注解来让多个Cache注解执行</p><h1 id="3-SpringCache的不足"><a href="#3-SpringCache的不足" class="headerlink" title="3.SpringCache的不足"></a>3.SpringCache的不足</h1><h4 id="3-1）读模式"><a href="#3-1）读模式" class="headerlink" title="3.1）读模式"></a>3.1）读模式</h4><ul><li><p>缓存穿透：查询一个永不存在的数据(null)，访问流量进入方法中，会进入redis中查询，发现没缓存，进入mysql中查询，还是没数据，大量消耗了程序性能</p><ul><li><p>解决方案：缓存空数据，yml文件夹中可以进行配置</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">cache-null-values</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>   <span class="token comment">#是否存储空值，防止缓存穿透</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li><li><p>缓存击穿：大量并发请求进入，同时查询一个过期的数据，由于没有缓存，大量请求打入数据库，造成数据库压力过大崩溃</p><ul><li>解决方案：SpringCache 默认没有提供锁，加锁需要给@Cacheable加上sync&#x3D;true属性，而这个锁是本地锁，分布式因为负载均衡会出现锁不住的情况（但是对缓存击穿问题足够用），如果是对锁要求极高的情况，还是需要手写分布式锁（双检锁）</li></ul></li><li><p>缓存雪崩：大量缓存同时过期，大量请求直达数据库，造成数据库崩溃</p><ul><li><p>解决方案：设置过期时间加随机时间</p><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token key attr-name">spring.cache.redis.time-to-live</span><span class="token punctuation">:</span> <span class="token value attr-value">36000</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li></ul><h4 id="3-2）写模式"><a href="#3-2）写模式" class="headerlink" title="3.2）写模式"></a>3.2）写模式</h4><ul><li>读写加锁</li><li>引入Canal，感知到mysql的更新去更新缓存</li><li>读多写多，直接去查询数据库</li></ul><h1 id="4-）总结"><a href="#4-）总结" class="headerlink" title="4.）总结"></a>4.）总结</h1><p>常规数据：（读多写少，及时性，一致性要求不高）完全可以使用springcache</p><p>特殊数据：（实时性要求高的数据）自己手写</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> nosql </category>
          
          <category> redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> nosql </tag>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sql调优</title>
      <link href="/2022/10/07/jin-jie-pian-diao-you/"/>
      <url>/2022/10/07/jin-jie-pian-diao-you/</url>
      
        <content type="html"><![CDATA[<h1 id="1-存储引擎"><a href="#1-存储引擎" class="headerlink" title="1.存储引擎"></a>1.存储引擎</h1><h4 id="1-1）mysql体系结构"><a href="#1-1）mysql体系结构" class="headerlink" title="1.1）mysql体系结构"></a>1.1）mysql体系结构</h4><ul><li>连接层<ul><li>主要完成一些类似连接处理，授权认证，及相关的安全方案</li></ul></li><li>服务层<ul><li>主要完成大多数的核心服务功能，如SQL接口，并完成缓存的查询，SQL分析和优化，部分内置函数的执行</li></ul></li><li>引擎层<ul><li>索引是在引擎层实现的，不同的存储引擎有不同的功能，我们可以根据自己需要，来选取合适的存储引擎</li></ul></li><li>存储层<ul><li>主要是将数据存储到文件系统之上，并完成与存储引擎的交互</li></ul></li></ul><h4 id="1-2）存储引擎简介"><a href="#1-2）存储引擎简介" class="headerlink" title="1.2）存储引擎简介"></a>1.2）存储引擎简介</h4><ul><li>存储引擎就是存储数据，建立索引，更新&#x2F;查询数据等技术的实现方式，存储引擎是基于表的，而不是基于库的，所以存储引擎也可被称为表类型</li><li>创表时指定engine&#x3D;’’   如果不指定引擎，mysql5.5版本后默认为innodb引擎</li><li>查询当前数据库支持的存储引擎：show engines;</li></ul><h4 id="1-3）存储引擎特点"><a href="#1-3）存储引擎特点" class="headerlink" title="1.3）存储引擎特点"></a>1.3）存储引擎特点</h4><ol><li><h6 id="InnoDB"><a href="#InnoDB" class="headerlink" title="InnoDB"></a>InnoDB</h6><ol><li>DML操作遵循ACID模型，支持事务</li><li>行级锁，提高并发访问性能</li><li>支持外键FOREIGN KEY约束</li><li>文件<ol><li>xxx.ibd：xxx代表的是表名，innoDB引擎的每张表都会对应这样一个表空间文件，存储该表的表结构（frm,sai）数据和索引。</li></ol></li></ol></li><li><h6 id="MyISAM"><a href="#MyISAM" class="headerlink" title="MyISAM"></a>MyISAM</h6><ol><li>早期的默认存储引擎</li><li>不支持事务，不支持外键</li><li>支持表锁，不支持行锁</li><li>访问速度快</li></ol></li><li><h6 id="Memory"><a href="#Memory" class="headerlink" title="Memory"></a>Memory</h6><ol><li>内存存放</li><li>hash索引（默认）</li></ol></li><li><p><img src="F:\前端学习测试\hexo个人博客\source_posts\img\E09D202358D685744F97AA5C71E94FAC.png" alt="E09D202358D685744F97AA5C71E94FAC"></p></li><li><p>行锁就是在开启事务时，操作的那一行数据会被锁住，别的事务如果对这张表的这行数据操作是就会阻塞</p></li></ol><p>​表锁就是开启事务时，整张表都会被锁住，别的事务无法对这张表进行操作</p><h4 id="1-4）存储引擎选择"><a href="#1-4）存储引擎选择" class="headerlink" title="1.4）存储引擎选择"></a>1.4）存储引擎选择</h4><ol><li>innoDB:是mysql的默认存储引擎，支持事务，外键。如果应用对事务的完整性有比较高的要求，在并发条件下要求数据的一致性，数据库操作除了插入和查询之外，还包含很多更新，删除操作，那么innoDB存储引擎是比较合适的选择<ul><li>实际开发中，使用最多</li></ul></li><li>MyISAM：如果应用是以读操作和插入操作为主，只有很少的更新和删除操作，并且为事务的完整性，并发性要求不是很高，那么选择这个存储引擎是非常合适的<ul><li>实际开发中，这种存储引擎已经被Mongodb取代了</li></ul></li><li>MEMORY:将所有数据保存在内存中，访问速度快，通常用于临时表及缓存，memory的缺陷是对表的大小有限制，太大的表无法缓存在内存中，而且无法保证数据的安全性。<ul><li>实际开发中，这种存储引擎已经被redis取代了</li></ul></li></ol><h1 id="2-索引-重点"><a href="#2-索引-重点" class="headerlink" title="2.索引(重点)"></a>2.索引(重点)</h1><h4 id="2-1）索引概述"><a href="#2-1）索引概述" class="headerlink" title="2.1）索引概述"></a>2.1）索引概述</h4><ul><li><h6 id="索引是帮助mysql高效获取数据的数据结构（有序），在数据之外，数据库系统还维护这满足特定查找算法的数据结构，这些数据结构以某种方式引用（指向）数据，这样就可以在这些数据结构上实现高级查找算法，这种数据结构就是索引"><a href="#索引是帮助mysql高效获取数据的数据结构（有序），在数据之外，数据库系统还维护这满足特定查找算法的数据结构，这些数据结构以某种方式引用（指向）数据，这样就可以在这些数据结构上实现高级查找算法，这种数据结构就是索引" class="headerlink" title="索引是帮助mysql高效获取数据的数据结构（有序），在数据之外，数据库系统还维护这满足特定查找算法的数据结构，这些数据结构以某种方式引用（指向）数据，这样就可以在这些数据结构上实现高级查找算法，这种数据结构就是索引"></a>索引是帮助mysql高效获取数据的数据结构（有序），在数据之外，数据库系统还维护这满足特定查找算法的数据结构，这些数据结构以某种方式引用（指向）数据，这样就可以在这些数据结构上实现高级查找算法，这种数据结构就是索引</h6></li><li><p>优缺点：</p><ul><li>优点：提高数据检索的效率，降低数据库的IO成本，通过索引列对数据进行排序，降低数据排序的成本，降低cpu的消耗</li><li>缺点：索引列也是要占用空间的，索引大大提高了查询效率，同时却也降低更新表的速度，如对表进行insert，update,delete时，效率降低。</li></ul></li></ul><h4 id="2-2）索引结构"><a href="#2-2）索引结构" class="headerlink" title="2.2）索引结构"></a>2.2）索引结构</h4><ul><li>B+Tree索引(默认)：最常见的索引类型，大部分引擎都支持B+树索引</li><li>Hash索引：底层数据结构使用哈希表实现的，只有精确匹配索引列的查询才有效，不支持范围查询</li><li>R-tree：空间索引是MyISAM引擎的一个特殊引擎类型，主要用于地理空间数据类型，通常较少使用</li><li>Full-text(全文索引)：是一种通过建立倒排索引，快速匹配文档的方式，类似于Lucene,Solr,Es</li><li><img src="C:\Users\吕飞扬\Desktop\SQL调优\img\D817D5CD513634902A377E3638D666CF.png" alt="D817D5CD513634902A377E3638D666CF"></li></ul><h4 id="2-3）索引分类"><a href="#2-3）索引分类" class="headerlink" title="2.3）索引分类"></a>2.3）索引分类</h4><ul><li><h5 id="主键索引：针对于表中主键创建的索引"><a href="#主键索引：针对于表中主键创建的索引" class="headerlink" title="主键索引：针对于表中主键创建的索引"></a>主键索引：针对于表中主键创建的索引</h5><ul><li>特点：默认自动创建，只能有一个</li><li>关键字：PRIMARY</li></ul></li><li><h5 id="唯一索引：避免同一表中某数据列中的值重复"><a href="#唯一索引：避免同一表中某数据列中的值重复" class="headerlink" title="唯一索引：避免同一表中某数据列中的值重复"></a>唯一索引：避免同一表中某数据列中的值重复</h5><ul><li>特点：可以有多个</li><li>关键字：UNIQUE</li></ul></li><li><h5 id="常规索引：快速定位特定数据"><a href="#常规索引：快速定位特定数据" class="headerlink" title="常规索引：快速定位特定数据"></a>常规索引：快速定位特定数据</h5><ul><li>特点：可以有多个</li></ul></li><li><h5 id="全文索引：全文索引查找的是文本中的关键词，而不是比较索引中的值"><a href="#全文索引：全文索引查找的是文本中的关键词，而不是比较索引中的值" class="headerlink" title="全文索引：全文索引查找的是文本中的关键词，而不是比较索引中的值"></a>全文索引：全文索引查找的是文本中的关键词，而不是比较索引中的值</h5><ul><li>特点：可以有多个</li><li>关键字：FULLTEXT</li></ul></li><li><h5 id="在Innodb存储引擎中，根据索引的存储形式，可以分为两种"><a href="#在Innodb存储引擎中，根据索引的存储形式，可以分为两种" class="headerlink" title="在Innodb存储引擎中，根据索引的存储形式，可以分为两种"></a>在Innodb存储引擎中，根据索引的存储形式，可以分为两种</h5><ul><li>聚焦索引：将数据存储与索引放到了一块，索引结构的叶子节点保存了行数据<ul><li>特点：必须有，而且只有一个</li></ul></li><li>二级索引：将数据与索引分开存储，索引结构的叶子节点关联的是对应的主键<ul><li>特点：可以存在多个</li></ul></li><li>如果存在主键，主键索引就是聚集索引。如果不存在主键，将使用第一个唯一（UNIQUE）索引作为聚集索引。</li><li>如果表没有主键，或没有合适的唯一索引，则innoDB会自动生成一个eowid作为隐藏的聚集索引</li></ul></li></ul><h4 id="2-4）索引语法"><a href="#2-4）索引语法" class="headerlink" title="2.4）索引语法"></a>2.4）索引语法</h4><ul><li><h5 id="创建索引：create-unique-fulltext-index-index-name-ON-table-name-index-col-name…"><a href="#创建索引：create-unique-fulltext-index-index-name-ON-table-name-index-col-name…" class="headerlink" title="创建索引：create [unique] [fulltext] index index_name ON table_name(index_col_name…..)"></a>创建索引：create [unique] [fulltext] index index_name ON table_name(index_col_name…..)</h5><ul><li>解读：可以添加unique和fulltext字段 unique代表创建唯一索引，代表该字段不能出现重复的  fulltext代表创建全文索引，如果什么都不加则是行级索引<ul><li>index后面跟索引名，然后ON表名（字段），一个索引是可以关联多个字段的。</li></ul></li></ul></li><li><h5 id="查看索引"><a href="#查看索引" class="headerlink" title="查看索引"></a>查看索引</h5><ul><li>show index from table_name</li></ul></li><li><h5 id="删除索引"><a href="#删除索引" class="headerlink" title="删除索引"></a>删除索引</h5><ul><li>drop index index_name ontable_n</li></ul></li></ul><h4 id="2-5）SQL性能分析"><a href="#2-5）SQL性能分析" class="headerlink" title="2.5）SQL性能分析"></a>2.5）SQL性能分析</h4><ul><li><h5 id="SQL执行频率（第一种工具）："><a href="#SQL执行频率（第一种工具）：" class="headerlink" title="SQL执行频率（第一种工具）："></a>SQL执行频率（第一种工具）：</h5><ul><li><p>mysql客户端连接成功后，通过show [session|global] status 命令可以提供服务器状态信息。通过如下指令，可以查看当前数据库的INSERT,UPDATE,DELETE,SELECT的访问频次</p></li><li><p>第一个指令：查看SQL执行频次</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">show global status like &#39;Com_______&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>第二个指令：查看慢查询日志是否开启</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">show variables like <span class="token string">'slow_query_log'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li><li><h5 id="慢查询日志（第二种工具）："><a href="#慢查询日志（第二种工具）：" class="headerlink" title="慢查询日志（第二种工具）："></a>慢查询日志（第二种工具）：</h5><ul><li><p>慢查询日志记录了所有执行时间超过指定参数（lon_query_time,单位：秒，默认10秒）的所有SQL语句的日志。MYSQL的慢查询日志默认没有开启，需要在Mysql的配置文件（&#x2F;etc&#x2F;my.cnf）中配置如下信息：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#开启Mysql慢日志查询开关</span><span class="token assign-left variable">slow_query_log</span><span class="token operator">=</span><span class="token number">1</span><span class="token comment">#设置慢日志的时间为2秒，sql语句执行时间超过2秒，就会视为慢查询，记录慢查询日志</span><span class="token assign-left variable">long_query_time</span><span class="token operator">=</span><span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>配置完毕之后，通过以下指令重新启动MYSQL服务器进行测试，查看慢日志文件中记录的信息&#x2F;var&#x2F;lib&#x2F;mysql&#x2F;localhost-slow.log</p></li></ul></li><li><h5 id="profile（第三种工具）"><a href="#profile（第三种工具）" class="headerlink" title="profile（第三种工具）:"></a>profile（第三种工具）:</h5><ul><li><p>show profiles能够在做SQL优化时帮助我们了解时间都耗费到了哪里，通过have_profiling参数，能够看到当前Mysql是否支持</p></li><li><h6 id="profile操作"><a href="#profile操作" class="headerlink" title="profile操作"></a>profile操作</h6><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select @@have_profiling  #查看是否支持profile<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p>默认profiling是关闭的，可以通过set语句在session&#x2F;global级别开启profiling：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">set profiling &#x3D;1;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>通过如下指令查看执行耗时</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">#查看每一条sql的耗时基本情况show profiles;#查看指定的query_id的sql语句的各个阶段耗时情况show profile for query query_id;#查看指定query_id的SQL语句CPU的使用情况show profile cpu for query query_id;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul></li><li><h5 id="explain执行计划（重点-第四种工具）："><a href="#explain执行计划（重点-第四种工具）：" class="headerlink" title="explain执行计划（重点-第四种工具）："></a>explain执行计划（重点-第四种工具）：</h5><ul><li><p>EXPLAIN或者DESC命令获取Mysql如何执行select语句的信息，包括在select语句执行过程中表如何连接和连接的顺序。</p></li><li><p>语法：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">#直接在select语句之前加上关键字explain&#x2F;desc，意思就是在普通查询语句前面价格explain或者desc就行EXPLAIN SELECT 字段列表 FROM 表名 WHERE 条件;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>explain查询到的各字段含义：</p><ul><li><p>id：select 查询的序列号，表示查询执行select子句或者是操作表的顺序（id相同，执行顺序从上到下，id不同，值越大，越先执行）</p></li><li><p>select_type：表示查询的类型，常见的有（SIMPLE（简单表，即不使用表连接或子查询）），PRIMARY（主查询），UNION（UNION中的第二个或者和面的查询语句），SUBQUERY（SELECT&#x2F;WHERE之后包含了子查询）等</p></li><li><h5 id="type（重点关注）：表示连接类型，性能由好到差的连接类型为：NULL-system-const-eq-ref-ref-range-index-all-。"><a href="#type（重点关注）：表示连接类型，性能由好到差的连接类型为：NULL-system-const-eq-ref-ref-range-index-all-。" class="headerlink" title="type（重点关注）：表示连接类型，性能由好到差的连接类型为：NULL , system , const , eq_ref , ref , range , index , all 。"></a>type（重点关注）：表示连接类型，性能由好到差的连接类型为：NULL , system , const , eq_ref , ref , range , index , all 。</h5><ul><li><h6 id="解读："><a href="#解读：" class="headerlink" title="解读："></a>解读：</h6></li><li><p>NULL ：实际开发中几乎可能做到优化成NULL，因为一般只有select ‘A’ 这种不访问指定库的语句才能是NULL</p></li><li><p>system：一般访问系统表才会是这个</p></li><li><p>const：一般通过唯一索引或主键查询的会是这个</p></li><li><p>ref：如果使用非唯一的索引会是这个</p></li><li><p>index：表示用了索引但是会对整个索引进行遍历索引数</p></li><li><p>all：全表扫描，出现这个就得好好优化一下了</p></li></ul></li><li><h5 id="possible-key（重点关注）：显示可能应用在这张表上的索引，一个或多个"><a href="#possible-key（重点关注）：显示可能应用在这张表上的索引，一个或多个" class="headerlink" title="possible_key（重点关注）：显示可能应用在这张表上的索引，一个或多个"></a>possible_key（重点关注）：显示可能应用在这张表上的索引，一个或多个</h5></li><li><h5 id="key（重点关注）：实际使用的索引，如果为NULL，则没有使用索引。"><a href="#key（重点关注）：实际使用的索引，如果为NULL，则没有使用索引。" class="headerlink" title="key（重点关注）：实际使用的索引，如果为NULL，则没有使用索引。"></a>key（重点关注）：实际使用的索引，如果为NULL，则没有使用索引。</h5></li><li><p>key_len：表示索引中使用的字节数，该值为索引字段的最大可能长度，并非实际使用长度，在不损失精确性的前提下，长度越短越好</p></li><li><p>rows：mysql认为必须要执行查询的行数，在innodb引擎的表中，是一个估计值，可能并不准确</p></li><li><p>filtered：表示返回结果的行数占需读取行数的百分比，filtered的值越大越好。</p></li></ul></li></ul></li></ul><h4 id="2-6）索引使用"><a href="#2-6）索引使用" class="headerlink" title="2.6）索引使用"></a>2.6）索引使用</h4><ul><li><h5 id="最左前缀法则："><a href="#最左前缀法则：" class="headerlink" title="最左前缀法则："></a>最左前缀法则：</h5><ul><li>如果索引了多例（联合索引），要遵守最左前缀法则，最左前缀法则是指查询从索引的最左列开始，并且不跳过索引中的列。如果跳跃某一列，索引将部分失效（后面的字段索引失效）</li></ul></li><li><h5 id="范围查询：联合索引中，出现范围查询，范围查询右侧的索引列失效"><a href="#范围查询：联合索引中，出现范围查询，范围查询右侧的索引列失效" class="headerlink" title="范围查询：联合索引中，出现范围查询，范围查询右侧的索引列失效"></a>范围查询：联合索引中，出现范围查询，范围查询右侧的索引列失效</h5><ul><li>也就是说业务允许的情况下，尽量用&gt;&#x3D;而不是&gt;</li></ul></li><li><h5 id="索引列运算"><a href="#索引列运算" class="headerlink" title="索引列运算"></a>索引列运算</h5><ul><li>不要在索引列上进行运算操作，否则索引将失效</li></ul></li><li><h5 id="字符串类型字段使用时，不加引号，索引将失效"><a href="#字符串类型字段使用时，不加引号，索引将失效" class="headerlink" title="字符串类型字段使用时，不加引号，索引将失效"></a>字符串类型字段使用时，不加引号，索引将失效</h5></li><li><h5 id="模糊查询"><a href="#模糊查询" class="headerlink" title="模糊查询"></a>模糊查询</h5><ul><li><p>如果仅仅是尾部模糊匹配，索引不会失效，如果是头部模糊匹配索引将失效</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">like &#39;xxx%&#39;  #索引不失效like &#39;%xxx&#39;  #索引失效like &#39;%xxx%&#39;  #索引失效<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul></li><li><h5 id="or连接的条件"><a href="#or连接的条件" class="headerlink" title="or连接的条件:"></a>or连接的条件:</h5><ul><li>如果or前的条件中有列有索引，而后面的列中没有索引，那么涉及的索引都不会被用到</li><li>使用or必须所有条件字段都有索引，不然索引失效</li></ul></li><li><h5 id="数据分布影响"><a href="#数据分布影响" class="headerlink" title="数据分布影响"></a>数据分布影响</h5><ul><li>如果MYSQL评估使用索引比全表扫描更慢，则不使用索引</li></ul></li><li><h5 id="SQL提示"><a href="#SQL提示" class="headerlink" title="SQL提示"></a>SQL提示</h5><ul><li><p>SQL提示，是优化数据库的一个重要手段，简单来说，就是在SQL语句中加入一些认为的提示来达到优化操作的目的。</p></li><li><p>use index：告诉数据库建议使用哪个索引</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select * from xxx use index(index_name)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>ignore index：告诉数据库不使用哪个索引</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select * from xxx ignore index(index_name)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>force index ：告诉数据库必须使用这个索引</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select * from xxx force index(index_name)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li><li><h5 id="覆盖索引"><a href="#覆盖索引" class="headerlink" title="覆盖索引"></a>覆盖索引</h5><ul><li><p>尽量使用覆盖索引（查询使用了索引，并且需要返回的列，在该索引中已经全部能找到），减少select *。</p></li><li><p>比如：当查询多个字段时，有些字段没有索引，就会产生回表查询的步骤，先是根据条件查询二级（辅助）索引中拿到主键和查询相应的字段信息，然后回到聚集（主键）索引，用主键查询二级（辅助）索引中没有的字段值</p><p>​而如果索引覆盖了这个字段，就直接返回，不用进行回表查询</p><ul><li><h5 id="那么问题来了，为什么说要少使用select-呢？"><a href="#那么问题来了，为什么说要少使用select-呢？" class="headerlink" title="那么问题来了，为什么说要少使用select * 呢？"></a>那么问题来了，为什么说要少使用select * 呢？</h5><ul><li>因为除非你创建了一个覆盖了全部字段的联合索引，不然select * 就会查询所有字段，必然会触发回表查询，影响效率</li></ul></li><li><p>面试题：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">#一张表，有四个字段（id,username,passwdord,status）,由于数据量大，需要对以下的SQL语句进行优化，该如何进行？select id,username,password from tb_user where username&#x3D;&#39;itcast&#39;#答：创建username和password的联合索引，这样提升了效率并且联合索引避免了回表查询的步骤，这就是（覆盖索引）#如果只创建一个username的索引，那么password字段没有索引覆盖，则会发生回表查询#MYSQL底层执行步骤则会是先去二级索引中根据username&#x3D;&#39;itcast&#39;查询，并且在二级索引中拿到username和id的数据，但是这时候没有password这个字段的数据，然后底层会拿着id去聚集索引中根据id查询password的值在返回，这就是（回表查询）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul></li><li><h5 id="前缀索引"><a href="#前缀索引" class="headerlink" title="前缀索引"></a>前缀索引</h5><ul><li><p>当字段类型为字符串时，有时候需要索引很长的字符串，这会让索引变得很大，查询时浪费大量的磁盘IO，影响查询效率，此时可以只将字符串的一部分前缀，建立索引，这样可以大大节约索引空间，从而提高索引效率。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">#语法create index index_name on table_name(column(n))#index_name索引名 table_name表名  column字段名  n前缀长度（提取n个字符构建索引）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>前缀长度</p><ul><li>可以根据索引的选择性来决定，而选择性值不重复的索引值和数据表的记录总数的比值，索引选择性越高则查询效率越高</li></ul><p>​       唯一索引的选择性是1，也是效率最高的</p><ul><li><p>可以通过以下SQL语句来判断前缀长度设置多少比较好</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select count(distinct substring(字段名,1,xxx))&#x2F;count(*) from 表名#因为count(distinct 字段名)&#x2F;count(*)如果字段设置了不能重复，这个查出来肯定是1，然后我们通过substring截取字符串，看截取多少的时候会发生数据重复，根据这个来建立前缀索引<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>底层：</p><ul><li>创建前缀索引时底层会创建二级索引B+树，每个叶子节点挂着的是对应的id,首先会根据传入的参数值进行查找对应的叶子节点，找到后拿着id去聚集索引中进行回表查询，最终拿到一行的数据并且拿到查询字段的值和传入的查询字段的值进行对比，如果正确则返回数据，然后二级索引会继续在链表的下一个节点进行查询，看看是不是还有和传入参数值相同的字段</li></ul></li></ul></li></ul></li><li><p>单列索引与联合索引</p><ul><li>单列索引：即一个索引只包含了单个列</li><li>联合索引：即一个索引包含了多个列</li></ul></li></ul><h4 id="2-7）索引设计原则"><a href="#2-7）索引设计原则" class="headerlink" title="2.7）索引设计原则"></a>2.7）索引设计原则</h4><ol><li>针对于数据量较大，且查询比较频繁的表建立索引</li><li>针对于常作为查询条件，排序，分组操作的字段建立索引</li><li>尽量选择区分度高的列作为索引，尽量建立唯一索引，区分度越高，使用索引的效率越高</li><li>如果是字符串类型的字段，字段的长度较长，可以针对字段的特点，建立前缀索引</li><li>尽量使用联合索引，减少单利索引，查询时，联合索引很多时候可以覆盖索引，节省存储空间，避免回表，提高查询效率</li><li>要控制索引的数量，索引并不是多多益善，索引越多，维护索引结构的代价也就越大，会影响增删改的效率</li><li>如果索引列不能存储null值，请在创建表时使用NOT NULL 约束他，当优化器知道没列是否包含NULL值时，他可以更好的确定哪个索引最有效的用于查询</li></ol><h4 id="2-8）总结"><a href="#2-8）总结" class="headerlink" title="2.8）总结"></a>2.8）总结</h4><ol><li><h5 id="索引概述"><a href="#索引概述" class="headerlink" title="索引概述"></a>索引概述</h5><ul><li>索引是高效获取数据的数据结构</li></ul></li><li><p>索引结构</p><ul><li>B+Tree</li><li>Hash</li></ul></li><li><p>索引分类</p><ul><li>主键索引：建表时如果指定了主键，自动创建的索引</li><li>唯一索引：字段值不重复的</li><li>常规索引：常规创建的索引</li><li>全文索引：不需要知道</li><li>innoDB存储引擎中全部索引分为两类<ul><li>聚集索引：聚集索引必须存在并且只能有一个，默认主键索引就是聚集索引，如果没有主键，会选择第一个唯一索引作为聚集索引，如果没有唯一索引，MYSQL会设置一个隐藏的id作为索引<ul><li>B+树的叶子节点挂着全部的数据</li></ul></li><li>二级索引：B+树的叶子节点挂着主键</li></ul></li></ul></li><li><p>索引语法</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">create [unique] index xxx on xxx(xxx)show index from xxx;drop index xxx on xxx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>SQL性能分析</p><ul><li>执行频次，慢日志查询，profile，explain（使用最多）</li></ul></li><li><p>索引使用原则</p><ul><li>联合索引，索引失效，SQL提示，覆盖索引，前缀索引，单列&#x2F;集合索引</li></ul></li></ol><h1 id="3-SQL优化"><a href="#3-SQL优化" class="headerlink" title="3.SQL优化"></a>3.SQL优化</h1><h4 id="3-1）插入数据"><a href="#3-1）插入数据" class="headerlink" title="3.1）插入数据"></a>3.1）插入数据</h4><ul><li><p>insert优化：</p><ul><li><p>批量插入</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">insert into 表名 values （xxx）,(xxxx)#建议插入语句直接写一句话批量插入，减少与数据库的连接，单次建议1000条数据以下<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>手动提交事务</p><ul><li>如果自动提交事务每次都会开启事务提交事务，事务的频繁开启与关闭影响了效率</li></ul></li><li><p>主键顺序插入</p><ul><li>主键按顺序插入性能会比乱序高</li></ul></li></ul></li><li><p>大批量插入数据</p><ul><li><p>如果一次性需要插入大批量数据，使用insert语句插入性能比较低，此时可以使用Mysql数据库提供的load指令进行插入，操作如下：</p></li><li><p><img src="C:\Users\吕飞扬\Desktop\SQL调优\img\C30A70BD28BD247EAFEEE9D91E340453.png" alt="C30A70BD28BD247EAFEEE9D91E340453"></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">#客户端连接服务端时，加上参数--local-infilemysql--local-infile -u root -p#设置全局参数local_infile为1，开启从本地加载文件导入数据的开关set global local_infile&#x3D;1;#执行load指令将准备好的数据，加载到表结构中load data local infile &#39;&#x2F;root&#x2F;sql1.log&#39; into table &#39;tb_user&#39; fields terminated by &#39;,&#39; lines terminated by &#39;\n&#39;#load data local infile 文件路径 into table 表名 fields terminated by 文件中数据只用什么分隔 lines terminated by （每一行使用什么分隔）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><h4 id="3-2）主键优化"><a href="#3-2）主键优化" class="headerlink" title="3.2）主键优化"></a>3.2）主键优化</h4><ul><li>数据组织方式<ul><li>在InnoDB存储引擎中，表数据都是根据主键顺序组织存放的，这种存储方式的表称为索引组织表</li></ul></li><li>页分裂<ul><li>页可以为空，也可以填充一半，每个页包含了2-N行数据</li></ul></li><li>页合并<ul><li>当删除一行记录时，实际上记录并没有被物理删除，只是记录被标记为删除并且它的空间变得允许被其他记录声明使用，当页中删除的记录打到（默认是50%），innoDB会开始寻找最靠近页（前或后）看看是否可以合并两个页优化空间使用</li></ul></li><li>主键设计原则<ul><li>尽量降低主键的长度</li><li>插入数据时，尽量选择顺序插入，选择使用AUTO_INCREMENT自增主键。<ul><li>乱序插入可能会发生页分裂现象，影响效率</li></ul></li><li>尽量不要使用UUID做主键或者是其他自然主键，如身份证号<ul><li>因为UUID是无序的，并且很长，所以可能会发生页分裂现象</li></ul></li><li>业务操作时，避免对主键的修改</li></ul></li></ul><h4 id="3-3）order-by优化"><a href="#3-3）order-by优化" class="headerlink" title="3.3）order by优化"></a>3.3）order by优化</h4><ul><li><p>Using filesort：通过表的索引或全表扫描，读取满足条件的数据行，然后在排序缓冲区sort buffer 中完成排序操作，所有不是通过索引直接返回排序结果的排序都叫filesort排序</p></li><li><p>Using index：通过有序索引顺序扫描直接返回有序数据，这种情况即为using index ,不需要额外排序，操作效率高</p></li><li><p>就是说排序的时候，因为索引建立默认都是升序排，如果你进行排序使用一个升序一个降序，就会出现Using filesort，这时候你需要而外建立一个相应的索引才会走索引 </p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">create index 索引名 on 表名（字段名 asc,字段名 desc）<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p>总结：</p><ul><li>根据字段建立合适的索引，多字段排序时，也遵循最左前缀法则</li><li>尽量使用覆盖索引</li><li>多字段排序，一个升序一个降序，此时需要注意联合索引在创建时的规则</li><li>如果不可避免的出现filesort，大数据量排序时，可以适当增加排序缓冲器大小（默认256kb）</li></ul></li><li></li></ul></li></ul><h4 id="3-4）group-by-优化"><a href="#3-4）group-by-优化" class="headerlink" title="3.4）group by 优化"></a>3.4）group by 优化</h4><ul><li>和前面的一样，满足最左前缀法则，尽量使用覆盖索引即可</li></ul><h4 id="3-5）limit-优化"><a href="#3-5）limit-优化" class="headerlink" title="3.5）limit 优化"></a>3.5）limit 优化</h4><ul><li><p>一个常见又非常头疼的问题就是limit 2000000,10 ,此时需要Mysql排序前200000记录，仅仅返回10条记录，其他记录，查询排序的代价非常大</p><ul><li><p>通过覆盖索引和子查询的方式优化</p><ul><li><p>优化思路：一般分页查询时，通过创建覆盖索引能够比较好的提高性能，可以通过覆盖索引加子查询形式进行优化</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">#先查询这张表的主键select id from xxx order by id limit 200000,10#把上面那张表看做另外一张表，进行一个连表查询select a.* from xxx a join (select id from xxx order by id limit 200000,10 ) b on a.id&#x3D;b.id<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul></li></ul><h4 id="3-6）count-优化"><a href="#3-6）count-优化" class="headerlink" title="3.6）count 优化"></a>3.6）count 优化</h4><ul><li><pre><code class="mysql">select count(*) from tb_user<pre class="line-numbers language-none"><code class="language-none">  - MyISam引擎把一个表的总行数存在了磁盘上，因此执行count（*）的时候会直接返回个数，效率很高  - InnoDB引擎就很麻烦了，它执行count（*）需要把数据一行一行的从引擎里面读出来，然后累积数  - 优化思路    - 自己计数：利用redis，每当我们插入一条数据时，往redis里增加一个数，自己维护，一般没有很好的手段来优化count字段  - count的几种用法    - count()是一个聚合函数，对于返回的结果集，一行行的判断，如果count函数的参数不是null,累计值就加1，否则不加，最后返回累计值    - 用法：count（*）、count（主键）、count（字段）、count（1）      - 哪个效率高呢？      - count（主键）：InnoDB引擎会遍历整张表，把每一行的主键id值都取出来，返回给服务层。服务层拿到主键后，直接按行进行累加（因为主键不可能为null）      - count（字段）：没有not null约束，InnoDB会遍历整张表把每一行的字段值都取出来，返回给服务层，服务层判断是否为null，不为null,计数累加，如果有not null约束，和主键一样，直接遍历累加      - count（1）：innoDB会遍历整张表，但不取值，服务层对于返回的每一行，放一个数字1进行，直接按行进行累加      - count（*）：InnoDB并不会把全部字段取出来，而是专门做了优化，不取值，服务层直接按行进行累加。      - 所以效率最高的是count（*）其次是count（1）然后是count（主键）或带有not null的count(字段),最后是没有not null的count（字段）#### 3.7）update 优化- InnoDB的行锁是针对索引加的锁，不是针对记录加的锁，并且该索引不能失效，否则就会从行锁升级成表锁  - 通俗点说，就是进行update 表名 set xxx&#x3D;xxx where 条件   这个条件必须是有索引的，不然就会锁住整个表（从行锁升级成表锁）#### 3.8）总结- 插入数据的优化：  - 如果批量插入，最好使用load data local infile- 主键优化：  - 页分裂  - 页合并  - 主键长度最好短，主键最好顺序插入，不然容易发生页分裂影响效率  - 推荐使用主键自增- order by优化：  - using index：直接通过索引返回数据，效率高  - using filesort：需要将返回的结果在排序缓冲区排序  - 尽量使用覆盖索引，并且索引在创建时默认为asc，如果查询时一个asc一个desc或者是desc需要指定索引创建时的排序方式- group by优化：  - 索引，多字段满足最左前缀法则- limit优化：  - limit越往后性能越低，因为他会把所有的记录查询出来，然后在丢掉不用的。  - 覆盖索引+子查询- count优化  - 没什么优化手段，如果要优化只能用非关系数据库自己计数  - count（）各种的性能对比- update优化  - 一定要根据索引字段为条件进行更新，避免行锁升级成表锁# 4.视图&#x2F;存储过程&#x2F;触发器#### 4.1）视图- ##### 介绍：  - 视图是一种虚拟存在的表，视图中的数据并不存在数据库中，行和列数据来自定义事务的查询中使用的表，并且是在使用视图时动态生成的。    通俗的讲，视图只保存了查询的SQL逻辑，不保存查询结果。所以我们在创建视图的时候，主要的工作就落在创建这条SQL查询语句上。- ##### 创建：  &#96;&#96;&#96;mysql  create view 视图名称 as select 语句 [with cascaded check option]  #比如创建视图的select指定id&lt;10，如果创建完之后通过视图添加数据一个id为11的数据，视图是不会显示这条数据的（主表中会显示），需要在创建的时候后面加上with cascaded check option来检查选项，如果在通过视图添加id&gt;10的数据就会报错，不会往主表中加数据了  视图检查选项中看详情<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></code></pre></li><li><h5 id="查询："><a href="#查询：" class="headerlink" title="查询："></a>查询：</h5><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">#查看创建视图语句show create view 视图名称；#查看视图数据select * from 视图名称；<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><h5 id="修改："><a href="#修改：" class="headerlink" title="修改："></a>修改：</h5><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">#方式一create view 视图名称[(列名列表)] as select语句#方式二alter view 视图名称[(列名列表)] as select语句#其实就是创建一个新的视图，取和要修改的视图一样的名字，然后mysql会直接帮你覆盖原来名字的视图，起到修改作用<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><h5 id="删除："><a href="#删除：" class="headerlink" title="删除："></a>删除：</h5><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">drop view 视图名称，视图名称<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><h5 id="视图的检查选项"><a href="#视图的检查选项" class="headerlink" title="视图的检查选项"></a>视图的检查选项</h5><ul><li><p>当使用with check option 子句创建视图时，Mysql会通过视图检查正在更改的每个行，例如：插入、更新、删除，以使其符合视图的定义。mysql允许基于另一个视图创建视图，它还会检查依赖视图中的规则以保持一致性。为了确定检查的范围，mysql提供了两个选项：cascaded和local,默认是cascaded</p></li><li><p>cascaded：比如，基于没有指定with cascaded check option的视图1创建的视图2，视图2中有指定with cascaded check option，那么进行增删改的时候，会对视图2和视图1的条件进行联合判断，也就是说会自动给视图1也指定with cascaded check option</p><ul><li>如果这时候在来一个没有指定视图检查选项的视图3来基于视图2创建视图，那么如果符合视图2的select语句条件则插入成功，如果符合视图2不符合视图3，则视图3中看不见，但是基表中数据还是会有</li></ul></li><li><p>local：比如基于视图1创建的视图2，视图2指定了with local check option,视图1没有指定，那么只会根据视图2的条件判断是否能插入数据，如果视图1也指定了检查选项才会判断条件</p></li><li><p>cascaded和local的区别：cascaded会自动把基于的那个视图加上检查选项，并需要满足所有的视图条件才能插入，而local不会自动添加检查选项，有那个视图指定了检查选项才会进行判定</p></li></ul></li><li><h5 id="视图的更新"><a href="#视图的更新" class="headerlink" title="视图的更新"></a>视图的更新</h5><ul><li>要使视图可更新，视图中的行与基础表中的行之间必须存在一一对应关系，如果视图包含以下任何一项，则不能更新：<ul><li>聚合函数或串口函数（SUM() 、MIN()、MAX()、COUNT()等）</li><li>DISTINCT</li><li>GROUP BY</li><li>HAVING</li><li>UNION或者UNION ALL</li></ul></li></ul></li><li><h5 id="作用："><a href="#作用：" class="headerlink" title="作用："></a>作用：</h5><ul><li><p>简单</p><ul><li>视图不仅可以简化用户对数据的理解，也可以简化他们的操作。那些被经常使用的查询可以被定义为视图，从而使的用户不必为以后的操作每次指定全部的条件</li></ul></li><li><p>安全</p><ul><li>数据库可以授权，但不能授权到数据库特定行和特定的列上，通过视图用户只能查询和修改他们所能见到的数据</li></ul></li><li><p>数据独立</p><ul><li>视图可帮助用户屏蔽真实表结构变化带来的影响</li></ul></li></ul></li><li><p>案例</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">#1.为了保证数据库表的安全性，开发人员在操作tb_user表时，只能看到用户的基本字段，屏蔽手机号和邮箱两个字段create view tb_user_view as select id,name,profession,age,gender,status from tb_user#2.查询每个学生所选修的课程（三张表联查），这个功能在很多业务中都有使用到，为了简化操作，定义一个视图create view tb_three as select s.name as studentname,s.no,c.name as coursename from student_course sc,student s, course c where sc.id&#x3D;s.id and s.id&#x3D;c.id <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="4-2）存储过程"><a href="#4-2）存储过程" class="headerlink" title="4.2）存储过程"></a>4.2）存储过程</h4><ul><li><h5 id="介绍："><a href="#介绍：" class="headerlink" title="介绍："></a>介绍：</h5><ul><li>存储过程是事先经过编译并存储在数据库中的一段SQL语句的集合，调用存储过程可以简化应用开发人员的很多工作，减少数据的数据库和应用服务器之间的传输，对于提高数据处理的效率是有好处的。</li><li>存储过程思想上很简单，就是数据库SQL语言层面的代码封装与重用</li></ul></li><li><h5 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h5><ul><li>封装、复用</li><li>可以接收参数，也可以返回数据</li><li>减少网络交互、提升效率</li></ul></li><li><h5 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h5><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">create procedure 存储过程名称(参数列表)begin    --SQL语句;end;#注意：在命令行中，执行创建存储过程的SQL时，需要通过关键字delimiter指定SQL语句的结束符<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><h5 id="调用"><a href="#调用" class="headerlink" title="调用"></a>调用</h5><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">call 名称(参数)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><h5 id="查看"><a href="#查看" class="headerlink" title="查看"></a>查看</h5><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select * from information_schema.routines where routine_schema&#x3D;&#39;xxx&#39; #查询指定数据库的存储过程及状态信息 xxx是数据库名show create procedure 存储过程名称  #查询某个存储过程的定义<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><h5 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h5><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">drop procedure if exists 存储过程名字;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><h5 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h5><ul><li><p>系统变量是MYSQL服务器提供，不是用户定义的，属于服务器层面，分为全局变量GLOBAL、会话变量SESSION</p></li><li><p>查看系统变量</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">#查看所有的系统变量show [session|global] variables#可以通过like模糊匹配方式查找变量show [session|global] varibales like &#39;...&#39;#查看指定变量的值select @@[session|global] 系统变量名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>设置系统变量</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">set [session|global] 系统变量名&#x3D;值;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>重新启动之后设置的值会恢复初始值，如果想永久修改，在&#x2F;etc&#x2F;my.cnf中配置</p></li></ul></li><li><h5 id="用户自定义变量：是用户根据需要自己定义的变量，用户变量不用提前声明，在用的时候直接用”-变量名“就可以使用，其作用域为当前连接"><a href="#用户自定义变量：是用户根据需要自己定义的变量，用户变量不用提前声明，在用的时候直接用”-变量名“就可以使用，其作用域为当前连接" class="headerlink" title="用户自定义变量：是用户根据需要自己定义的变量，用户变量不用提前声明，在用的时候直接用”@变量名“就可以使用，其作用域为当前连接"></a>用户自定义变量：是用户根据需要自己定义的变量，用户变量不用提前声明，在用的时候直接用”@变量名“就可以使用，其作用域为当前连接</h5><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">#赋值set @var_name &#x3D; expr 或 select 变量名 :&#x3D; 值#通过查询出来的数据赋值给变量select 字段名 into @var_name from 表名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">#使用select @var_name;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><h5 id="局部变量：是根据需要定义的在局部生效的变量，访问之前，需要declare声明。可用作存储过程内的局部变量和输入参数，局部变量的范围是在其内声明的begin…end块。"><a href="#局部变量：是根据需要定义的在局部生效的变量，访问之前，需要declare声明。可用作存储过程内的局部变量和输入参数，局部变量的范围是在其内声明的begin…end块。" class="headerlink" title="局部变量：是根据需要定义的在局部生效的变量，访问之前，需要declare声明。可用作存储过程内的局部变量和输入参数，局部变量的范围是在其内声明的begin…end块。"></a>局部变量：是根据需要定义的在局部生效的变量，访问之前，需要declare声明。可用作存储过程内的局部变量和输入参数，局部变量的范围是在其内声明的begin…end块。</h5><ul><li><p>声明</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">declare 变量名 变量类型<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>示例</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">create procedure p2()begindeclare stu_cont int default 0;select count (*) into stu_count from student;select stu_count;end;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><h5 id="if"><a href="#if" class="headerlink" title="if"></a>if</h5><ul><li><pre><code class="mysql">if 条件1 then 变量赋值语句elseif 条件 then 变量赋值语句else 条件 then 变量赋值语句end if;select xxx; #返回展示结果<pre class="line-numbers language-none"><code class="language-none">      - ##### 参数：  - in（默认）：该类参数作为输入，也就是需要调用时传入值  - out：该类参数作为输出，也就是该参数可以作为返回值  - inout：既可以作为输入参数，也可以作为输出参数  - 语法：    &#96;&#96;&#96;mysql    create procedure 存储过程名称（in&#x2F;out&#x2F;inout）    begin    --SQL语句    end;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></code></pre></li><li><p>案例</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">#一、根据传入参数score,判定当前分数对应的分数等级，并返回#1. score&gt;&#x3D;85等级为优秀#2. score&gt;&#x3D;60分且score&lt;85分，等级为及格。#3. score&lt;60分，等级为不及格。create procedure p4(in score int,out result varchar)beginif score &gt;&#x3D;85 thanset result:&#x3D;&#39;优秀&#39;;elseif score &gt;&#x3D;60 thanset result:&#x3D;&#39;及格&#39;;else result:&#x3D;&#39;不及格&#39;;end if;end;#调用p4call p4(68,@result);select @result;#二、将传入的200分制的分数，进行换算，换成百分制，然后返回create procedure p5(inout score double)begin set score:&#x3D;score*0.5;end;#调用p5set @score&#x3D;78;call p5(@score);select @score;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><h5 id="case"><a href="#case" class="headerlink" title="case:"></a>case:</h5><ul><li><p>语法</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">case case_valuewhen when_value1 then sql语句when when_value2 then sql语句else sql语句end case<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>案例</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">#根据传入的月份，判定月份所属的季节#1-3月份为第一季度，4-6月份为第二季度，7-9月份为第三季度，10-12月份为第四季度create procedure p6(in month int)begin declare result varchar(10);    case     when month&gt;&#x3D;1 and month&lt;&#x3D;3 then    set result:&#x3D;&#39;第一季度&#39;;    when month&gt;&#x3D;4 and month &lt;&#x3D;6 thenset result:&#x3D;&#39;第二季度&#39;;when month&gt;&#x3D;7 and month &lt;&#x3D;9 thenset result:&#x3D;&#39;第三季度&#39;;when month&gt;&#x3D;10 and month &lt;&#x3D;12 thenset result:&#x3D;&#39;第四季度&#39;;elseset result :&#x3D;&#39;非法参数&#39;;end case;select concat(&#39;你输入的月份为&#39;，month,&#39;所属季度为&#39;，result);#concat函数是字符串拼接函数end<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><h5 id="while"><a href="#while" class="headerlink" title="while"></a>while</h5><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">#先判定条件，如果天剑为true则执行逻辑，否则，不执行逻辑，和java中的while相似while 条件 doSQL逻辑end while;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>案例</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">#计算从1累加到n的值，n为传入的参数值create procedure p7(in n int)begindeclare total int default 0;while n&gt;0 doset total:&#x3D;total+n;set n :&#x3D; n-1;end while;select total;end;call p7(100);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><h5 id="repeat"><a href="#repeat" class="headerlink" title="repeat"></a>repeat</h5><ul><li><p>repeat是有条件的循环控制语句，当满足条件的时候退出循环，具体语法为：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">#先执行一次逻辑，然后判定逻辑是否满足，如果满足，则退出，如果不满足，则继续下一次循环repeatsql逻辑until 条件end repeat;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>案例</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">#计算从1累加到n的值，n为传入的参数值create procedure p8(in n int)begin  declare total int default 0;  repeat  set total :&#x3D; total +n;  set n:&#x3D;n-1;  until n&lt;&#x3D;0;  end repeat;end;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><h5 id="loop"><a href="#loop" class="headerlink" title="loop"></a>loop</h5><ul><li><p>loop实现简单的循环，如果不再sql逻辑中增加退出循环的条件，可以用其来实现简单的死循环，loop可以配合一下两个语句使用：</p><ul><li><p>leave：配合循环使用，退出循环。</p></li><li><p>iterate：必须用在循环中，作用是跳过当前循环剩下的语句，直接进入下一次循环。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">loopSQL逻辑end loop leave label; --退出指定标记的循环体iterate label; --直接进入下一次循环<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>案例</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">#计算从1累加到n的值，n为传入的参数值create procedure p9(in n int)begin declare total int default 0;sum:loopif n&lt;&#x3D;0 then leave sum;end if;set total :&#x3D;total +n;set n:&#x3D;n-1;end loop sum;select total;#计算从1到n之间的偶数累加的值，n为传入的参数值<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><h5 id="游标"><a href="#游标" class="headerlink" title="游标"></a>游标</h5><ul><li><p>游标是用来存储查询结果集的数据类型，在存储过程和函数中可以使用游标对结果进行循环的处理。游标的使用包括游标的声明、open、fetch和close </p></li><li><p>语法</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">#创建游标declare 游标名称 cursor for 查询语句#打开游标open 游标名称;#获取游标记录fetch 游标名称 into 变量[，变量];#关闭游标close 游标名称;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>案例</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">#根据传入的参数uage ,来查询用户表tb_user中，所有的用户年龄小于等于uage的用户姓名和专业，并将用户的姓名和专业插入到所创建的一张新表中create peocedure p11(in uage int)begin#要先声明变量在声明游标，否则报错declare name varchar;declare upro varchar;declare u_cursor cursor for select name,profession from tb_user where age&lt;&#x3D;uage;#声明条件处理程序,当满足状态码为02000时触发declare exit handler for SQLSTATE &#39;02000&#39; close u_cursorfrop table if exists tb_user_pro;create table if ont exists tb_user_pro(    id int primary key,      name varchar,        profession varchar    );        open u_cursor;    while true do    fetch u_cursor into uname,upro;    insert into tb_user_pro values(null,uname,upro);    end while;    close u_cursor;endcall p11(40)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>条件处理程序</p><ul><li><p>可以用来定义在流程控制结构执行过程中遇到的问题时响应的处理步骤。具体语法为：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">declare handler_action handler for confition_value [condition_value...] statement;handler_action continue：继续执行当前程序 exit:终止执行当前程序condition_valuesqlstate sqlstate_value：状态码，如02000SQLWARNING:所有以01开头的SQLSTATE代码的简写not found ：所有以02开头的SQLSTATE代码的简写sqlexception：所有没有被SQLWARNING或NOT FOUND捕获的SQLSTATE代码的简写<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><h4 id="4-3）存储函数-用的少，因为他能的做到的存储过程都能"><a href="#4-3）存储函数-用的少，因为他能的做到的存储过程都能" class="headerlink" title="4.3）存储函数(用的少，因为他能的做到的存储过程都能)"></a>4.3）存储函数(用的少，因为他能的做到的存储过程都能)</h4><ul><li><p>存储函数就是有返回值的存储过程，存储函数的参数只能是in类型的。具体语法如下：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">create function 存储函数名称（参数列表）returns type [characteristic]beginsql语句retuen ...end;characteristic说明：DETERMINISTIC：相同的输入参数总是产生相同的结果NO SQL：不包含SQL语句READS SQL DATA：包含读取数据的语句，但不包含写入数据的语句。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>案例</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">#从1到n的累加create function fun1(n int)return int deterministicbegindeclare total int default 0;while n&gt;0 do set total:&#x3D;total+n;     set n：&#x3D;n-1;    end while;         return total;end;select fun1(100);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><h4 id="4-4）触发器"><a href="#4-4）触发器" class="headerlink" title="4.4）触发器"></a>4.4）触发器</h4><ul><li><h5 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h5><ul><li>触发器是与表有关的数据库对象，是指在增删改之后或之前，触发并执行触发器中定义的SQL语句集合，触发器的这种特性可以协助应用在数据库端确保数据的完整性，日志纪律，数据校验等操作。</li><li>使用别名OLD和NEW来引用触发器中发生变化的记录内容，这与其他的数据库时相似的。现在触发器还只支持行级触发，不支持语句级触发。<img src="C:\Users\吕飞扬\Desktop\SQL调优\img\D4D22C7376FCAFF5ECE126BDB8B7D879.png" alt="D4D22C7376FCAFF5ECE126BDB8B7D879"></li></ul></li><li><p>语法</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">#创建create trigger trigger_name before&#x2F;after insert&#x2F;update&#x2F;delete #before和after 指定sql执行前或执行后执行触发器on tbl_name from each row #--行级触发器,监控表的namebeginsqlend;#查看show trigger;#删除drop trigger[数据库名] trigger_name;   不指定数据库名默认当前数据库<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>案例<img src="C:\Users\吕飞扬\Desktop\SQL调优\img\IMG_7950.PNG" alt="IMG_7950"></p></li></ul><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">create trigger tb_user_insert_triggerafter insert on tb_user for each rowbegininsert into user_logs(id,operation,operate_time,operate_id,operate_params) values(null,&#39;insert&#39;,now(),new.id,concat(&#39;插入的数据内容为:id&#x3D;&#39;，new.id,&#39;name&#x3D;&#39;,new.name,&#39;phone&#x3D;&#39;,new.phone))end;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>修改数据的触发器</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">create trigger tb_user_update_triggerafter update on tb_user for each rowbegininsert into user_logs(id,operation,operate_time,operate_id,operate_params) values(null,&#39;update&#39;,now(),new.id,concat(&#39;更新之前的插入的数据内容为:id&#x3D;&#39;，old.id,&#39;name&#x3D;&#39;,old.name,&#39;phone&#x3D;&#39;,old.phone，    &#39;更新之后的插入的数据内容为:id&#x3D;&#39;，new.id,&#39;name&#x3D;&#39;,new.name,&#39;phone&#x3D;&#39;,new.phone))end;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>删除数据的触发器</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">create trigger tb_user_delete_triggerafter delete on tb_user for each rowbegininsert into user_logs(id,operation,operate_time,operate_id,operate_params) values(null,&#39;insert&#39;,now(),old.id,concat(&#39;删除数据内容为:id&#x3D;&#39;，old.id,&#39;name&#x3D;&#39;,old.name,&#39;phone&#x3D;&#39;,old.phone))end;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="4-5）总结"><a href="#4-5）总结" class="headerlink" title="4.5）总结"></a>4.5）总结</h4><ul><li><h5 id="视图view："><a href="#视图view：" class="headerlink" title="视图view："></a>视图view：</h5><ul><li>虚拟存在的表，不保存查询结果，只保存查询的SQL逻辑</li><li>简单、安全、数据独立</li></ul></li><li><h5 id="存储过程procedure："><a href="#存储过程procedure：" class="headerlink" title="存储过程procedure："></a>存储过程procedure：</h5><ul><li>事先定义并存储在数据库的一段SQL语句的集合。</li><li>减少网络交互，提高性能、封装重用</li><li>变量、if、case、参数（in&#x2F;out&#x2F;inout）、while、repeat、loop、cursor、handler</li></ul></li><li><h5 id="存储函数function："><a href="#存储函数function：" class="headerlink" title="存储函数function："></a>存储函数function：</h5><ul><li>存储函数就是有返回值的存储过程，参数类型只能为in类型</li><li>存储函数可以被存储过程替代</li></ul></li><li><h5 id="触发器trigger："><a href="#触发器trigger：" class="headerlink" title="触发器trigger："></a>触发器trigger：</h5><ul><li>可以在表数据进行insert、update、delete、之前或者之后触发</li><li>保证数据完整性、日志记录、数据校验</li></ul></li></ul><h1 id="5-锁"><a href="#5-锁" class="headerlink" title="5.锁"></a>5.锁</h1><ul><li><h5 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h5><ul><li>锁是计算机协调多个进程或线程并发访问某一资源的机制。在数据库中，除传统计算资源（cpu、RAM、I&#x2F;O）的争用之外，数据也是一种供许多用户共享的资源。如何保证数据并发访问的一致性、有效性是所有数据库必须解决的一个问题，锁冲突也是影响数据库并发访问性能的一个重要因素。从这个角度说，锁对数据库而言显得尤其重要，也更加复杂</li></ul></li><li><h5 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h5><ul><li><h6 id="全局锁：锁定数据库中的所有表"><a href="#全局锁：锁定数据库中的所有表" class="headerlink" title="全局锁：锁定数据库中的所有表"></a>全局锁：锁定数据库中的所有表</h6><ul><li><p>介绍：</p><ul><li>全局锁就是对整个数据库实例加锁，加锁后整个实例就处于只读状态，后续的DML的写语句，DDL语句，已经更新操作的事务提交语句都将被阻塞</li><li>其典型的使用场景是做全库的逻辑备份，对所有的表进行锁定，从而获取一致性视图，保证数据的完整性</li></ul></li><li><p>对当前数据库加全局锁</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">#加锁flush tables with read lock;#备份mysqldump -uroot -p1234 备份的数据库名&gt;存放的路径&#x2F;名字.sql#注mysqldump命令不是mysql中使用的命令，直接在命令行中输入，不要在MYSQL中输入#解锁unlock tables;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>因为全局锁是一个比较重的操作存在很多问题</p><ul><li><p>在innoDB引擎中，我们可以在备份时加上参数–single-transaction参数来完成不加锁的一致性数据备份</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysqldump --single-transaction -uroot -p1234 备份的数据库名&gt;存放的路径&#x2F;名字.sql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li></ul></li></ul></li><li><h6 id="表级锁：每次操作锁住整张表"><a href="#表级锁：每次操作锁住整张表" class="headerlink" title="表级锁：每次操作锁住整张表"></a>表级锁：每次操作锁住整张表</h6><ul><li><p>介绍</p><ul><li>表级锁，每次操作锁住整张表。锁定粒度大，发生锁冲突的概率最高，并发度最低，应用在MySIAM、InnoDB、BDB等存储引擎中</li></ul></li><li><p>分类</p><ul><li><p>表锁</p><ul><li>表共享读锁（read lock）：加锁的客户端只读状态如果进行更新等操作直接报错，别的客户端可以读但写时会处于阻塞状态，当解锁时在执行SQL</li><li>表独占写锁（write lock）：加锁的客户端加了写锁，既可以读也可以写，而别的客户端来访问即不能读也不能写</li><li>加锁语法<ul><li>lock tables 表名 read&#x2F;write</li></ul></li><li>释放锁<ul><li>unlock tables &#x2F;客户端断开连接</li></ul></li></ul></li><li><p>元数据锁（meta data lock,MDL）</p><ul><li>MDL加锁过程是系统自动控制，无需显示使用，在访问一张表的时候会自动加上，DML锁主要作用是维护表元数据的数据一致性，在表上又活动事务的时候，不可以对元数据进行操作。<ul><li>简单来说就是，如果这张表存在未提交的事务，则我们不能对这张表进行修改（避免了DML和DDL语句的冲突）<img src="C:\Users\吕飞扬\Desktop\SQL调优\img\3F69321A90C2EB3820D2A07889845109.png" alt="3F69321A90C2EB3820D2A07889845109"></li></ul></li></ul></li><li><p>意向锁</p><ul><li><p>意向共享锁（ls）：由语句select…lock inshare mode添加</p><ul><li>语法</li></ul><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select * from xxx where xxx&#x3D; xxx lock inshare mode<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>与表锁共享锁（read）兼容，与表锁排它锁（write）互斥</li></ul></li><li><p>意向排他锁（lx）:由insert、update、delete、select…for update 添加</p><ul><li>与表锁共享锁（read）级排他锁（write）都互斥，意向锁之间不会互相互斥</li></ul></li></ul></li></ul></li></ul></li><li><h6 id="行级锁：每次操作锁住对应的行数据"><a href="#行级锁：每次操作锁住对应的行数据" class="headerlink" title="行级锁：每次操作锁住对应的行数据"></a>行级锁：每次操作锁住对应的行数据</h6><ul><li><p>介绍：</p><ul><li><p>行级锁，每次操作锁住对应的行数据，锁定粒度最小，发生锁冲突的概率最低，并发度最高。应用在InnoDB存储引擎中。</p><p>InnoDB的数据是基于索引组织的，行锁是通过对索引上的索引项加锁来实现的，而不是对记录加的锁，对于行级锁主要分为以下三类：</p><ul><li><p>行锁：锁定单个行记录的锁，防止其他事务对此进行update和delete。在RC、RR隔离级别下都支持</p><ul><li>innoDB实现了以下两种类型的行锁<img src="C:\Users\吕飞扬\Desktop\SQL调优\img\7999B4666F422CCF839DAE2357DD4C80.png" alt="7999B4666F422CCF839DAE2357DD4C80"><ul><li>共享锁：允许一个事务去读一行，阻止其他事务获得相同的数据集的排他锁</li><li>排他锁：允许获取排它锁的事务更新数据，阻止其他事务获得相同数据集的共享锁和排他锁<img src="C:\Users\吕飞扬\Desktop\SQL调优\img\1151F5A6EB7253F2FAD173BE117659CD.png" alt="1151F5A6EB7253F2FAD173BE117659CD"></li><li>也就是说增删改会自动加排它锁，查的话如果不指定不加任何锁</li></ul></li></ul></li><li><p>间隙锁：锁定索引记录间隙（不含该记录），确保索引记录间隙不变，防止其他事务在这个间隙进行insert,产生幻读，在RR隔离级别下都支持</p><ul><li>索引上给等值查询（唯一索引），给不存在的记录加锁时，优化为间隙锁</li><li>索引上的等值查询（普通索引），向右遍历最后一个值不满足查询需求时，退化为间隙锁</li><li>索引上的范围查询（唯一索引）–会访问到不满足条件的第一个值为止。</li></ul></li><li><p>临键锁：行锁和间隙锁的组合，同时锁住数据，并锁住数据前面的间隙Gap,在RR隔离级别下支持</p></li></ul></li></ul></li></ul></li></ul></li></ul><h4 id="5-1）总结"><a href="#5-1）总结" class="headerlink" title="5.1）总结"></a>5.1）总结</h4><p>间隙锁就是锁住两条数据的间隙，临键锁就是锁住两条数据包括间隙，并且如果是范围查询，还会把范围后面无限大的数据锁住。</p><ul><li>概述<ul><li>在并发访问时，解决数据访问一致性、有效性问题</li><li>全局锁，表级锁，行级锁</li></ul></li><li>全局锁<ul><li>对整个数据库实例加锁，加锁后整个实例就处于只读状态</li><li>性能较差，数据备份时使用</li></ul></li><li>表级锁<ul><li>操作锁住整张表，锁定粒度大，发生锁冲突的概率高</li><li>表锁、元数据锁、意向锁</li></ul></li><li>行级锁<ul><li>操作锁住对应行数据，锁定粒度小，发生锁冲突的概率最低</li><li>行锁，间隙锁，临键锁</li></ul></li></ul><h1 id="6-innoDB引擎"><a href="#6-innoDB引擎" class="headerlink" title="6.innoDB引擎"></a>6.innoDB引擎</h1><h4 id="6-1）逻辑存储原理"><a href="#6-1）逻辑存储原理" class="headerlink" title="6.1）逻辑存储原理"></a>6.1）逻辑存储原理</h4><h4 id="6-2）架构"><a href="#6-2）架构" class="headerlink" title="6.2）架构"></a>6.2）架构</h4><ul><li><h5 id="内存架构"><a href="#内存架构" class="headerlink" title="内存架构"></a>内存架构</h5><ul><li><h6 id="Butter-Pool：缓冲池是主内存中的一个区域，里面可以存储缓存磁盘上经常操作的真实数据，在执行增删改查操作时，先操作缓冲池中的数据（若缓冲池没有数据，则从磁盘加载并缓存），然后再以一定频率刷新到磁盘，从而减少磁盘IO，加快处理速度。"><a href="#Butter-Pool：缓冲池是主内存中的一个区域，里面可以存储缓存磁盘上经常操作的真实数据，在执行增删改查操作时，先操作缓冲池中的数据（若缓冲池没有数据，则从磁盘加载并缓存），然后再以一定频率刷新到磁盘，从而减少磁盘IO，加快处理速度。" class="headerlink" title="Butter Pool：缓冲池是主内存中的一个区域，里面可以存储缓存磁盘上经常操作的真实数据，在执行增删改查操作时，先操作缓冲池中的数据（若缓冲池没有数据，则从磁盘加载并缓存），然后再以一定频率刷新到磁盘，从而减少磁盘IO，加快处理速度。"></a>Butter Pool：缓冲池是主内存中的一个区域，里面可以存储缓存磁盘上经常操作的真实数据，在执行增删改查操作时，先操作缓冲池中的数据（若缓冲池没有数据，则从磁盘加载并缓存），然后再以一定频率刷新到磁盘，从而减少磁盘IO，加快处理速度。</h6><ul><li>缓冲池以Page页为单位，底层采用链表数据结构管理Page，根据状态，将Page分为三种类型：<ul><li>free page：空闲page,未被使用</li><li>clean page：被使用page,数据没有被修改过。</li><li>dirty page：脏页，被使用page,数据被修改过，也中数据与磁盘的数据产生了不一致。</li></ul></li></ul></li><li><h6 id="Change-Buffer：更改缓冲区（针对非唯一二级索引页），在执行DML语句时，如果这些数据Page没有在Buffer-Pool中，不会直接操作磁盘，而会将数据变更存在更改缓冲区Change-Buffer中，在未来数据被读取时，在将数据合并恢复到Buffer-Pool中，在将合并后的数据刷新到磁盘中。"><a href="#Change-Buffer：更改缓冲区（针对非唯一二级索引页），在执行DML语句时，如果这些数据Page没有在Buffer-Pool中，不会直接操作磁盘，而会将数据变更存在更改缓冲区Change-Buffer中，在未来数据被读取时，在将数据合并恢复到Buffer-Pool中，在将合并后的数据刷新到磁盘中。" class="headerlink" title="Change Buffer：更改缓冲区（针对非唯一二级索引页），在执行DML语句时，如果这些数据Page没有在Buffer Pool中，不会直接操作磁盘，而会将数据变更存在更改缓冲区Change Buffer中，在未来数据被读取时，在将数据合并恢复到Buffer Pool中，在将合并后的数据刷新到磁盘中。"></a>Change Buffer：更改缓冲区（针对非唯一二级索引页），在执行DML语句时，如果这些数据Page没有在Buffer Pool中，不会直接操作磁盘，而会将数据变更存在更改缓冲区Change Buffer中，在未来数据被读取时，在将数据合并恢复到Buffer Pool中，在将合并后的数据刷新到磁盘中。</h6></li><li><h6 id="Adaptive-Hash-index-：自适应hash索引，用于优化Buffer-Pool数据的查询，InnoDB存储引擎会架空对表上各索引页的查询，如果观察到hash索引可以提升速度，则建立自适应hash索引。"><a href="#Adaptive-Hash-index-：自适应hash索引，用于优化Buffer-Pool数据的查询，InnoDB存储引擎会架空对表上各索引页的查询，如果观察到hash索引可以提升速度，则建立自适应hash索引。" class="headerlink" title="Adaptive Hash index ：自适应hash索引，用于优化Buffer Pool数据的查询，InnoDB存储引擎会架空对表上各索引页的查询，如果观察到hash索引可以提升速度，则建立自适应hash索引。"></a>Adaptive Hash index ：自适应hash索引，用于优化Buffer Pool数据的查询，InnoDB存储引擎会架空对表上各索引页的查询，如果观察到hash索引可以提升速度，则建立自适应hash索引。</h6><ul><li>自适应哈希索引，无需人工干预，是系统根据情况自动完成。</li><li>参数 adaptive_hash_index</li></ul></li><li><h6 id="Log-Buffer：日志缓冲区，用来保存要写入磁盘中log日志的数据（redo-log、undo-log）-默认大小为16MB，日志缓冲区的日志会定期刷新到磁盘中，如果需要更新、插入或删除许多行的事务，增加日志缓冲区的大小可以节省磁盘IO。"><a href="#Log-Buffer：日志缓冲区，用来保存要写入磁盘中log日志的数据（redo-log、undo-log）-默认大小为16MB，日志缓冲区的日志会定期刷新到磁盘中，如果需要更新、插入或删除许多行的事务，增加日志缓冲区的大小可以节省磁盘IO。" class="headerlink" title="Log Buffer：日志缓冲区，用来保存要写入磁盘中log日志的数据（redo log、undo log）,默认大小为16MB，日志缓冲区的日志会定期刷新到磁盘中，如果需要更新、插入或删除许多行的事务，增加日志缓冲区的大小可以节省磁盘IO。"></a>Log Buffer：日志缓冲区，用来保存要写入磁盘中log日志的数据（redo log、undo log）,默认大小为16MB，日志缓冲区的日志会定期刷新到磁盘中，如果需要更新、插入或删除许多行的事务，增加日志缓冲区的大小可以节省磁盘IO。</h6><ul><li>参数：<ul><li>innodb_log_bufer_size：缓冲区大小</li><li>innodb_flush_log_at_trx_commit：日志刷新到磁盘时机<ul><li>1：日志在每次事务提交时写入并刷新到磁盘</li><li>0：每秒将日志写入并刷新到磁盘一次</li><li>2：日志在每次事务提交后写入，并每秒刷新到磁盘一次</li></ul></li></ul></li></ul></li></ul></li><li><h5 id="磁盘结构"><a href="#磁盘结构" class="headerlink" title="磁盘结构"></a>磁盘结构</h5><ul><li>System Tablespace：系统表空间是更改缓冲区的存储区域，如果表时在系统表空间而不是每个表文件或通用表空间中创建的，它也可能包含表和索引数据。（在Mysql5.x版本中还包含innoDB数据字典、undolog等）<ul><li>参数innodb_data_file_path</li></ul></li><li>File_Per_table_tablespaces：每个表的文件表空间包含单个InnoDB表的数据和索引，并存储在文件系统上的单个数据文件中。<ul><li>参数：Innodb_file_per_table</li></ul></li><li>Doublewirte Buffer Files：双写缓冲区，InnoDB引擎将数据也从Buffer Pool引擎将数据也从Buffer Pool刷新到磁盘前，先将数据页写入双写缓冲区文件中，便于系统异常时恢复数据<ul><li>ib_16384_0.dblwr</li><li>ib_16384_1.dbwr</li></ul></li><li>Redo Log：重做日志，是用来实现事务的持久性，该日志文件由两部分组成：重做日志缓冲以及重做日志文件，前者是在内存中，后者是在磁盘中。当事务提交之后会把所有修改信息都会存到该日志中，用于在刷新脏页到磁盘时，发生错误时，进行数据恢复<ul><li>以循环方式写入重做日志文件，涉及两个文件：<ul><li>ib_logfile0</li><li>ib_logfile1</li></ul></li></ul></li></ul></li></ul><h4 id="6-3）事务原理"><a href="#6-3）事务原理" class="headerlink" title="6.3）事务原理"></a>6.3）事务原理</h4><ul><li><p>事务</p><ul><li>一组操作的集合，这些操作要么同时成功，要么同时失败</li></ul></li><li><p>redo log</p><ul><li><p>重做日志，记录的是事务提交时数据页的物理修改，是用来实现事务的持久性</p><p>该日志文件由两部分组成：重做日志缓冲以及重做日志文件，前者是在内存中，后者是在磁盘中。当事务提交之后会把所有修改信息都存到该日志文件中，用于在刷新脏页到磁盘，发生错误时，进行数据恢复使用。</p></li></ul></li><li><p>undo log</p><ul><li><p>回滚日志，用于记录数据被修改前的信息，作用包含两个：提供回滚和MVCC（多版本并发控制）</p><p>undo log 和redo log 记录物理日志不一样，它是逻辑日志。可以认为当delete一条记录时，undo log中会纪录一条对应的insert记录，反之亦然，当update一条记录时，它记录一条对应相反的update记录。当执行rollback时，就可以从undo log中的逻辑记录读取到相应的内容并进行回滚</p><ul><li>Undo log 销毁：undo log在事务执行时产生，事务提交时并不会立即删除undo log,因为这些日志可能还用于MVCC的快照读</li><li>Undo log 存储：undo log 采用段的方式进行管理和记录，存放在前面介绍的 rollback segement 回滚段中，内部包含1024个undo log segment。</li></ul></li></ul></li></ul><h4 id="6-4）MVCC"><a href="#6-4）MVCC" class="headerlink" title="6.4）MVCC"></a>6.4）MVCC</h4><ul><li><p>当前读：</p><ul><li>读取的是记录的最新版本，读取时还要保证其他并发事务不能修改当前记录，会对读取的记录进行加锁。对于我们日常的操作，如：增删改（排它锁）查（共享锁）都是一中当前读</li></ul></li><li><p>快照读</p><ul><li>简单的select(不加锁)就是快照读，快照读，读取的是记录数据的可见版本，有可能是历史数据，不加锁，是非阻塞读。<ul><li>Read Committed：每次select，都生成一个快照读。</li><li>Repeatable Read ：开启事务后第一个select语句才是快照读的地方</li><li>Serializable：快照读会退化为当前读</li></ul></li></ul></li><li><p>MVCC</p><ul><li><p>多版本并发控制。指维护一个数据的多个版本，使得读写操作没有冲突</p><p><img src="C:\Users\吕飞扬\Desktop\SQL调优\img\83690A9E86445AC2BC3D1E8504555ACC.png" alt="83690A9E86445AC2BC3D1E8504555ACC"></p><ul><li>undo log 版本链</li><li>readview<ul><li>是快照读SQL执行时mvcc提前数据的一句，记录并维护系统当前活跃的事务id。</li><li>ReadView包含了四个核心字段<img src="C:\Users\吕飞扬\Desktop\SQL调优\img\311D44ED073B9136895C80580E21BD51.png" alt="311D44ED073B9136895C80580E21BD51"><img src="C:\Users\吕飞扬\Desktop\SQL调优\img\5363E1BEFD70460184C36E2526E07888.png" alt="5363E1BEFD70460184C36E2526E07888"></li></ul></li></ul></li></ul></li></ul><h1 id="7-Mysql管理"><a href="#7-Mysql管理" class="headerlink" title="7.Mysql管理"></a>7.Mysql管理</h1><h5 id="7-1）系统数据库"><a href="#7-1）系统数据库" class="headerlink" title="7.1）系统数据库"></a>7.1）系统数据库</h5><ul><li>Mysql数据库自带4个<ul><li>mysql：存储Mysql服务器正常运行所需要的各种信息（时区、主从、用户、权限）</li><li>information_schema：提供了访问数据库元数据的各种表和视图，包含数据库、表、字段类型及访问权限等</li><li>performance_schema：为Mysql服务器运行时状态提供了一个底层监控功能，主要用于收集数据库服务器性能参数</li><li>sys：包含了一系列方便DBA和开发人员利用performance_schema性能数据库进行性能调优和诊断的视图</li></ul></li></ul><h4 id="7-2）常用工具"><a href="#7-2）常用工具" class="headerlink" title="7.2）常用工具"></a>7.2）常用工具</h4><p><img src="C:\Users\吕飞扬\Desktop\SQL调优\img\999B4ACDA644A7ADF716AB87EDAD1406.png" alt="999B4ACDA644A7ADF716AB87EDAD1406"></p><ul><li>-e参数：可以不用登录进数据库直接查询</li></ul><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql -h192.168.xxx.xxx -uroot -p123456 db01 -e &quot;select * from xxx&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p>mysqladmin</p><ul><li><p>它是一个执行管理操作客户端程序。可以用来检查服务器的配置和当前状态、创建并删除数据库等。</p><ul><li><p>mysqladmin –help：查看帮助文档</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysqladmin [options] 指令<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li></ul></li><li><p>mysqlbinlog：由于服务器生成的二进制日志文件以二进制格式保存，所以如果想要检查这些文本的文本格式，就会使用mysqlbinlog日志管理工具<img src="C:\Users\吕飞扬\Desktop\SQL调优\img\4EE0714E4BDE2ADD1B9B5C7B5C202185.png" alt="4EE0714E4BDE2ADD1B9B5C7B5C202185"></p></li><li><p>mysqlshow</p><ul><li>客户端对象查找工具<img src="C:\Users\吕飞扬\Desktop\SQL调优\img\0AEEE330BD35DB847623BBC11C55FDC5.png" alt="0AEEE330BD35DB847623BBC11C55FDC5"></li></ul></li><li><p>mysqldump</p><ul><li>客户端工具用来备份数据库或数据迁移</li></ul></li></ul><p><img src="C:\Users\吕飞扬\Desktop\SQL调优\img\4EED89C23DBA79F0BC575F886154C84E.png" alt="4EED89C23DBA79F0BC575F886154C84E"></p><h1 id="8-锁"><a href="#8-锁" class="headerlink" title="8.锁"></a>8.<strong>锁</strong></h1><ul><li><p>全局锁(整个数据库只读)</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">flush <span class="token keyword">tables</span> <span class="token keyword">with</span> <span class="token keyword">read</span> <span class="token keyword">lock</span><span class="token punctuation">;</span> <span class="token comment">//全局锁</span>mysqldump <span class="token operator">-</span>uxxx <span class="token operator">-</span>pxxx 表<span class="token operator">></span>名字<span class="token punctuation">.</span><span class="token keyword">sql</span> <span class="token comment">//数据库备份</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>表锁(一张表只读)</p><ul><li><p>表共享读锁</p></li><li><p>表独占写锁</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">lock</span> <span class="token keyword">tables</span> 表名<span class="token number">1</span><span class="token operator">/</span>表名<span class="token number">2.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">read</span><span class="token operator">/</span><span class="token keyword">write</span><span class="token keyword">unlock</span> <span class="token keyword">tables</span> <span class="token operator">/</span>断开客户端也行  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul></li><li><p>元数据锁</p><ul><li>元数据锁是由系统自动控制的，无需显示使用，在访问一张表的时候会自动加上，主要所用就是维护表元数据的数据一致性，在表上有活动的事务的时候，不可以对元数据进行写入操作</li><li>其实就是防止 DML语句和DDl语句的冲突，在使用DML进行增删改查时，会加读锁，在使用DDL进行表结构变更，会上写锁</li></ul></li><li><p>意向锁</p><ul><li>为了解决锁冲突，当一张表上了行锁，另一个线程上表锁时，他会去遍历每条数据，看看有没有锁来决定是否阻塞，效率低下，而有了意向锁之后，当上行锁时，就会给表添加一个意向锁，另一个线程只要通过判断是否有这个意向锁以及意向锁类型来直接进行加锁或阻塞</li></ul></li><li><p>间隙锁</p><ul><li>解决幻读问题</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token identifier"><span class="token punctuation">`</span>tt<span class="token punctuation">`</span></span> <span class="token keyword">WHERE</span> id <span class="token operator">&lt;=</span><span class="token number">4</span> <span class="token keyword">lock</span> <span class="token operator">in</span> <span class="token keyword">share</span> <span class="token keyword">mode</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li>索引上等值查询（唯一索引），给不存在的记录加锁时，优化为间隙锁</li><li>索引上的等值查询（普通索引），向右遍历时最后一个值不满足需求时，退化为 间隙锁</li><li>索引上范围查询（唯一索引）会访问到不满足条件的第一个值为止</li></ol><p>例如这条示例sql，会在小于4的最后一条记录，和4 这条记录中添加间隙锁。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分布式 </tag>
            
            <tag> 数据库 </tag>
            
            <tag> 调优 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue中的axios</title>
      <link href="/2022/10/07/vue-zhong-de-axios/"/>
      <url>/2022/10/07/vue-zhong-de-axios/</url>
      
        <content type="html"><![CDATA[<h1 id="1-axios"><a href="#1-axios" class="headerlink" title="1.axios"></a>1.axios</h1><h3 id="1-1）全局配置axios"><a href="#1-1）全局配置axios" class="headerlink" title="1.1）全局配置axios"></a>1.1）全局配置axios</h3><p>在main.js入口文件中。通过app.config.globaiProperties全局全局挂载axios</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> createApp <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">'./App.vue'</span><span class="token keyword">import</span> <span class="token string">'./index.css'</span><span class="token comment">//导入axios</span><span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">'axios'</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">createApp</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token comment">//路径前缀</span>axios<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span>baseURL <span class="token operator">=</span> <span class="token string">'https://www.escook.cn'</span><span class="token comment">//全局配置this.$http</span>app<span class="token punctuation">.</span>config<span class="token punctuation">.</span>globalProperties<span class="token punctuation">.</span>$http <span class="token operator">=</span> axiosapp<span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">'#app'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用axios请求数据</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;button @click&#x3D;&quot;fasong&quot;&gt;发送&lt;&#x2F;button&gt;&lt;&#x2F;template&gt;&lt;script&gt;export default &#123;    methods:&#123;       async fasong()&#123;           &#x2F;&#x2F; &#39;https:&#x2F;&#x2F;www.escook.cn&#x2F;api&#x2F;get&#39;全局配置了路径前缀           const &#123;data:res&#125; &#x3D; await this.$http.get(&#39;api&#x2F;get&#39;,&#123;                name:&#39;lfy&#39;,            &#125;);            console.log(res)        &#125;    &#125;&#125;&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="2axios拦截器"><a href="#2axios拦截器" class="headerlink" title="2axios拦截器"></a>2axios拦截器</h1><p>需要在main.js入口文件中，通过Vue构造函数的prototype原型对象全局配置axios</p><p><img src="C:\Users\吕飞扬\Desktop\Vue\img\AD24F402662D78BAAF31D10146A0D4C7.png" alt="AD24F402662D78BAAF31D10146A0D4C7"></p><p>在main.js中</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">'axios'</span><span class="token punctuation">;</span>axios<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span>baseURL <span class="token operator">=</span> <span class="token string">'https://www.escook.cn'</span><span class="token class-name">Vue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$http <span class="token operator">=</span> axios<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-1）配置请求拦截器"><a href="#2-1）配置请求拦截器" class="headerlink" title="2.1）配置请求拦截器"></a>2.1）配置请求拦截器</h2><p><strong>通过axios.interceptors.request.use(成功回调，失败回调)</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//失败回调可以省略</span>axios<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">funtion</span><span class="token punctuation">(</span><span class="token parameter">config</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>token</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">axios<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token parameter">config</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>    config<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>Authorization<span class="token operator">=</span><span class="token string">'Bearer xxx'</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>    <span class="token keyword">return</span> config<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-2）请求拦截器-展示loading效果"><a href="#2-2）请求拦截器-展示loading效果" class="headerlink" title="2.2）请求拦截器-展示loading效果"></a>2.2）请求拦截器-展示loading效果</h2><p>借助于element ui 提供的Loading效果组件</p><p>可以方便的实现Loading效果的展示</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span>Loding<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'element-ui'</span><span class="token keyword">let</span> loadingInstance <span class="token operator">=</span> <span class="token keyword">null</span>axios<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token parameter">config</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>    <span class="token comment">//调用Loading组件的service（）方法，创建Loading组件的实例，并全屏展示loading效果</span>lodingInstance<span class="token operator">=</span>Loding<span class="token punctuation">.</span><span class="token function">service</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token literal-property property">fullsccreen</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-3）配置响应拦截器"><a href="#2-3）配置响应拦截器" class="headerlink" title="2.3）配置响应拦截器"></a>2.3）配置响应拦截器</h2><p>通过axios.interceptors.response.use(成功回调，失败回调)</p><p><strong>关闭loading效果</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">axios<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token parameter">response</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>loadingInstance<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">return</span> response<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringCloud</title>
      <link href="/2022/10/02/springcloud/"/>
      <url>/2022/10/02/springcloud/</url>
      
        <content type="html"><![CDATA[<h3 id="主从选举理解"><a href="#主从选举理解" class="headerlink" title="主从选举理解"></a>主从选举理解</h3><p>当列表没有主机时，所有的服务器进入150-300毫秒的沉睡，然后谁先醒谁给自己投一票，然后告诉别的服务器自己要当主机了，别的主机也会投票给自己</p><p>如果有两台从机同时醒，则两台从机继续进入150-300随机沉睡，直到有一个先醒</p><h3 id="更新数据理解"><a href="#更新数据理解" class="headerlink" title="更新数据理解"></a>更新数据理解</h3><p>当主机接收到客户端的数据时，会先把数据写进日志，但是不提交，然后告诉从机，从机如果大部分没有响应，主机就不更新数据，为了数据一致性</p><p>如果从机大部分有响应，则主机写入数据后，从机在写入数据</p><h1 id="1-Eureka集群"><a href="#1-Eureka集群" class="headerlink" title="1.Eureka集群"></a>1.Eureka集群</h1><p>版本</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                主要就是这个2.3.12            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.3.12.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>relativePath</span><span class="token punctuation">/></span></span> <span class="token comment">&lt;!-- lookup parent from repository --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.lfy<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>EurekaServer<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.0.1-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>02-EurekaServer<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>02-EurekaServer<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>java.version</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>java.version</span><span class="token punctuation">></span></span>                还有这个Hoxton    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>spring-cloud.version</span><span class="token punctuation">></span></span>Hoxton.SR12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>spring-cloud.version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其实就是几个server端服务器之间相互注册</p><p>然后Client注册到Server端</p><p>集群peer1</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8761</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> Eureka<span class="token punctuation">-</span>Server <span class="token comment">#服务名称</span><span class="token key atrule">eureka</span><span class="token punctuation">:</span>  <span class="token key atrule">server</span><span class="token punctuation">:</span>    <span class="token key atrule">eviction-interval-timer-in-ms</span><span class="token punctuation">:</span> <span class="token number">10000</span> <span class="token comment">#服务端间隔多少毫秒做定期删除操作</span>    <span class="token key atrule">renewal-percent-threshold</span><span class="token punctuation">:</span> <span class="token number">0.85</span> <span class="token comment">#续约百分比，超过百分之85的应用没和你续约，那么eureka会保护服务 不会剔除任何一个服务</span>    <span class="token comment">#注册实例</span>  <span class="token key atrule">instance</span><span class="token punctuation">:</span>  <span class="token comment">#windows模拟多台服务器，把host文件夹127.0.0.1 改成peer1 pper2 peer3模拟三台服务器</span>    <span class="token key atrule">hostname</span><span class="token punctuation">:</span> peer1 <span class="token comment">#本机ip</span>    <span class="token key atrule">instance-id</span><span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span>eureka.instance.hostname<span class="token punctuation">&#125;</span><span class="token punctuation">:</span>$<span class="token punctuation">&#123;</span>spring.application.name<span class="token punctuation">&#125;</span><span class="token punctuation">:</span>$<span class="token punctuation">&#123;</span>server.port<span class="token punctuation">&#125;</span> <span class="token comment">#主机名称</span>    <span class="token key atrule">prefer-ip-address</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment">#以ip的形式显示具体的服务信息</span>    <span class="token key atrule">lease-renewal-interval-in-seconds</span><span class="token punctuation">:</span> <span class="token number">5</span> <span class="token comment">#服务器实例的续约时间间隔</span>  <span class="token key atrule">client</span><span class="token punctuation">:</span>    <span class="token key atrule">service-url</span><span class="token punctuation">:</span>    <span class="token comment">#多态服务器相互注册，如果是peer2主机就注册peer1和peer3 </span>      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//peer2<span class="token punctuation">:</span>8762/eureka<span class="token punctuation">,</span>http<span class="token punctuation">:</span>//peer3<span class="token punctuation">:</span>8763/eureka<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>peer2</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8762</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> Eureka<span class="token punctuation">-</span>Server<span class="token key atrule">eureka</span><span class="token punctuation">:</span>  <span class="token key atrule">client</span><span class="token punctuation">:</span>    <span class="token key atrule">service-url</span><span class="token punctuation">:</span>    <span class="token comment">#注册多台Server端部署集群</span>      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//peer1<span class="token punctuation">:</span>8761/eureka<span class="token punctuation">,</span>http<span class="token punctuation">:</span>//peer3<span class="token punctuation">:</span>8763/eureka  <span class="token key atrule">server</span><span class="token punctuation">:</span>    <span class="token key atrule">eviction-interval-timer-in-ms</span><span class="token punctuation">:</span> <span class="token number">10000</span>  <span class="token key atrule">instance</span><span class="token punctuation">:</span>  <span class="token comment">#其实就是ip,等同于127.0.0.1，这里是windows模拟多态主机</span>    <span class="token key atrule">hostname</span><span class="token punctuation">:</span> peer3    <span class="token key atrule">prefer-ip-address</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">lease-renewal-interval-in-seconds</span><span class="token punctuation">:</span> <span class="token number">5</span>    <span class="token key atrule">instance-id</span><span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span>eureka.instance.hostname<span class="token punctuation">&#125;</span><span class="token punctuation">:</span>$<span class="token punctuation">&#123;</span>spring.application.name<span class="token punctuation">&#125;</span><span class="token punctuation">:</span>$<span class="token punctuation">&#123;</span>server.port<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>peer3省略，同理</p><p>然后client端也注册到三个集群服务</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8081</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> eureka<span class="token punctuation">-</span>client<span class="token punctuation">-</span>a<span class="token key atrule">eureka</span><span class="token punctuation">:</span>  <span class="token key atrule">client</span><span class="token punctuation">:</span>    <span class="token key atrule">service-url</span><span class="token punctuation">:</span>    <span class="token comment">#上面搭建的集群peer1，peer2，peer3</span>      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//peer1<span class="token punctuation">:</span>8761/eureka<span class="token punctuation">,</span>http<span class="token punctuation">:</span>//peer2<span class="token punctuation">:</span>8762/eureka<span class="token punctuation">,</span>http<span class="token punctuation">:</span>//peer3<span class="token punctuation">:</span>8763/eureka<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="2-ribbon"><a href="#2-ribbon" class="headerlink" title="2.ribbon"></a>2.ribbon</h1><p>是fegin的底层，fegin是封装了的ribbon</p><p>ribbon</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">ribbon</span><span class="token punctuation">:</span>   <span class="token key atrule">ReadTimeout</span><span class="token punctuation">:</span> <span class="token number">3000</span> <span class="token comment">#给服务执行3S超时时间</span>   <span class="token key atrule">ConnectTimeout</span><span class="token punctuation">:</span> <span class="token number">3000</span> <span class="token comment">#连接服务的超时时间</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@EnableEurekaClient</span><span class="token keyword">public</span> <span class="token keyword">class</span> consumerApplication <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>consumerApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//首先想让RestTemplate工具可以实现轮循之类的策略需要加上 @LoadBalanced 交给ribbon托管</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@LoadBalanced</span>    <span class="token keyword">public</span> <span class="token class-name">RestTemplate</span> <span class="token function">restTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RestTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">//我们可以通过配置IRule来改变负载均衡策略，常见的有RoundRobinRule()随机，以及默认的轮循，又或是这个Wei开头的权重</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">IRule</span> <span class="token function">myrule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">WeightedResponseTimeRule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-1RestTemplate"><a href="#2-1RestTemplate" class="headerlink" title="2.1RestTemplate"></a>2.1RestTemplate</h3><p>接上文，在主配置类中定义了bean即可直接注入使用rest工具常见方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">restTemplate<span class="token punctuation">.</span><span class="token function">getForObject</span><span class="token punctuation">(</span><span class="token string">"http://服务名称（spring.application.name）/test"</span><span class="token punctuation">,</span> 返回值类型：例如<span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//平常我们访问都需要指定http://localhost:xxx/xxx来访问，为什么这里我们可以直接使用服务名称呢</span><span class="token comment">//因为在框架底层会在我们写上服务名称时，自动去获取服务名称的ip地址与端口号，所以无需我们指定</span> <span class="token class-name">ResponseEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> forEntity <span class="token operator">=</span> restTemplate<span class="token punctuation">.</span><span class="token function">getForEntity</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//这个getForEntity是获取一些接口信息的，比如服务名称之类的</span>restTemplate<span class="token punctuation">.</span><span class="token function">postForObject</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span>user<span class="token punctuation">,</span> <span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//postForObject接口传参，是JSON格式的，接口需要使用requestBody注解接收</span><span class="token comment">//那么如果想提交表单数据，不是JSON的格式的数据怎么传参？使用LinkedMultiValueMap注意是用add方法添加数据</span>        <span class="token class-name">LinkedMultiValueMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> lvmap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedMultiValueMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        lvmap<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span><span class="token string">"lfy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        lvmap<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        lvmap<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"price"</span><span class="token punctuation">,</span><span class="token number">8000D</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">User</span> u <span class="token operator">=</span> restTemplate<span class="token punctuation">.</span><span class="token function">postForObject</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span>lvmap<span class="token punctuation">,</span><span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestContrller</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> <span class="token class-name">RestTemplate</span> restTemplate<span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/test"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> s <span class="token operator">=</span> restTemplate<span class="token punctuation">.</span><span class="token function">getForObject</span><span class="token punctuation">(</span><span class="token string">"http://privode/test"</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> s<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="3-Fegin-调用提供者接口"><a href="#3-Fegin-调用提供者接口" class="headerlink" title="3.Fegin 调用提供者接口"></a>3.Fegin 调用提供者接口</h1><p>当然作为消费者也是需要和提供者一起注册Server端的，从而实现<strong>client的互相调用</strong>，Fegin是一种封装了的调用策略，底层还是ribbon</p><p>需要添加openFegin的依赖</p><p>启动类注解</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@EnableEurekaClient</span><span class="token annotation punctuation">@EnableFeignClients</span><span class="token keyword">public</span> <span class="token keyword">class</span> consumerBApplication <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>consumerBApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>写一个Fegin接口类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//添加@FeignClient("服务名称（spring.application.name）")</span><span class="token annotation punctuation">@FeignClient</span><span class="token punctuation">(</span><span class="token string">"privode"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">TestFegin</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//直接把要调用的接口把他的方法体去掉，转为抽象方法，在把地址注解写上即可</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/test"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用时就可以直接在controller调用别的服务中的接口了</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Resource</span> <span class="token keyword">private</span> <span class="token class-name">TestFegin</span> testFegin<span class="token punctuation">;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/fegintest"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//直接使用接口点方法</span>        <span class="token class-name">String</span> test <span class="token operator">=</span> testFegin<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> test<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-1传参"><a href="#2-1传参" class="headerlink" title="2.1传参"></a>2.1传参</h3><p>当Fegin调用提供者的接口时，如果传参，</p><p><strong>post请求传入对象要用@RequestBody注解 接收</strong>，<strong>单个数据需要用@RequestParams，并且使用@RequestParams注解后必须传参，如果不是必须传参可以@RequestParam(required &#x3D; false)</strong></p><p><strong>Get请求传参每个参数都要使用@RequestParams</strong></p><p>不然无法调用提供者的接口</p><p><strong>总结：调用提供者的接口传参，对象参数使用@RequestBody，单个字段参数使用@RequestParams；</strong></p><p><strong>并且不仅是在提供者的接口参数前面要写注解，在Fegin接口中参数前面也得写上</strong></p><h3 id="2-2日志"><a href="#2-2日志" class="headerlink" title="2.2日志"></a>2.2日志</h3><p>启动类中定义日志级别</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">Logger<span class="token punctuation">.</span>Level</span> <span class="token function">level</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">/** NONE:所有* BASICE：只打印请求方法路径，响应状态码和执行时间* HEADERS：* FULL：所有信息都打印* */</span>        <span class="token keyword">return</span> <span class="token class-name">Logger<span class="token punctuation">.</span>Level</span><span class="token punctuation">.</span><span class="token constant">FULL</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>去配置文件中开启日志输出</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> consumer<span class="token punctuation">-</span>B<span class="token key atrule">eureka</span><span class="token punctuation">:</span>  <span class="token key atrule">client</span><span class="token punctuation">:</span>    <span class="token key atrule">service-url</span><span class="token punctuation">:</span>      <span class="token key atrule">dufaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>8761/eureka  <span class="token key atrule">instance</span><span class="token punctuation">:</span>    <span class="token key atrule">ip-address</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">instance-id</span><span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span>spring.application.name<span class="token punctuation">&#125;</span><span class="token punctuation">:</span>$<span class="token punctuation">&#123;</span>eureka.instance.hostname<span class="token punctuation">&#125;</span><span class="token punctuation">:</span>$<span class="token punctuation">&#123;</span>server.port<span class="token punctuation">&#125;</span>    <span class="token key atrule">hostname</span><span class="token punctuation">:</span> localhost<span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8087</span><span class="token comment">#开启日志输出</span><span class="token key atrule">logging</span><span class="token punctuation">:</span>  <span class="token key atrule">level</span><span class="token punctuation">:</span>    <span class="token key atrule">com.lfy.fegin</span><span class="token punctuation">:</span> debug <span class="token comment">#包名com.lfy.fegin</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>开启日志的日志级别<ul><li>debug：只有在debug的时候能看见日志</li><li>info：打印记录日志</li><li>trace：打印跟踪日志</li><li>warn：打印警告日志</li><li>error：打印错误日志</li></ul></li></ul><h3 id="2-3Fegin性能优化，连接池配置、"><a href="#2-3Fegin性能优化，连接池配置、" class="headerlink" title="2.3Fegin性能优化，连接池配置、"></a>2.3Fegin性能优化，连接池配置、</h3><p>依赖</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.github.openfeign<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>feign-httpclient<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>配置连接池</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">feign</span><span class="token punctuation">:</span>  <span class="token key atrule">client</span><span class="token punctuation">:</span>    <span class="token key atrule">default</span><span class="token punctuation">:</span>      <span class="token key atrule">loggerLevel</span><span class="token punctuation">:</span> BASIC  <span class="token key atrule">httpclient</span><span class="token punctuation">:</span>    <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment">#开启feign对连接池的支持</span>    <span class="token key atrule">max-connections</span><span class="token punctuation">:</span> <span class="token number">200</span> <span class="token comment">#最大连接数</span>    <span class="token key atrule">max-connections-per-route</span><span class="token punctuation">:</span> 50 %每个路径的最大连接数    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-4-fegin远程调用丢失请求头"><a href="#2-4-fegin远程调用丢失请求头" class="headerlink" title="2.4 fegin远程调用丢失请求头"></a>2.4 fegin远程调用丢失请求头</h3><p>添加配置类。按自己需要同步的请求头进行获取值，填充值</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">feign<span class="token punctuation">.</span></span><span class="token class-name">RequestInterceptor</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">feign<span class="token punctuation">.</span></span><span class="token class-name">RequestTemplate</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Bean</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>context<span class="token punctuation">.</span>request<span class="token punctuation">.</span></span><span class="token class-name">RequestContextHolder</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>context<span class="token punctuation">.</span>request<span class="token punctuation">.</span></span><span class="token class-name">ServletRequestAttributes</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletRequest</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FeignConfig</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">RequestInterceptor</span> <span class="token function">requestInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RequestInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">apply</span><span class="token punctuation">(</span><span class="token class-name">RequestTemplate</span> requestTemplat<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">//获取刚进入的请求</span>                <span class="token class-name">ServletRequestAttributes</span> requestAttributes <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ServletRequestAttributes</span><span class="token punctuation">)</span> <span class="token class-name">RequestContextHolder</span><span class="token punctuation">.</span><span class="token function">getRequestAttributes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//老请求</span>                <span class="token class-name">HttpServletRequest</span> request <span class="token operator">=</span> requestAttributes<span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//同步请求头数据</span>                <span class="token class-name">String</span> header <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">"Cookie"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//给新请求同步了老请求的请求头Cookie</span>                requestTemplat<span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">"Cookie"</span><span class="token punctuation">,</span> header<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>RequestContextHolder内部使用threadlocal，单线程传输头，如果使用线程池异步会出现丢失请求头的情况</li></ul><h4 id="2-4-1）使用线程池异步丢失请求头"><a href="#2-4-1）使用线程池异步丢失请求头" class="headerlink" title="2.4.1）使用线程池异步丢失请求头"></a>2.4.1）使用线程池异步丢失请求头</h4><p>本质上因为使用的是threadlocal只能在当前线程进行传输，所以使用异步丢失请求头</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//异步外获取当前的 requestAttributes</span><span class="token class-name">RequestAttributes</span> requestAttributes <span class="token operator">=</span> <span class="token class-name">RequestContextHolder</span><span class="token punctuation">.</span><span class="token function">getRequestAttributes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//在异步逻辑中加上这段代码</span>            <span class="token class-name">RequestContextHolder</span><span class="token punctuation">.</span><span class="token function">setRequestAttributes</span><span class="token punctuation">(</span>requestAttributes<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="4-Hystrix熔断器"><a href="#4-Hystrix熔断器" class="headerlink" title="4.Hystrix熔断器"></a>4.Hystrix熔断器</h1><p><strong>依赖：</strong>openFegin依赖，Hystrix依赖</p><p>场景：比如我们有一个链式调用服务，A-&gt;B-&gt;C 此时C服务宕机了，<strong>B服务会等C服务，就这样卡着，然后这时候如果有别的用户访问B就会进不来</strong>，此时就需要熔断，（就意思把关系剪断）</p><ul><li><strong>熔断器没法完成业务，但是可以保护服务</strong></li><li><strong>因为熔断器是切断与宕机服务的调用联系，所以一般与openFegin，ribbon一起使用</strong></li></ul><pre class="line-numbers language-none"><code class="language-none">有三个状态。打开，关闭，半开，当用户调用fegin报错超过3次（默认)，就会开启断路器，并创建一个异步线程过20s把状态改为半开，用随机数取值的方式，让少量的的流量进来尝试访问，如果访问成功则关闭断路器。然后还会有一个异步线程定时清除fegin报错的次数计数。不然一年访问失败三次也会开始断路器了<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">就是调服务，然后多少秒内失败多少次，默认是3次，可以同过配置文件更改的，就会开启熔断器，开启之后会异步创建一个线程，去过20秒把断路器状态改成半开，然后让少量流量进来试探，如果服务正常了就关闭断路器<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p>依赖</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-netflix-hystrix<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>在使用Fegin的基础上</p><ul><li><p>写个.Hystrix包，然后继承Fegin的接口，带上@Component，，重写的方法中的内容，就是服务调用失败后熔断后走的内容</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ShopfeginHystrix</span> <span class="token keyword">implements</span> <span class="token class-name">Shopfegin</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">shop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"备胎方法"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>列如在Fegin的接口类中，在<strong>注解上指定fallback回调方法</strong></p></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@FeignClient</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"shop-service"</span><span class="token punctuation">,</span>fallback <span class="token operator">=</span> <span class="token class-name">ShopfeginHystrix</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Shopfegin</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/shop"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> shop <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>最后在配置类中开启熔断器</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> cusomer<span class="token punctuation">-</span>service<span class="token key atrule">eureka</span><span class="token punctuation">:</span>  <span class="token key atrule">client</span><span class="token punctuation">:</span>    <span class="token key atrule">service-url</span><span class="token punctuation">:</span>      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>8761/eureka  <span class="token key atrule">instance</span><span class="token punctuation">:</span>    <span class="token key atrule">instance-id</span><span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span>spring.application.name<span class="token punctuation">&#125;</span><span class="token punctuation">:</span>$<span class="token punctuation">&#123;</span>eureka.instance.hostname<span class="token punctuation">&#125;</span><span class="token punctuation">:</span>$<span class="token punctuation">&#123;</span>server.port<span class="token punctuation">&#125;</span>    <span class="token key atrule">ip-address</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">hostname</span><span class="token punctuation">:</span> localhost<span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">7091</span>  <span class="token comment">#开启熔断</span><span class="token key atrule">feign</span><span class="token punctuation">:</span>  <span class="token key atrule">hystrix</span><span class="token punctuation">:</span>    <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment">#cloud的F版以前，是默认开启的，现在需要手动，是因为有了微服务保护框架sen什么的，所以有选择了就自己开启</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>配置</p></li></ul><p><img src="C:\Users\吕飞扬\AppData\Roaming\Typora\typora-user-images\image-20220911012910111.png" alt="image-20220911012910111"></p><h1 id="5-admin监控"><a href="#5-admin监控" class="headerlink" title="5.admin监控"></a>5.admin监控</h1><p><strong>依赖：</strong>eureka依赖，admin依赖</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>de.codecentric<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-admin-starter-server<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>对应springcloud2.3.12版本对应admin2.3.0版本</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>java.version</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>java.version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>spring-cloud.version</span><span class="token punctuation">></span></span>Hoxton.SR12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>spring-cloud.version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>spring-boot-admin.version</span><span class="token punctuation">></span></span>2.3.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>spring-boot-admin.version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencyManagement</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$&#123;spring-cloud.version&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">></span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>import<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>de.codecentric<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-admin-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$&#123;spring-boot-admin.version&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">></span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>import<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencyManagement</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li><p>在启动类中加入注解@EnableAdminServer</p></li><li><p>把admin的springboot模块注册进eureka-server端</p></li><li><p>在yml文件中配置</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">management</span><span class="token punctuation">:</span>  <span class="token key atrule">endpoints</span><span class="token punctuation">:</span>    <span class="token key atrule">web</span><span class="token punctuation">:</span>      <span class="token key atrule">exposure</span><span class="token punctuation">:</span>        <span class="token key atrule">include</span><span class="token punctuation">:</span> <span class="token string">'*'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>打开项目网页即可</p></li></ol><h1 id="6-gateway网关"><a href="#6-gateway网关" class="headerlink" title="6.gateway网关"></a>6.gateway网关</h1><p><strong>依赖</strong>：eureka依赖（动态路由），gateway依赖</p><ol><li><p>首先加依赖时注意不要把web依赖加进来，因为gateway自带web并且和springboot-web有冲突</p></li><li><p><strong>静态路由</strong>——其次来分析yml配置文件</p><ol><li><p>​</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> gateway  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">gateway</span><span class="token punctuation">:</span>      <span class="token key atrule">routes</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> user<span class="token punctuation">-</span>service<span class="token punctuation">-</span>route          <span class="token key atrule">uri</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span><span class="token number">8086</span>          <span class="token key atrule">predicates</span><span class="token punctuation">:</span>            <span class="token punctuation">-</span> Path=/user/test<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>这里的网关配置主要是<strong>静态</strong>路由 如果这时候通过浏览器访问 <a href="http://localhost/user/test">http://localhost/user/test</a> 这个路径会自动到网关里面跑成<a href="http://localhost:8086/user/test">http://localhost:8086/user/test</a></li><li>相当于一个拼接，用户访问时就可以不用输入端口号了</li></ul></li></ol></li></ol><h3 id="6-1动态路由"><a href="#6-1动态路由" class="headerlink" title="6.1动态路由"></a>6.1动态路由</h3><p>动态路由就是在静态路由的基础上，把gateway网关也注册进eureka-server端</p><p>开启动态路由</p><p>把uri改成 lb:&#x2F;&#x2F;服务名称</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> gateway  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">gateway</span><span class="token punctuation">:</span>      <span class="token key atrule">routes</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> user<span class="token punctuation">-</span>service<span class="token punctuation">-</span>route<span class="token comment">#          uri: http://localhost:8086</span>          <span class="token key atrule">uri</span><span class="token punctuation">:</span> lb<span class="token punctuation">:</span>//user<span class="token punctuation">-</span>service <span class="token comment">#lb://服务名称</span>          <span class="token key atrule">predicates</span><span class="token punctuation">:</span>            <span class="token punctuation">-</span> Path=/user/test      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>        <span class="token key atrule">locator</span><span class="token punctuation">:</span>          <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment">#开启动态路由</span>          <span class="token key atrule">lower-case-service-id</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment">#开启服务名称小写</span><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">80</span><span class="token key atrule">eureka</span><span class="token punctuation">:</span>  <span class="token key atrule">client</span><span class="token punctuation">:</span>    <span class="token key atrule">service-url</span><span class="token punctuation">:</span>      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>8761/eureka  <span class="token key atrule">instance</span><span class="token punctuation">:</span>    <span class="token key atrule">hostname</span><span class="token punctuation">:</span> localhost    <span class="token key atrule">ip-address</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">instance-id</span><span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span>spring.application.name<span class="token punctuation">&#125;</span><span class="token punctuation">:</span>$<span class="token punctuation">&#123;</span>eureka.instance.hostname<span class="token punctuation">&#125;</span><span class="token punctuation">:</span>$<span class="token punctuation">&#123;</span>server.port<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>动态路由有什么用呢？<ul><li>我们访问地址时可以通过http:&#x2F;&#x2F;服务名称&#x2F;接口路径 访问路由<ul><li>通过lb(负载均衡) 服务名称，会自动获取服务名称的域名和端口号，在把后面的请求路径拼接上去，形成一个完整的路径</li></ul></li><li>也就是<a href="http://localhost/user-service/user/test%E8%BF%99%E6%A0%B7%E8%AE%BF%E9%97%AE%EF%BC%8C%E5%B9%B6%E4%B8%94%E4%B9%9F%E5%8F%AF%E4%BB%A5%E9%80%9A%E8%BF%87%E5%8E%9F%E6%9D%A5%E7%9A%84http://localhost/user/test%E8%AE%BF%E9%97%AE">http://localhost/user-service/user/test这样访问，并且也可以通过原来的http://localhost/user/test访问</a></li><li>我们在动态路由下面可以配置一些断言信息，比如说在什么时间之前，无法通过路由访问接口，或者必须带上一个指定参数访问路由才会转发到接口。</li></ul></li></ul><h3 id="6-2全局过滤器"><a href="#6-2全局过滤器" class="headerlink" title="6.2全局过滤器"></a>6.2全局过滤器</h3><ol><li>在gateway模块中定义一个filter类实现 GlobalFilter接口</li><li>把类加入spring的ioc容器</li></ol><p>模拟拦截黑名单用户访问网关代码</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GateWayFilter</span> <span class="token keyword">implements</span> <span class="token class-name">GlobalFilter</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> ips <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">></span></span> <span class="token function">filter</span><span class="token punctuation">(</span><span class="token class-name">ServerWebExchange</span> exchange<span class="token punctuation">,</span> <span class="token class-name">GatewayFilterChain</span> chain<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ServerHttpRequest</span> request <span class="token operator">=</span> exchange<span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token class-name">String</span> ip <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getHost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> headers <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAccessControlAllowHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ServerHttpResponse</span> response <span class="token operator">=</span> exchange<span class="token punctuation">.</span><span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">getHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"content-type"</span><span class="token punctuation">,</span><span class="token string">"application/json"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>ips<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>ip<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">ObjectMapper</span> mapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span><span class="token string">"你是黑名单用户"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"code"</span><span class="token punctuation">,</span><span class="token string">"438"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes<span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                 bytes <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">writeValueAsBytes</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">JsonProcessingException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">DataBuffer</span> wrap <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">bufferFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">wrap</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">return</span> response<span class="token punctuation">.</span><span class="token function">writeWith</span><span class="token punctuation">(</span><span class="token class-name">Mono</span><span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span>wrap<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> chain<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>exchange<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>这个resp和平常springweb中的resp返回JSON的方式有些不一样</p><ul><li><p>​    </p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//第一步 获取resp并且把请求头改成json</span><span class="token class-name">ServerHttpResponse</span> response <span class="token operator">=</span> exchange<span class="token punctuation">.</span><span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> response<span class="token punctuation">.</span><span class="token function">getHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"content-type"</span><span class="token punctuation">,</span><span class="token string">"application/json"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//第二步 ObjectMapper类中的writeValueAsBytes把想返回的数据转为bytes数组</span>  <span class="token class-name">ObjectMapper</span> mapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes<span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                 bytes <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">writeValueAsBytes</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">JsonProcessingException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token comment">//第三步 创建一个buffer工厂使用wrap方法传入数组</span>          <span class="token class-name">DataBuffer</span> wrap <span class="token operator">=</span>response<span class="token punctuation">.</span><span class="token function">bufferFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">wrap</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//第四部返回数据</span>  <span class="token keyword">return</span> response<span class="token punctuation">.</span><span class="token function">writeWith</span><span class="token punctuation">(</span><span class="token class-name">Mono</span><span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span>wrap<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><h3 id="6-4断言工厂"><a href="#6-4断言工厂" class="headerlink" title="6.4断言工厂"></a>6.4断言工厂</h3><p>我们在配置文件中写的断言规则只是字符串，这些字符串会被Predicate Factory读取并处理，转变为路由判断的条件</p><p>例如Path&#x3D;&#x2F;user&#x2F;**是按照路径匹配，这个规则是由</p><p><code>org.springframework.cloud.gateway.handler.predicate.PathRoutePredicateFactory</code>类来</p><p>处理的，像这样的断言工厂在SpringCloudGateway还有十几个:</p><table><thead><tr><th><strong>名称</strong></th><th><strong>说明</strong></th><th><strong>示例</strong></th></tr></thead><tbody><tr><td>After</td><td>是某个时间点后的请求</td><td>-  After&#x3D;2037-01-20T17:42:47.789-07:00[America&#x2F;Denver]</td></tr><tr><td>Before</td><td>是某个时间点之前的请求</td><td>-  Before&#x3D;2031-04-13T15:14:47.433+08:00[Asia&#x2F;Shanghai]</td></tr><tr><td>Between</td><td>是某两个时间点之前的请求</td><td>-  Between&#x3D;2037-01-20T17:42:47.789-07:00[America&#x2F;Denver],  2037-01-21T17:42:47.789-07:00[America&#x2F;Denver]</td></tr><tr><td>Cookie</td><td>请求必须包含某些cookie</td><td>- Cookie&#x3D;chocolate, ch.p</td></tr><tr><td>Header</td><td>请求必须包含某些header</td><td>- Header&#x3D;X-Request-Id, \d+</td></tr><tr><td>Host</td><td>请求必须是访问某个host（域名）</td><td>-  Host&#x3D;<strong>.somehost.org,</strong>.anotherhost.org</td></tr><tr><td>Method</td><td>请求方式必须是指定方式</td><td>- Method&#x3D;GET,POST</td></tr><tr><td>Path</td><td>请求路径必须符合指定规则</td><td>- Path&#x3D;&#x2F;red&#x2F;{segment},&#x2F;blue&#x2F;**</td></tr><tr><td>Query</td><td>请求参数必须包含指定参数</td><td>- Query&#x3D;name, Jack或者-  Query&#x3D;name</td></tr><tr><td>RemoteAddr</td><td>请求者的ip必须是指定范围</td><td>- RemoteAddr&#x3D;192.168.1.1&#x2F;24</td></tr><tr><td>Weight</td><td>权重处理</td><td></td></tr></tbody></table><p>我们只需要掌握Path这种路由工程就可以了。</p><h3 id="6-3跨域"><a href="#6-3跨域" class="headerlink" title="6.3跨域"></a>6.3跨域</h3><p>yml文件型</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">gateway</span><span class="token punctuation">:</span>      <span class="token key atrule">globalcors</span><span class="token punctuation">:</span> <span class="token comment"># 全局的跨域处理</span>        <span class="token key atrule">add-to-simple-url-handler-mapping</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 因为ajax发起者会通过options请求来向服务器询问是否允许跨域，所以需要设置为true来解决options请求被拦截问题</span>        <span class="token key atrule">corsConfigurations</span><span class="token punctuation">:</span>          <span class="token key atrule">'[/**]'</span><span class="token punctuation">:</span>            <span class="token key atrule">allowedOrigins</span><span class="token punctuation">:</span> <span class="token comment"># 允许哪些网站的跨域请求 </span>              <span class="token punctuation">-</span> <span class="token string">"http://localhost:8090"</span>            <span class="token key atrule">allowedMethods</span><span class="token punctuation">:</span> <span class="token comment"># 允许的跨域ajax的请求方式</span>              <span class="token punctuation">-</span> <span class="token string">"GET"</span>              <span class="token punctuation">-</span> <span class="token string">"POST"</span>              <span class="token punctuation">-</span> <span class="token string">"DELETE"</span>              <span class="token punctuation">-</span> <span class="token string">"PUT"</span>              <span class="token punctuation">-</span> <span class="token string">"OPTIONS"</span>            <span class="token key atrule">allowedHeaders</span><span class="token punctuation">:</span> <span class="token string">"*"</span> <span class="token comment"># 允许在请求中携带的头信息</span>            <span class="token key atrule">allowCredentials</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 是否允许携带cookie</span>            <span class="token key atrule">maxAge</span><span class="token punctuation">:</span> <span class="token number">360000</span> <span class="token comment"># 这次跨域检测的有效期，即一定时间内就不需要重复询问是否允许跨域了，直接请求即可。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Nacos"><a href="#Nacos" class="headerlink" title="Nacos"></a>Nacos</h1><h1 id="1-安装与配置"><a href="#1-安装与配置" class="headerlink" title="1.安装与配置"></a>1.安装与配置</h1><ol><li>打开nacos文件下的conf 找到spring配置文件，把mysql数据库的注释放开（33,36,39-41行），40和41改数据库账号</li><li>打开startup.cmd文件编辑，把set MODE&#x3D;改成”standalone”<ol><li>因为默认是集群</li></ol></li><li>打开数据库把nacos中的sql文件，nacos.sql建立个表nacos导入</li><li>启动</li></ol><h3 id="1-1Eureka和nacos的区别"><a href="#1-1Eureka和nacos的区别" class="headerlink" title="1.1Eureka和nacos的区别"></a>1.1Eureka和nacos的区别</h3><ul><li>服务隔离性<ul><li>eureka的server端部署多个项目时，如果有服务名称相同的情况，eureka的server端区分不了来自哪个项目的服务，负载均衡时可能会把其他项目中相同名字服务进行调用</li><li>nacos有命名空间，如果命名空间不同，负载均衡是不会调用的，而且细分到了组，不是一个组的服务，哪怕名字相同，也不会进行调用</li></ul></li></ul><h3 id="1-2版本对应关系"><a href="#1-2版本对应关系" class="headerlink" title="1.2版本对应关系"></a>1.2版本对应关系</h3><p><img src="C:\Users\吕飞扬\Desktop\cloud-Nacos\assets\image-20220917151413870.png" alt="image-20220917151413870"></p><p><img src="C:\Users\吕飞扬\Desktop\cloud-Nacos\assets\image-20220917151326361.png" alt="image-20220917151326361"></p><h1 id="2-yml文件配置详解"><a href="#2-yml文件配置详解" class="headerlink" title="2.yml文件配置详解"></a>2.yml文件配置详解</h1><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> nacos<span class="token punctuation">-</span>clent<span class="token punctuation">-</span>a <span class="token comment">#服务名称</span>  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>      <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> 192.168.139.1<span class="token punctuation">:</span><span class="token number">8848</span> <span class="token comment">#server端地址</span>      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>        <span class="token key atrule">group</span><span class="token punctuation">:</span> a<span class="token punctuation">-</span>client <span class="token comment">#组名称</span>        <span class="token key atrule">namespace</span><span class="token punctuation">:</span> c9894011<span class="token punctuation">-</span>499b<span class="token punctuation">-</span>469d<span class="token punctuation">-</span>9676<span class="token punctuation">-</span>a465aae7bd62 <span class="token comment">#命名空间id</span><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8081</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="C:\Users\吕飞扬\Desktop\cloud-Nacos\assets\image-20220917150434842.png" alt="image-20220917150434842"></p><p><img src="C:\Users\吕飞扬\Desktop\cloud-Nacos\assets\image-20220917210223974.png" alt="image-20220917210223974"></p><h3 id="2-1server端集群windos版本"><a href="#2-1server端集群windos版本" class="headerlink" title="2.1server端集群windos版本"></a>2.1server端集群windos版本</h3><p><img src="C:\Users\吕飞扬\Desktop\cloud-Nacos\assets\image-20220917210341641.png" alt="image-20220917210341641"></p><p>复制三份nacos，默认集群启动，如果被设置成单机启动，需要用编辑器打开startup.cmd进行更改，然后打开application.propies文件把数据库配置好</p><p>最后在conf目录中找到<img src="C:\Users\吕飞扬\AppData\Roaming\Typora\typora-user-images\image-20220917210534789.png" alt="image-20220917210534789"></p><p>复制一份把example去掉，打开之后在写入nacos的ip与端口号，在把这三个nacos一一启动即可</p><h1 id="3-入门nacos"><a href="#3-入门nacos" class="headerlink" title="3.入门nacos"></a>3.入门nacos</h1><p>nacos不需要像eureka一样写一个server端，它的文件即是一个server端</p><p>创建client时,只需要配置server端的ip和端口号即可</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> nacos<span class="token punctuation">-</span>clent<span class="token punctuation">-</span>a <span class="token comment">#服务名称</span>  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>      <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> 192.168.139.1<span class="token punctuation">:</span><span class="token number">8848</span> <span class="token comment">#server端地址</span>      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>        <span class="token key atrule">group</span><span class="token punctuation">:</span> a<span class="token punctuation">-</span>client <span class="token comment">#组名称</span>        <span class="token key atrule">namespace</span><span class="token punctuation">:</span> c9894011<span class="token punctuation">-</span>499b<span class="token punctuation">-</span>469d<span class="token punctuation">-</span>9676<span class="token punctuation">-</span>a465aae7bd62 <span class="token comment">#命名空间id</span>server<span class="token punctuation">:</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>命名空间一定要写，因为不同的命名空间的服务将完全隔离，调用不了</li></ul><p><strong>启动类注解不再是eureka的客户端注解，是nacos的@EnableDiscoveryClient</strong></p><h2 id="3-1集成openFegin与gateway"><a href="#3-1集成openFegin与gateway" class="headerlink" title="3.1集成openFegin与gateway"></a>3.1集成openFegin与gateway</h2><ul><li><p>openFegin</p><ul><li><p>和eureka一样</p></li><li><p>加入依赖</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-openfeign<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在启动类中加入注解@EnableFeignClients</p></li><li><p>创建Fegin类接口，接口上需要使用@FeignClient（“服务名称”）注解</p><pre class="line-numbers language-none"><code class="language-none">@FeignClient(&quot;nacos-clent-a&quot;)public interface Testfegin &#123;    @GetMapping(&quot;&#x2F;go&quot;)    public String test();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>如果是分布式项目，抽取出去的fengin类，不需要是一个springboot项目，只需要是maven就行，加依赖，写@FeignClient注解的接口即可，而调用者需要加依赖并在启动类中添加</strong>@EnableFeignClients</p></li></ul></li><li><p>gateway</p><ul><li><p>加依赖，选择eureka一样的gateway依赖即可，<strong>注意不能加web依赖，因为会覆盖了gateway的web</strong></p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> gatewayA  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>      <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> localhost<span class="token punctuation">:</span><span class="token number">8848</span>      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>        <span class="token key atrule">username</span><span class="token punctuation">:</span> nacos        <span class="token key atrule">password</span><span class="token punctuation">:</span> nacos        <span class="token key atrule">namespace</span><span class="token punctuation">:</span> c9894011<span class="token punctuation">-</span>499b<span class="token punctuation">-</span>469d<span class="token punctuation">-</span>9676<span class="token punctuation">-</span>a465aae7bd62        <span class="token key atrule">group</span><span class="token punctuation">:</span> a<span class="token punctuation">-</span>client    <span class="token key atrule">gateway</span><span class="token punctuation">:</span>      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>        <span class="token key atrule">locator</span><span class="token punctuation">:</span>          <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment">#开启动态路由</span>          <span class="token key atrule">lower-case-service-id</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment">#开启服务名称小写</span>      <span class="token key atrule">routes</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> nacos<span class="token punctuation">-</span>client<span class="token punctuation">-</span>b <span class="token comment">#服务名称</span>          <span class="token comment">#          uri: http://localhost:8086</span>          <span class="token key atrule">uri</span><span class="token punctuation">:</span> lb<span class="token punctuation">:</span>//nacos<span class="token punctuation">-</span>client<span class="token punctuation">-</span>b          <span class="token key atrule">predicates</span><span class="token punctuation">:</span>            <span class="token punctuation">-</span> Path=/g<span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">80</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><p>和普通的nacos的client端一样，在加上配置以下动态路由即可，详情可以看之前写的eureka的笔记</p><h3 id="3-2-1fengin包名不一致问题"><a href="#3-2-1fengin包名不一致问题" class="headerlink" title="3.2.1fengin包名不一致问题"></a>3.2.1fengin包名不一致问题</h3><p>因为抽取出去的Fegin不是一个springboot项目，所以如果包名和具有Fegin客户端注解的服务中的包名不同，则无法创建bean对象</p><p><strong>所以最好统一包名</strong></p><ul><li><p>如果不统一也有三种解决办法</p><ul><li><p>第一种（不推荐）：更改springboot的包扫描范围</p></li><li><p>第二种：指定FeignCLient所在包</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@EnableFeignClients</span><span class="token punctuation">(</span>basePackages <span class="token operator">=</span> <span class="token string">"com.lfy.fegin"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>第三种：指定FeginClient字节码(类名.class)</p><pre class="line-numbers language-none"><code class="language-none">@EnableFeignClients(clients&#x3D;&#123;userFegin.class&#125;)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li></ul><h3 id="3-2-2Fegin性能优化，连接池配置、"><a href="#3-2-2Fegin性能优化，连接池配置、" class="headerlink" title="3.2.2Fegin性能优化，连接池配置、"></a>3.2.2Fegin性能优化，连接池配置、</h3><p>依赖</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.github.openfeign<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>feign-httpclient<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>配置连接池</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">feign</span><span class="token punctuation">:</span>  <span class="token key atrule">client</span><span class="token punctuation">:</span>    <span class="token key atrule">default</span><span class="token punctuation">:</span>      <span class="token key atrule">loggerLevel</span><span class="token punctuation">:</span> BASIC  <span class="token key atrule">httpclient</span><span class="token punctuation">:</span>    <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment">#开启feign对连接池的支持</span>    <span class="token key atrule">max-connections</span><span class="token punctuation">:</span> <span class="token number">200</span> <span class="token comment">#最大连接数</span>    <span class="token key atrule">max-connections-per-route</span><span class="token punctuation">:</span> 50 %每个路径的最大连接数    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-3-fegin远程调用丢失请求头"><a href="#3-3-fegin远程调用丢失请求头" class="headerlink" title="3.3 fegin远程调用丢失请求头"></a>3.3 fegin远程调用丢失请求头</h3><p>添加配置类。按自己需要同步的请求头进行获取值，填充值</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">feign<span class="token punctuation">.</span></span><span class="token class-name">RequestInterceptor</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">feign<span class="token punctuation">.</span></span><span class="token class-name">RequestTemplate</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Bean</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>context<span class="token punctuation">.</span>request<span class="token punctuation">.</span></span><span class="token class-name">RequestContextHolder</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>context<span class="token punctuation">.</span>request<span class="token punctuation">.</span></span><span class="token class-name">ServletRequestAttributes</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletRequest</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FeignConfig</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">RequestInterceptor</span> <span class="token function">requestInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RequestInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">apply</span><span class="token punctuation">(</span><span class="token class-name">RequestTemplate</span> requestTemplat<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">//获取刚进入的请求</span>                <span class="token class-name">ServletRequestAttributes</span> requestAttributes <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ServletRequestAttributes</span><span class="token punctuation">)</span> <span class="token class-name">RequestContextHolder</span><span class="token punctuation">.</span><span class="token function">getRequestAttributes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//老请求</span>                <span class="token class-name">HttpServletRequest</span> request <span class="token operator">=</span> requestAttributes<span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//同步请求头数据</span>                <span class="token class-name">String</span> header <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">"Cookie"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//给新请求同步了老请求的请求头Cookie</span>                requestTemplat<span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">"Cookie"</span><span class="token punctuation">,</span> header<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>RequestContextHolder内部使用threadlocal，单线程传输头，如果使用线程池异步会出现丢失请求头的情况</li></ul><h4 id="2-4-1）使用线程池异步丢失请求头-1"><a href="#2-4-1）使用线程池异步丢失请求头-1" class="headerlink" title="2.4.1）使用线程池异步丢失请求头"></a>2.4.1）使用线程池异步丢失请求头</h4><p>本质上因为使用的是threadlocal只能在当前线程进行传输，所以使用异步丢失请求头</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//异步外获取当前的 requestAttributes</span><span class="token class-name">RequestAttributes</span> requestAttributes <span class="token operator">=</span> <span class="token class-name">RequestContextHolder</span><span class="token punctuation">.</span><span class="token function">getRequestAttributes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//在异步逻辑中加上这段代码</span>            <span class="token class-name">RequestContextHolder</span><span class="token punctuation">.</span><span class="token function">setRequestAttributes</span><span class="token punctuation">(</span>requestAttributes<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-2服务列表集群"><a href="#3-2服务列表集群" class="headerlink" title="3.2服务列表集群"></a>3.2服务列表集群</h2><p>和eureka一样，把<strong>两个相同的服务名称</strong>更改端口后注册进nacos的server端即可成为服务集群</p><p><strong>但是有一点不同：</strong></p><ul><li><p>nacos的服务集群可以指定是哪个集群，他可以有多个集群分类，比如杭州集群、上海集群这种自定义集群名称</p></li><li><p><strong>如果不指定集群的话都会自动加入default的集群组</strong></p></li><li><p>在yml文件中指定</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> comsuer<span class="token punctuation">-</span>service  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>        <span class="token key atrule">namespace</span><span class="token punctuation">:</span> 45e839e9<span class="token punctuation">-</span>904a<span class="token punctuation">-</span>41aa<span class="token punctuation">-</span>bbdb<span class="token punctuation">-</span>a35fecbec674        <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> localhost<span class="token punctuation">:</span><span class="token number">8848</span> <span class="token comment">#nacos 的server端地址</span>        <span class="token key atrule">cluster-name</span><span class="token punctuation">:</span> 福建 <span class="token comment">#集群名</span><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">7002</span><span class="token key atrule">feign</span><span class="token punctuation">:</span>  <span class="token key atrule">hystrix</span><span class="token punctuation">:</span>    <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment">#熔断开启</span><span class="token key atrule">regist-service</span><span class="token punctuation">:</span> <span class="token comment">#服务名称</span>  <span class="token key atrule">ribbon</span><span class="token punctuation">:</span>    <span class="token key atrule">NFLoadBalancerRuleClassName</span><span class="token punctuation">:</span> com.alibaba.cloud.nacos.ribbon.NacosRule <span class="token comment">#优先访问相同集群名称的服务</span>                <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="3-2-1优先访问同集群分组的服务"><a href="#3-2-1优先访问同集群分组的服务" class="headerlink" title="3.2.1优先访问同集群分组的服务"></a>3.2.1优先访问同集群分组的服务</h3><p>上面提到nacos可以设置集群的分组，同一个集群组可以优先访问（<strong>比如现在有杭州和上海的集群，当同是杭州的消费者调用提供者时，会优先调用杭州的提供者，如果杭州的提供者服务挂了，在访问上海的提供者</strong>），只需要改一下负载均衡的配置为NacosRule</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">regist-service</span><span class="token punctuation">:</span> <span class="token comment">#服务名称</span>  <span class="token key atrule">ribbon</span><span class="token punctuation">:</span>    <span class="token key atrule">NFLoadBalancerRuleClassName</span><span class="token punctuation">:</span> com.alibaba.cloud.nacos.ribbon.NacosRule<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h1 id="4-热部署yml文件"><a href="#4-热部署yml文件" class="headerlink" title="4.热部署yml文件"></a>4.热部署yml文件</h1><p>在项目上线时，如果需要更改yml文件，需要把项目下线，重新打包发布，如果有多个拒载均衡的服务，则非常的麻烦，而<strong>nacos中可以动态的修改yml文件</strong></p><ul><li><p>创建bootstrap.yml</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> nacos<span class="token punctuation">-</span>client<span class="token punctuation">-</span>b  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>      <span class="token key atrule">config</span><span class="token punctuation">:</span>        <span class="token key atrule">username</span><span class="token punctuation">:</span> nacos <span class="token comment">#账号</span>        <span class="token key atrule">password</span><span class="token punctuation">:</span> nacos <span class="token comment">#密码</span>        <span class="token key atrule">file-extension</span><span class="token punctuation">:</span> yml <span class="token comment">#文件格式，默认propties</span>        <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> localhost<span class="token punctuation">:</span><span class="token number">8848</span> <span class="token comment">#nacos的server端地址</span>        <span class="token key atrule">prefix</span><span class="token punctuation">:</span> nacos<span class="token punctuation">-</span>client<span class="token punctuation">-</span>b <span class="token comment">#文件名、</span>        <span class="token key atrule">namespace</span><span class="token punctuation">:</span>  <span class="token comment">#命名空间</span>        <span class="token key atrule">group</span><span class="token punctuation">:</span> <span class="token comment">#组</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>当项目初始化时，回去server端地址，找文件</li><li>因为server端的配置文件也是有组和命名空间的，别忘了</li></ul></li><li><p>在类上添加@RefreshScope注解，当nacos中更新配置文件，服务可以实时接收到</p></li><li><p>在使用时使用@value(“${key}”)即可</p></li></ul><h3 id="4-1共享文件和active"><a href="#4-1共享文件和active" class="headerlink" title="4.1共享文件和active"></a>4.1共享文件和active</h3><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> nacos<span class="token punctuation">-</span>client<span class="token punctuation">-</span>b  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>      <span class="token key atrule">config</span><span class="token punctuation">:</span>        <span class="token key atrule">username</span><span class="token punctuation">:</span> nacos <span class="token comment">#账号</span>        <span class="token key atrule">password</span><span class="token punctuation">:</span> nacos <span class="token comment">#密码</span>        <span class="token key atrule">file-extension</span><span class="token punctuation">:</span> yml <span class="token comment">#文件解析格式，默认propties</span>        <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> localhost<span class="token punctuation">:</span><span class="token number">8848</span> <span class="token comment">#nacos的server端地址</span>        <span class="token key atrule">prefix</span><span class="token punctuation">:</span> nacos<span class="token punctuation">-</span>client<span class="token punctuation">-</span>b <span class="token comment">#文件名</span>        <span class="token key atrule">shared-configs</span><span class="token punctuation">:</span>  <span class="token comment">#读取共享配置</span>          <span class="token punctuation">-</span> <span class="token key atrule">dataId</span><span class="token punctuation">:</span> application<span class="token punctuation">-</span>dev.yml            <span class="token key atrule">group</span><span class="token punctuation">:</span> a_group <span class="token comment">#分组，不写默认为default</span>            <span class="token key atrule">refresh</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment">#开启热部署</span>  <span class="token key atrule">profiles</span><span class="token punctuation">:</span>    <span class="token key atrule">active</span><span class="token punctuation">:</span> dev<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>shared-configs可以读取共享的配置，就是读取多个配置文件，</p></li><li><p><strong>然后这里有个坑，如果加了文件后缀profiles: active</strong>则在nacos的文件一定要加上.yml后缀格式<img src="C:\Users\吕飞扬\Desktop\cloud-Nacos\assets\image-20220918165506397.png" alt="image-20220918165506397"></p></li><li><p><strong>他的原理是（重点，很坑）</strong></p><pre class="line-numbers language-none"><code class="language-none">$&#123;spring.cloud.nacos.config.prefix&#125;-$&#123;spring.profiles.active&#125;.$&#123;spring.cloud.nacos.config.file-extension&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>如果说你没有写active会默认去掉 <strong>-</strong> 这个符号， 也不会在后面加**.yml** 所以写了active一定要在文件后面加上.yml</li><li>如果没写active，比如就写了文件名和文件解析格式，他就会只找文件名匹配的，不会去加后缀之类的，这时候我们在nacos的文件中就可以不写.yml</li></ul></li></ul><p><strong>acticve</strong></p><p>用来配置当前环境，比如上述代码中，会默认读取nacos-client-b.yml（<strong>后缀yml不写也行</strong>）文件，如果加上active属性，则还会读取nacos-client-b-dev.yml文件（<strong>配置文件必须写后缀yml</strong>）</p><p> shared-configs则是用来读取共享的文件</p><p><strong>快捷配置的局限性</strong>shared-dataids</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>      <span class="token key atrule">config</span><span class="token punctuation">:</span>        <span class="token key atrule">file-extension</span><span class="token punctuation">:</span> yml        <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> localhost<span class="token punctuation">:</span><span class="token number">8848</span>        <span class="token key atrule">shared-dataids</span><span class="token punctuation">:</span> t.yml<span class="token punctuation">,</span>test.yml <span class="token comment">#读取的文件列表</span>        <span class="token key atrule">namespace</span><span class="token punctuation">:</span> gulismall        <span class="token key atrule">refreshable-dataids</span><span class="token punctuation">:</span> t.yml<span class="token punctuation">,</span>test.yml <span class="token comment">#哪些文件可以热更新</span>                //采用默认配置，直接读取多个文件，会根据命名空间自动匹配，虽然配置更简单，但是没法读取来自不同组的多个文件，不能单个进行定制化配置，有一定局限性，已经弃用。一般使用最新的shared<span class="token punctuation">-</span>config<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-2文件优先级"><a href="#4-2文件优先级" class="headerlink" title="4.2文件优先级"></a>4.2文件优先级</h3><p>带服务环境的文件 –&gt;不带服务环境的文件–&gt;本地application.yml</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 分布式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java线程池</title>
      <link href="/2022/09/01/xian-cheng-chi-pei-zhi/"/>
      <url>/2022/09/01/xian-cheng-chi-pei-zhi/</url>
      
        <content type="html"><![CDATA[<h1 id="1-JDK自带的ThreadPoolExecutor线程池七大参数"><a href="#1-JDK自带的ThreadPoolExecutor线程池七大参数" class="headerlink" title="1.JDK自带的ThreadPoolExecutor线程池七大参数"></a>1.JDK自带的ThreadPoolExecutor线程池七大参数</h1><p><strong>corePoolSize</strong>：核心线程数（一直存在，除非allowCoreThreadTimeOut）线程池创建号以后就准备就绪的线程</p><p><strong>maxmumPoolSize</strong>：最大线程数，控制资源</p><p><strong>keepAliveTime</strong>：存活时间，如果当前线程数大于核心线程数，将会对空闲的线程进行回收（核心线程一直存在，不回收）</p><p><strong>unit</strong>：时间单位</p><p><strong>BlockingQueue<Runbable> workQueue</strong>：阻塞队列。如果任务有很多，就会将多的任务放进队列里面，只要有线程空闲，就会去队列里面取出新的任务进行执行</p><p><strong>threadFactory</strong>：线程的创建工厂</p><p><strong>RejectedExecutionHandler handler</strong>：如果队列满了，按照指定的拒绝策略执行任务</p><h4 id="1-1）4种拒绝策略"><a href="#1-1）4种拒绝策略" class="headerlink" title="1.1）4种拒绝策略"></a>1.1）4种拒绝策略</h4><ul><li><strong>AbortPolicy</strong> - <strong>抛出异常，中止任务</strong>。抛出拒绝执行 RejectedExecutionException 异常信息。线程池默认的拒绝策略。必须处理好抛出的异常，否则会打断当前的执行流程，影响后续的任务执行</li><li><strong>CallerRunsPolicy</strong> - <strong>使用调用者线程执行任务</strong>。当触发拒绝策略，只要线程池没有关闭的话，则使用调用者线程直接运行任务。一般并发比较小，性能要求不高，不允许失败。但是，由于调用者自己运行任务，如果任务提交速度过快，可能导致程序阻塞，性能效率上必然的损失较大</li><li><strong>DiscardPolicy</strong> - <strong>直接丢弃，其他啥都没有</strong></li><li><strong>DiscardOldestPolicy</strong> - <strong>丢弃队列最老任务</strong>，添加新任务。当触发拒绝策略，只要线程池没有关闭的话，丢弃阻塞队列 workQueue 中最老的一个任务，并将新任务加入</li></ul><h4 id="1-2）3种常用队列"><a href="#1-2）3种常用队列" class="headerlink" title="1.2）3种常用队列"></a>1.2）3种常用队列</h4><ul><li><p><strong>直接提交队列</strong>：设置为<strong>SynchronousQueue</strong>队列，SynchronousQueue是一个特殊的BlockingQueue，它没有容量，每执行一个插入操作就会阻塞。</p><ul><li>提交的任务会被马上执行，并且执行完后当前线程阻塞，不会复用，所以当创建的线程数大于maximumPoolSize时，直接执行了拒绝策略。</li></ul></li><li><p><strong>有界的任务队列</strong>：设置为<strong>ArrayBlockingQueue<Runnable>(队列数)</strong> 队列</p><ul><li>若有新的任务需要执行时，线程池会创建新的线程，直到创建的线程数量达到核心线程数（corePoolSize）时，会将新的任务加入到等待队列中。若等待队列已满，即超过ArrayBlockingQueue初始化的容量，则继续创建线程，直到线程数量达到最大线程数（maximumPoolSize）设置的数量，若还有任务进入，则执行拒绝策略。</li></ul></li><li><p><strong>无界的任务队列</strong>：设置为<strong>LinkedBlockingQueue</strong>队列</p><ul><li>线程池的任务队列可以无限制添加新任务，而线程池创建的最大线程数就是<strong>核心线程数(corePoolSize)设置的数量</strong>，这种情况下<strong>maximumPoolSize设置的值是不会生效的</strong>，就算等待队列中有许多未执行的任务，线程池的数量达到了corePoolSize的值后也<strong>不会增加</strong>新的线程。</li></ul></li></ul><h1 id="2-运行流程"><a href="#2-运行流程" class="headerlink" title="2.运行流程"></a>2.运行流程</h1><ol><li>线程池创建，准备core数量的核心线程，准备接收任务</li><li>新的任务进来，用core准备好的空闲线程执行<ol><li>core满了，将多的任务放入阻塞队列中</li><li>阻塞队列满了，直接开启新的线程执行，但数量不超过指定的最大线程数<ul><li>如果执行完毕，空闲线程会在keepAliveTIme指定的时间销毁，最终保持到只剩core（核心线程数）大小</li><li>如果线程数开到了指定的最大线程数，还有新的任务进入，就会使用指定的RejectedExecutionHandler （拒绝策略）进行处理</li></ul></li></ol></li><li>所有的线程都是由指定的factory创建的</li></ol><p><strong>问：一个线程池 core 7 、max 20、queue 50、100并发进来如何分配</strong></p><p><strong>答：先有7个能直接被执行，然后50个进入阻塞队列，在多开13个线程执行，剩下30个执行拒绝策略</strong></p><h1 id="3-CompletableFuture异步编排"><a href="#3-CompletableFuture异步编排" class="headerlink" title="3.CompletableFuture异步编排"></a>3.CompletableFuture异步编排</h1><h3 id="3-1）whenComplete-感知异常，exceptionally-处理异常"><a href="#3-1）whenComplete-感知异常，exceptionally-处理异常" class="headerlink" title="3.1）whenComplete()感知异常，exceptionally()处理异常"></a>3.1）whenComplete()感知异常，exceptionally()处理异常</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">ThreadPoolExecutor</span> executor <span class="token operator">=</span>  <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span>            <span class="token number">20</span><span class="token punctuation">,</span>            <span class="token number">60</span><span class="token punctuation">,</span>            <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">,</span>            <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor<span class="token punctuation">.</span>DiscardPolicy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ExecutionException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span>  future <span class="token operator">=</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"当前线程"</span><span class="token operator">+</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">10</span><span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> i<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>executor<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">whenComplete</span><span class="token punctuation">(</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span>exception<span class="token punctuation">)</span><span class="token operator">-></span><span class="token punctuation">&#123;</span>            <span class="token comment">//whenComplete可以感知异常但没法处理</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"异步线程执行完毕，结果是"</span><span class="token operator">+</span>res<span class="token operator">+</span><span class="token string">"异常是"</span><span class="token operator">+</span>exception<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exceptionally</span><span class="token punctuation">(</span>throwable <span class="token operator">-></span> <span class="token punctuation">&#123;</span>              <span class="token comment">//exceptionally 出现异常时执行此方法</span>               <span class="token keyword">return</span> <span class="token number">10</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"结果"</span><span class="token operator">+</span>future<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>whenComplete：<ul><li>参数：结果，异常</li><li>可以感知异常，但是没法处理异常</li></ul></li><li>exceptionally：出现异常时进入方法处理结果</li></ul><h3 id="3-2）handler-处理异常"><a href="#3-2）handler-处理异常" class="headerlink" title="3.2）handler()处理异常"></a>3.2）handler()处理异常</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ExecutionException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span>  future <span class="token operator">=</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"当前线程"</span><span class="token operator">+</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">10</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> i<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>executor<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">handle</span><span class="token punctuation">(</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span>exception<span class="token punctuation">)</span><span class="token operator">-></span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">!=</span> exception<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token number">10</span><span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"结果"</span><span class="token operator">+</span>future<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>handler：<ul><li>参数：结果，异常</li><li>优点：简洁，如果出现异常，可以直接进行处理</li></ul></li></ul><h3 id="3-3）异步编排"><a href="#3-3）异步编排" class="headerlink" title="3.3）异步编排"></a>3.3）异步编排</h3><p>首先，有两个任务，其中一个立即执行，另一个沉睡3秒</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">      <span class="token comment">//任务1</span><span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Boolean</span><span class="token punctuation">></span></span>  future1 <span class="token operator">=</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token punctuation">&#123;</span>          <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>              <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"future1执行完毕"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>              e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>          <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>executor<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exceptionally</span><span class="token punctuation">(</span>throwable <span class="token operator">-></span> <span class="token punctuation">&#123;</span>          <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"出现异常"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//任务2</span>      <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Boolean</span><span class="token punctuation">></span></span>  future2 <span class="token operator">=</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token punctuation">&#123;</span>              <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"future2执行完毕"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>executor<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exceptionally</span><span class="token punctuation">(</span>throwable <span class="token operator">-></span> <span class="token punctuation">&#123;</span>          <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"future2出现异常"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-3-0）等待上一个任务执行完毕在执行"><a href="#3-3-0）等待上一个任务执行完毕在执行" class="headerlink" title="3.3.0）等待上一个任务执行完毕在执行"></a>3.3.0）<strong>等待上一个任务执行完毕在执行</strong></h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//future1：上一个任务，res形参：上一个任务的结果返回值</span>future1<span class="token punctuation">.</span><span class="token function">thenAcceptAsync</span><span class="token punctuation">(</span>res<span class="token operator">-></span><span class="token punctuation">&#123;</span><span class="token comment">//xxx 业务逻辑</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>excutor<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-3-1）两个异步任务执行完才执行方法"><a href="#3-3-1）两个异步任务执行完才执行方法" class="headerlink" title="3.3.1）两个异步任务执行完才执行方法"></a>3.3.1）两个异步任务执行完才执行方法</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java">    <span class="token comment">/**     * 执行结果：     *      * future2执行完毕     * future1执行完毕     * 全部执行完毕     */</span>任务<span class="token number">1.</span><span class="token function">thenAcceptBothAsync</span><span class="token punctuation">(</span>任务<span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">(</span>任务<span class="token number">1</span>结果，任务<span class="token number">2</span>结果<span class="token punctuation">)</span><span class="token operator">-></span><span class="token punctuation">&#123;</span>        <span class="token comment">//逻辑</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>线程池<span class="token punctuation">)</span>   任务<span class="token number">1.</span><span class="token function">thenCombineAsync</span><span class="token punctuation">(</span>任务<span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">(</span>任务<span class="token number">1</span>结果，任务<span class="token number">2</span>结果<span class="token punctuation">)</span><span class="token operator">-></span><span class="token punctuation">&#123;</span>        <span class="token comment">//逻辑</span>       <span class="token comment">//return 返回值</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>线程池<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>thenAcceptBothAsync</strong>：没有返回值，当两个任务执行完毕，执行此方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//任务1和任务2都执行完毕进入此方法</span>      future1<span class="token punctuation">.</span><span class="token function">thenAcceptBothAsync</span><span class="token punctuation">(</span>future2<span class="token punctuation">,</span><span class="token punctuation">(</span>f1<span class="token punctuation">,</span>f2<span class="token punctuation">)</span><span class="token operator">-></span><span class="token punctuation">&#123;</span>          <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"全部执行完毕"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>executor<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>thenCombineAsync</strong>：有返回值，当两个任务执行完毕，执行此方法</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> future <span class="token operator">=</span> future1<span class="token punctuation">.</span><span class="token function">thenCombineAsync</span><span class="token punctuation">(</span>future2<span class="token punctuation">,</span> <span class="token punctuation">(</span>f1<span class="token punctuation">,</span> f2<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token string">"全部任务执行完毕"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> executor<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>future<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-3-2）两个任务任意执行完一个即可执行方法"><a href="#3-3-2）两个任务任意执行完一个即可执行方法" class="headerlink" title="3.3.2）两个任务任意执行完一个即可执行方法"></a>3.3.2）两个任务任意执行完一个即可执行方法</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"> <span class="token comment">/**  * 执行结果：  *  * future2执行完毕  * 任意一个任务执行完毕，即可执行此方法  * future1执行完毕  */</span>任务<span class="token number">1.</span><span class="token function">applyToEitherAsync</span><span class="token punctuation">(</span>任务<span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">(</span>最先执行完毕的任务结果<span class="token punctuation">)</span><span class="token operator">-></span><span class="token punctuation">&#123;</span>     <span class="token comment">//逻辑</span>    <span class="token comment">//return 返回值</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>线程池<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java">future1<span class="token punctuation">.</span><span class="token function">runAfterEitherAsync</span><span class="token punctuation">(</span>future2<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"任意一个任务执行完毕，即可执行此方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>executor<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> future3 <span class="token operator">=</span> future1<span class="token punctuation">.</span><span class="token function">applyToEitherAsync</span><span class="token punctuation">(</span>future2<span class="token punctuation">,</span> res <span class="token operator">-></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token string">"执行完毕任务3"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> executor<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>future3<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>runAfterEitherAsync()：不感知结果，自己没有返回值</p><p>applyToEitherAsync()：感知结果，自己有返回值</p><h4 id="3-3-3）多个任务执行完毕后才执行方法"><a href="#3-3-3）多个任务执行完毕后才执行方法" class="headerlink" title="3.3.3）多个任务执行完毕后才执行方法"></a>3.3.3）多个任务执行完毕后才执行方法</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">></span></span> allOf <span class="token operator">=</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">allOf</span><span class="token punctuation">(</span>future1<span class="token punctuation">,</span> future2<span class="token punctuation">)</span><span class="token punctuation">;</span>allOf<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行完毕"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="3-3-4）多个任务任一执行完毕后执行"><a href="#3-3-4）多个任务任一执行完毕后执行" class="headerlink" title="3.3.4）多个任务任一执行完毕后执行"></a>3.3.4）多个任务任一执行完毕后执行</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> future <span class="token operator">=</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">anyOf</span><span class="token punctuation">(</span>future1<span class="token punctuation">,</span> future2<span class="token punctuation">)</span><span class="token punctuation">;</span>future<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"有一个执行完了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h1 id="4-Spring自带的线程池"><a href="#4-Spring自带的线程池" class="headerlink" title="4.Spring自带的线程池"></a>4.Spring自带的线程池</h1><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Bean</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>scheduling<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">EnableAsync</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>scheduling<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">ThreadPoolTaskExecutor</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">Executor</span></span><span class="token punctuation">;</span><span class="token comment">/** * 线程池初始化 * * @author lvfeiyang * @email 1316547530@qq.com * @date 2022-7-02 19:02:04 */</span><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@EnableAsync</span> <span class="token comment">// 开启线程池</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadPoolConfig</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">"taskExecutor"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">Executor</span> <span class="token function">asyncServiceExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ThreadPoolTaskExecutor</span> executor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolTaskExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 设置核兴线程数</span>        executor<span class="token punctuation">.</span><span class="token function">setCorePoolSize</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 设置最大线程数</span>        executor<span class="token punctuation">.</span><span class="token function">setMaxPoolSize</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 设置队列大小</span>        executor<span class="token punctuation">.</span><span class="token function">setQueueCapacity</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 设置线程活跃时间 60s</span>        executor<span class="token punctuation">.</span><span class="token function">setKeepAliveSeconds</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 设置默认线程名称</span>        executor<span class="token punctuation">.</span><span class="token function">setThreadNamePrefix</span><span class="token punctuation">(</span><span class="token string">"lfy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 是否所有任务执行完毕后关闭线程池</span>        executor<span class="token punctuation">.</span><span class="token function">setWaitForTasksToCompleteOnShutdown</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 执行初始化</span>        executor<span class="token punctuation">.</span><span class="token function">initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> executor<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href=""></a></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 流式编程 </tag>
            
            <tag> 线程池 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker(集群案例)</title>
      <link href="/2022/08/17/docker-chuang-jian-fen-bu-shi-ji-qun-pian/"/>
      <url>/2022/08/17/docker-chuang-jian-fen-bu-shi-ji-qun-pian/</url>
      
        <content type="html"><![CDATA[<h1 id="redis分片集群"><a href="#redis分片集群" class="headerlink" title="redis分片集群"></a>redis分片集群</h1><ul><li>方式一：sh脚本示例</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">for</span> <span class="token for-or-select variable">port</span> <span class="token keyword">in</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">seq</span> <span class="token number">7001</span> <span class="token number">7006</span><span class="token variable">)</span></span><span class="token punctuation">;</span> <span class="token keyword">do</span> <span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /mydata/redis/node-<span class="token variable">$&#123;port&#125;</span>/conf <span class="token function">touch</span> /mydata/redis/node-<span class="token variable">$&#123;port&#125;</span>/conf/redis.conf <span class="token function">cat</span> <span class="token operator">&lt;&lt;</span> <span class="token string">EOF<span class="token bash punctuation"> <span class="token operator">></span>/mydata/redis/node-<span class="token variable">$&#123;port&#125;</span>/conf/redis.conf </span>port <span class="token variable">$&#123;port&#125;</span> cluster-enabled yes cluster-config-file nodes.conf cluster-node-timeout 5000cluster-announce-ip  172.31.171.217 cluster-announce-port <span class="token variable">$&#123;port&#125;</span>cluster-announce-bus-port 1<span class="token variable">$&#123;port&#125;</span>appendonly yesEOF</span><span class="token function">docker</span> run <span class="token parameter variable">-p</span> <span class="token variable">$&#123;port&#125;</span><span class="token builtin class-name">:</span><span class="token variable">$&#123;port&#125;</span> <span class="token parameter variable">-p</span> <span class="token number">1</span><span class="token variable">$&#123;port&#125;</span>:1<span class="token variable">$&#123;port&#125;</span> <span class="token parameter variable">--name</span> redis-<span class="token variable">$&#123;port&#125;</span> <span class="token parameter variable">--privileged</span><span class="token operator">=</span>true <span class="token parameter variable">-v</span> /mydata/redis/node-<span class="token variable">$&#123;port&#125;</span>/data:/data <span class="token parameter variable">-v</span> /mydata/redis/node-<span class="token variable">$&#123;port&#125;</span>/conf/redis.conf:/etc/redis/redis.conf <span class="token parameter variable">-d</span> redis:5.0.7 redis-server /etc/redis/redis.conf<span class="token punctuation">;</span> <span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>方式二：手动一个一个创建</strong></p><p><strong>首先每个docker创建redis需要一个data文件夹，一个redis.conf文件</strong></p><p>集群文件需要配置以下信息 ，这是其中一个节点的配置文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#在redis.conf文件中写入</span>port <span class="token number">7001</span> <span class="token comment">#端口号</span>cluster-enabled <span class="token function">yes</span> <span class="token comment">#是否开启集群模式</span>cluster-config-file nodes.conf <span class="token comment">#集群的配置文件名称，不需要自己创建，由redis自己维护</span>cluster-node-timeout <span class="token number">5000</span> <span class="token comment">#超时时间</span>cluster-announce-ip <span class="token number">192.168</span>.159.138 <span class="token comment">#注册实例的ip</span>cluster-announce-port <span class="token number">7001</span> <span class="token comment">#集群节点的映射端口默认6379</span>cluster-announce-bus-port <span class="token number">17001</span> <span class="token comment">#集群互相通信的端口</span>appendonly <span class="token function">yes</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后在docker中创建此节点（配置文件目录在&#x2F;mydata&#x2F;redis&#x2F;node-7001&#x2F;目录下data和conf&#x2F;redis.conf文件）</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run <span class="token parameter variable">-p7001:7001</span> <span class="token parameter variable">-p17001:17001</span> <span class="token parameter variable">--name</span> redis-7001 <span class="token parameter variable">--privileged</span> <span class="token parameter variable">-v</span> /mydata/redis/node-7001/data:/data <span class="token parameter variable">-v</span> /mydata/redis/node-7001/conf/redis.conf:/etc/redis/redis.conf <span class="token parameter variable">-d</span> redis:5.0.7 redis-server /etc/redis/redis.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>以此类推，几个集群节点就创建几个</p><p>创建完成之后随意进入一个容器内</p><pre class="line-numbers language-none"><code class="language-none">docker exec -it redis-7001 bash<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">redis-cli <span class="token parameter variable">--cluster</span> create <span class="token number">192.168</span>.159.138:7001 <span class="token number">192.168</span>.159.138:7002 <span class="token number">192.168</span>.159.138:7003 <span class="token number">192.168</span>.159.138:7004 <span class="token number">192.168</span>.159.138:7005 <span class="token number">192.168</span>.159.138:7006 --cluster-replicas <span class="token number">1</span> <span class="token comment">#这个参数1是需要几个从节点</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>之后系统就会给出集群方案列如</p><p><img src="C:\Users\吕飞扬\Desktop\docker\assets\image-20230110210540144.png" alt="image-20230110210540144"></p><p>如图所示节点7001是一个master，它的从节点是7005 salve</p><p>使用 redis-cli 的 cluster 方式进行连接</p><p>redis-cli -c -h 192.168.159.138 -p 7006</p><p>cluster info； 获取集群信息</p><p>cluster nodes；获取集群节点</p><p>Get&#x2F;Set 命令测试，将会重定向</p><p>节点宕机，slave 会自动提升为 master，master 开启后变为 slave</p><h2 id="扩容"><a href="#扩容" class="headerlink" title="扩容"></a><strong>扩容</strong></h2><p>因为redis使用的是哈希槽，每个节点大致平均对应着一片槽位，根据key的哈希值来判断存储在哪个节点上，如果进行扩容如何解决原数据槽位变更带来的读取问题</p><ol><li><p>首先创建新主节点，进入容器内部</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">redis-cli <span class="token parameter variable">--cluster</span> add-node ip:端口 ip：端口<span class="token comment">#如果报错，说nodes不为空，就把容器内data目录下的三个配置文件nodes.cnf等删了重启容器在进去执行命令</span><span class="token comment">#第一个ip:端口就是将要作为master的新增节点，第二个ip:端口是原来节点里的领路人，根据这个节点加入集群</span>redis-cli <span class="token parameter variable">--cluster</span> check ip:端口 <span class="token comment">#查看集群信息</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>加入节点之后，新节点master默认槽位是0，现在需要给他分配槽位</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">redis-cli <span class="token parameter variable">--cluster</span> reshard ip:新节点端口 <span class="token comment">#重新分配槽位,随意输入一个集群master几点的ip：端口</span><span class="token comment">#How many slots do you want to move (from 1 to 16384)? 这里是问你怎么分配，可以根据 16384/节点数 来进行分配 ,例如我现在是4台机器输入4096</span><span class="token comment">#what is the receiving node ID ? #分配给谁，这里填新增master节点的id</span><span class="token comment">#Source node #1: all #你要从哪个节点中抽出这些槽位，这里输入all表示所有节点平均分配一点槽位给新节点</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>这里的重新分配槽位，是每个原主节点抽了4096个没有存放数据的槽位给新加入的主节点。原有数据不发生改变</li></ul></li></ol><p><strong>给新主节点增加一个从节点</strong></p><p>启动一个从节点，进入从节点</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">redis-cli <span class="token parameter variable">--cluster</span> add-node ip:新slave端口 ip:新master端口 --cluster-slave --cluster-master-id 新主节点id<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="缩容"><a href="#缩容" class="headerlink" title="缩容"></a>缩容</h2><p>先删从机</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">redis-cli <span class="token parameter variable">--cluster</span> del-node ip:从机端口 从机id<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将要删除的主节点槽号清空，重新分配</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">redis-cli <span class="token parameter variable">--cluster</span> reshard ip:端口  <span class="token comment">#重新分配槽位</span><span class="token comment">#How many slots do you want to move (from 1 to 16384)? 分配多少槽位 4096</span><span class="token comment">#What is the receiving node ID? 谁来接收这些槽位 删除槽位之后多出来的槽位可以随意给别的master进行接收</span><span class="token comment">#Source node 谁来出这些槽位，输入要删除槽位的ID</span><span class="token keyword">done</span>redis-cli <span class="token parameter variable">--cluster</span> check ip:端口 <span class="token comment">#查看集群信息</span><span class="token comment">#要删除的master节点槽位清空后即可删除</span>redis-cli <span class="token parameter variable">--cluster</span> del-node ip:要删除的master端口 要删除的master的Id<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="RabbitMq"><a href="#RabbitMq" class="headerlink" title="RabbitMq"></a>RabbitMq</h1><p>首先创建映射文件 </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> /mydata/rabbitmq<span class="token builtin class-name">cd</span> rabbitmq/<span class="token function">mkdir</span> rabbitmq01 rabbitmq02 rabbitmq03<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>创建docker容器</p><p>主：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">--hostname</span> rabbitmqMaster <span class="token parameter variable">--name</span> rabbitmqMaster <span class="token parameter variable">-v</span> /mydata/rabbitmq/rabbitmq-Master:/var/lib/rabbitmq <span class="token parameter variable">-p</span> <span class="token number">15672</span>:15672 <span class="token parameter variable">-p</span> <span class="token number">5672</span>:5672 <span class="token parameter variable">-e</span> <span class="token assign-left variable">RABBITMQ_ERLANG_COOKIE</span><span class="token operator">=</span><span class="token string">'lfy'</span> rabbitmq:management <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>–hostname 设置容器主机名，方便从节点连接 </li><li>-e RABBITMQ_ERLANG_COOKIE&#x3D;’lfy’     节点认证作用，部署集成时 需要同步该值   相当于一个令牌，跟从节点进行通信的令牌</li></ul><p>从：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">--hostname</span> rabbitmqSlave1 <span class="token parameter variable">--name</span> rabbitmqSlave1 <span class="token parameter variable">-v</span> /mydata/rabbitmq/rabbitmq-slave1:/var/lib/rabbitmq <span class="token parameter variable">-p</span> <span class="token number">15673</span>:15672 <span class="token parameter variable">-p</span> <span class="token number">5673</span>:5672 <span class="token parameter variable">-e</span> <span class="token assign-left variable">RABBITMQ_ERLANG_COOKIE</span><span class="token operator">=</span><span class="token string">'lfy'</span> <span class="token parameter variable">--link</span> rabbitmqMaster:rabbitmqMaster  rabbitmq:management <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>–link rabbitmqMaster:rabbitmqMaster 主节点的主机名，也就是前面指定的–hostname 。 然后用：取了一个别名 还是叫rabbitmqMaster</li></ul><p>从2：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">--hostname</span> rabbitmqSlave2 <span class="token parameter variable">--name</span> rabbitmqSlave2 <span class="token parameter variable">-v</span> /mydata/rabbitmq/rabbitmq-slave2:/var/lib/rabbitmq <span class="token parameter variable">-p</span> <span class="token number">15674</span>:15672 <span class="token parameter variable">-p</span> <span class="token number">5674</span>:5672 <span class="token parameter variable">-e</span> <span class="token assign-left variable">RABBITMQ_ERLANG_COOKIE</span><span class="token operator">=</span><span class="token string">'lfy'</span> <span class="token parameter variable">--link</span> rabbitmqMaster:rabbitmqMaster <span class="token parameter variable">--link</span> rabbitmqSlave1:rabbitmqSlave1 rabbitmq:management <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><strong>–link:别忘了把从节点1的主机名也绑定上去</strong></li></ul><p>或者不使用link，使用自定义网络的方式。这里省略方式二</p><p><strong>常见错误</strong>：</p><ul><li>如果在web端打开15672提示不是一个安全的建立连接需要进入容器中创建账号</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> rabbitmqMaster <span class="token function">bash</span>rabbitmqctl list_users <span class="token comment">#查看用户列表</span>rabbitmqctl add_user lfy <span class="token number">123321</span> <span class="token comment">#添加一个用户</span>rabbitmqctl set_user_tags lfy administrator <span class="token comment">#给名字为lfy的用户权限</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>如果加入集群报错</li></ul><pre class="line-numbers language-none"><code class="language-none">Clustering node rabbit@rabbitmq2 with rabbit@rabbitmq1Error:incompatible_feature_flags 表示: Rabbitmq各节点版本不一致导致的<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>默认rabbitmq启动后是磁盘节点，在这个cluster命令下，rabbitmqSlave1和rabbitmqSlave2是内存节点，rabbitmqMaster是磁盘节点。<br>如果要使rabbitmqSlave1、rabbitmqSlave2都是磁盘节点，去掉–ram参数即可。在RabbitMQ集群中，必须至少有一个磁盘节点，否则队列元数据无法写入到集群中，当磁盘节点宕掉时，集群将无法写入新的队列元数据信息。</li><li>如果想要更改节点类型，可以使用命令rabbitmqctl change_cluster_node_type disc(ram),前提是必须停掉rabbit应用</li><li><strong>也有可能是因为在创建容器时，没有指定所有link 所有主节点和从节点的主机名。</strong></li></ul><h3 id="加入集群"><a href="#加入集群" class="headerlink" title="加入集群"></a>加入集群</h3><p>给主rabbitmq容器恢复出厂设置，如果是新安装的rabbitmq可以省略这一步</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> rabbitmq01 /bin/bashrabbitmqctl stop_app <span class="token comment">#停止rabbitmq</span>rabbitmqctl reset <span class="token comment">#进行重置</span>rabbitmqctl start_app <span class="token comment">#启动rabbitmq</span>Exit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>进入从节点加入集群</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#进入第二个节点</span><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> rabbitmq02 /bin/bashrabbitmqctl stop_apprabbitmqctl reset <span class="token comment">#重置 </span>rabbitmqctl join_cluster <span class="token parameter variable">--ram</span> rabbit@rabbitmqMaster <span class="token comment">#变为rabbitmqMaster主机名的从节点，先要stop_app才能加入集群</span>rabbitmqctl start_app<span class="token builtin class-name">exit</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>–ram rabbit@主机名 去掉–ram参数就是以磁盘节点的状态加入集群。加上–ram就是以内存节点。集群中必须存在一个磁盘节点</li></ul><p>第三个同理</p><h3 id="实现镜像集群"><a href="#实现镜像集群" class="headerlink" title="实现镜像集群"></a>实现镜像集群</h3><p>进入主节点容器内</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> rabbitmqMaster <span class="token function">bash</span>rabbitmqctl set_policy <span class="token parameter variable">-p</span> / ha <span class="token string">"^"</span> <span class="token string">'&#123;"ha-mode":"all","ha-sync-mode":"automatic"&#125;'</span><span class="token comment">#ha 策略名字   /  表示指定虚拟主机为/     “^”  表示所有队列 如果想指定某个队列 使用“^hello”则表示以hello开头的队列  </span><span class="token comment"># ha-mode 高可用模式   all 所有都是高可用模式   ha-sync-mode：“automatic” 消息自动同步</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>可以使用 rabbitmqctl list_policies -p &#x2F;；查看 vhost&#x2F;下面的所有 policy</p></li><li><p>在 cluster 中任意节点启用策略，策略会自动同步到集群节点</p><p>rabbitmqctl set_policy-p&#x2F;ha-all”^”’{“ha-mode”:“all”}’ </p><p>策略模式 all 即复制到所有节点，包含新增节点，策略正则表达式为 “^” 表示所有匹配所有队列名称。“^hello”表示只匹配名为 hello 开始的队列</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> linux </tag>
            
            <tag> 容器化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker(下)</title>
      <link href="/2022/08/17/zui-xin-fu-xi-xia/"/>
      <url>/2022/08/17/zui-xin-fu-xi-xia/</url>
      
        <content type="html"><![CDATA[<h1 id="1-DockerFile"><a href="#1-DockerFile" class="headerlink" title="1.DockerFile"></a>1.DockerFile</h1><table><thead><tr><th>指令</th><th>作用</th></tr></thead><tbody><tr><td>FROM</td><td>基础镜像，当前新镜像是基于哪个镜像的，指定一个已经存在的镜像作为模板，第一条必须是FROM</td></tr><tr><td>MAINTAINER</td><td>镜像维护者的姓名和邮箱地址</td></tr><tr><td>RUN</td><td>容器构建时需要运行的命令，两种格式，shell格式、exec格式。RUN是在docker build时运行。相当于在容器内运行终端命令</td></tr><tr><td>EXPOSE</td><td>当前容器对外暴露的端口</td></tr><tr><td>WORKDIR</td><td>在创建容器后，终端进入容器的默认目录，一个落脚点</td></tr><tr><td>USER</td><td>指定该镜像以什么样的身份去执行，如果不指定，默认root</td></tr><tr><td>ENV</td><td>用来在构建镜像的过程中定义环境变量，可以用$+变量名取值</td></tr><tr><td>ADD</td><td>将宿主机目录下的文件拷贝进镜像且会自动处理URL和解压tar压缩包</td></tr><tr><td>COPY</td><td>类似ADD，拷贝文件到镜像中</td></tr><tr><td>VOLUME</td><td>容器数据卷，用于数据保存和持久化工作 相当于 -v</td></tr><tr><td>CMD</td><td>指定容器启动后要干的事情，可以存在多个cmd指令，但是只有最后一个生效。RUN是在build运行，CMD是在run的时候运行</td></tr><tr><td>ENTRYPOINT</td><td>跟cmd差不多 但是当指定了ENTRYPOINT之后CMD的含义就发生了变化，不再是直接运行命令，而是将CMD的内容作为参数传递给ENTRYPOINT</td></tr><tr><td></td><td></td></tr></tbody></table><p><strong>ENTRYPOINT</strong></p><pre class="line-numbers language-docker" data-language="docker"><code class="language-docker"><span class="token comment">#例如</span><span class="token instruction"><span class="token keyword">ENTRYPOINT</span> [<span class="token string">"nginx"</span>,<span class="token string">"-c"</span>]</span><span class="token instruction"><span class="token keyword">CMD</span> [<span class="token string">"/etc/nginx/nginx.cnf"</span>]</span><span class="token comment">#衍生出来的命令是 nginx -c /etc/nginx/nginx.cnf</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>示例</strong></p><pre class="line-numbers language-docker" data-language="docker"><code class="language-docker"><span class="token comment">#基础镜像</span><span class="token instruction"><span class="token keyword">FROM</span> centos:7.5 </span><span class="token comment">#姓名和邮箱</span><span class="token instruction"><span class="token keyword">MAINTAINER</span> lfy&lt;1316547530@qq.com> </span><span class="token comment">#定义一个路径变量</span><span class="token instruction"><span class="token keyword">ENV</span> MYPATH /usr/local 、</span><span class="token comment">#进入容器默认目录</span><span class="token instruction"><span class="token keyword">WORKDIR</span> <span class="token variable">$MYPATH</span>  </span><span class="token instruction"><span class="token keyword">RUN</span> yum -y install vim  #容器build时，下载vim</span><span class="token instruction"><span class="token keyword">RUN</span> yum -y install net-tools</span><span class="token instruction"><span class="token keyword">RUN</span> yum -y install glibc.1686</span><span class="token instruction"><span class="token keyword">RUN</span> mkdir /usr/local/java </span><span class="token comment">#提交下载jdk到宿主机中，ADD添加进容器目录里</span><span class="token instruction"><span class="token keyword">ADD</span> jdk-8u144-linux-x64.tar.gz /usr/local/java </span><span class="token comment">#配置java环境变量</span><span class="token instruction"><span class="token keyword">ENV</span> JAVA_HOME /usr/local/java/jdk1.8.0_171</span><span class="token instruction"><span class="token keyword">ENV</span> JRE_HOME <span class="token variable">$JAVA_HOME</span>/jre</span><span class="token instruction"><span class="token keyword">ENV</span> CLASSPATH <span class="token variable">$JAVA_HOME</span>/lib/dt.jar:JAVA_HOME/lib/tools.jar:<span class="token variable">$JRE_HOME</span>/lib:<span class="token variable">$CLASSPATH</span></span><span class="token instruction"><span class="token keyword">ENV</span> PATH <span class="token variable">$JAVA_HOME</span>/bin:<span class="token variable">$PATH</span></span><span class="token instruction"><span class="token keyword">EXPOSE</span> 80</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="部署java微服务实例"><a href="#部署java微服务实例" class="headerlink" title="部署java微服务实例"></a>部署java微服务实例</h3><pre class="line-numbers language-docker" data-language="docker"><code class="language-docker"><span class="token instruction"><span class="token keyword">FROM</span> openjdk:8</span><span class="token instruction"><span class="token keyword">EXPOSE</span> 8080</span><span class="token instruction"><span class="token keyword">MAINTAINER</span> lfy</span><span class="token comment">#挂载容器卷，只写一个就是默认挂载到/var/lib/docker目录下</span><span class="token instruction"><span class="token keyword">VOLUME</span> /tmp</span><span class="token comment">#把当前目录的app.jar包 添加进容器根目录</span><span class="token instruction"><span class="token keyword">ADD</span> app.jar /app.jar</span><span class="token comment">#修改访问时间，可写可不写</span><span class="token instruction"><span class="token keyword">RUN</span> bash -c <span class="token string">'touch /app.jar'</span></span><span class="token instruction"><span class="token keyword">ENTRYPOINT</span> [<span class="token string">"java"</span>,<span class="token string">"-jar"</span>,<span class="token string">"/app.jar"</span>]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>运行dockerfile</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> build <span class="token parameter variable">-t</span> name:版本 <span class="token parameter variable">-f</span> dockerfile的路径  如果是当前目录下，可以使用 <span class="token builtin class-name">.</span> 来代替-f<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="2-虚悬镜像"><a href="#2-虚悬镜像" class="headerlink" title="2.虚悬镜像"></a>2.虚悬镜像</h1><p>错版镜像，构建时出现错误会产生虚悬镜像，特点是名字和tag都是<none>。需要及时删除</p><p>查看虚悬镜像</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> image <span class="token function">ls</span> <span class="token parameter variable">-f</span> <span class="token assign-left variable">dangling</span><span class="token operator">=</span>true<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>删除虚悬镜像</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> image prune <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="3-网络"><a href="#3-网络" class="headerlink" title="3.网络"></a>3.网络</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> network connect <span class="token comment">#将某个容器连接到一个docker网络</span><span class="token function">docker</span> network create <span class="token comment">#创建一个docker局域网络</span><span class="token function">docker</span> network disconnect <span class="token comment">#将某个容器退出某个局域网络</span><span class="token function">docker</span> network inspect <span class="token comment">#显示某个局域网络信息</span><span class="token function">docker</span> network <span class="token function">ls</span>  <span class="token comment">#显示所有docker局域网络</span><span class="token function">docker</span> network prune <span class="token comment">#删除所有未引用的docker局域网络</span><span class="token function">docker</span> network <span class="token function">rm</span>  <span class="token comment">#删除docker网络</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>网络模式</strong></p><ul><li>**bridge(默认)**：使用–network bridge指定，默认使用docker0<ul><li>默认为该模式，相当于VMware 中的nat 模式，容器使用独立network Namespace ，并连接到docker0 虚拟网卡。通过docker0 网桥以及iptables nat 表配置与宿主机通信，此模式会为每一个容器分配Network Namespace、设置IP等，并将一个主机上的Docker 容器连接到一个虚拟网桥上。</li><li>docker0上面的每个veth匹配某个容器实例内部的eth0，两两配对，一一匹配，</li></ul></li><li><strong>host</strong>：使用–network host指定<ul><li>容器不会虚拟出自己的网卡，配置主机的IP等，而是使用宿主机的IP和端口</li><li>docker启动指定–network&#x3D;host或-net&#x3D;host，如果还指定了端口，就会出现警告，并且通过-p设置映射不会起到任何作用，端口号会以主机端口号为主，重复时递增</li></ul></li><li><strong>none</strong>：使用–network none指定<ul><li>该模式关闭了容器的网络功能</li></ul></li><li><strong>container</strong>：使用–network container:NAME 或容器id指定<ul><li>创建的容器不会创建自己的网卡，配置自己的IP，而是和一个指定的容器共享IP，端口范围</li><li>当被继承的容器关闭时，继承他的容器将会没有</li></ul></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run <span class="token parameter variable">--name</span> <span class="token builtin class-name">test</span> <span class="token parameter variable">--privileged</span><span class="token operator">=</span>true  <span class="token parameter variable">-v</span> xxx:xxx <span class="token parameter variable">-p</span> <span class="token number">8888</span>:8888 <span class="token parameter variable">-d</span> xxx <span class="token comment">#默认bridge</span><span class="token function">docker</span> run <span class="token parameter variable">--name</span> <span class="token builtin class-name">test</span> <span class="token parameter variable">--network</span> <span class="token function">host</span> <span class="token parameter variable">--privileged</span><span class="token operator">=</span>true <span class="token parameter variable">-v</span> xxx:xxx <span class="token parameter variable">-d</span> xxx <span class="token comment">#host</span><span class="token function">docker</span> run <span class="token parameter variable">--name</span> <span class="token builtin class-name">test</span> <span class="token parameter variable">--network</span> none <span class="token parameter variable">--privileged</span><span class="token operator">=</span>true <span class="token parameter variable">-v</span> xxx:xxx <span class="token parameter variable">-d</span> xxx <span class="token comment">#none</span><span class="token function">docker</span> run <span class="token parameter variable">--name</span> <span class="token builtin class-name">test</span> <span class="token parameter variable">--network</span> container:需要共用网桥的容器名 <span class="token parameter variable">--privileged</span><span class="token operator">=</span>true <span class="token parameter variable">-v</span> xxx:xxx <span class="token parameter variable">-d</span> xxx <span class="token comment">#container</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>docker 容器的内部网络是有可能会发生改变的。</strong></p><p><strong>场景：</strong>比如启动了一个容器a，ip为127.0.0.2 这个容器宕机了，在他宕机期间又启动了另外一个容器b，这个容器也被分配成了127.0.0.2。等容器a恢复启动后，docker会改变他的ip。这时候127.0.0.2就成了容器b的ip了。</p><p><strong>解决：</strong>自定义网络，<strong>让容器加入同一个自定义网络</strong>。容器IP变动时可以通过服务名直接网络通信而不收影响</p><ul><li>现在link已经过时。推荐使用同一自定义网络搭建集群，并且使用服务名直接网络通信。</li></ul><h3 id="3-2自定义网络示例"><a href="#3-2自定义网络示例" class="headerlink" title="3.2自定义网络示例"></a>3.2自定义网络示例</h3><p>自定义网络本身就维护好了主机名和ip的对应关系（ip和域名都能通）</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"> <span class="token comment"># 不指定网络驱动时默认创建的bridge网络</span> <span class="token function">docker</span> network create <span class="token builtin class-name">test</span> <span class="token comment"># 查看网络内部信息</span> <span class="token function">docker</span> network inspect <span class="token builtin class-name">test</span><span class="token function">docker</span> run <span class="token parameter variable">--name</span> tommcat <span class="token parameter variable">-net</span><span class="token operator">=</span>test <span class="token parameter variable">-p</span> <span class="token number">8080</span>:8080 <span class="token parameter variable">-d</span> tomcat:8.5<span class="token function">docker</span> run <span class="token parameter variable">--name</span> tomcat2 <span class="token parameter variable">-net</span><span class="token operator">=</span>test <span class="token parameter variable">-p</span> <span class="token number">8081</span>:8080 <span class="token parameter variable">-d</span> tomcat:8.5<span class="token comment">#进入容器测试</span><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> tomcat <span class="token function">bash</span><span class="token function">ping</span> tomcat2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>create可选参数</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token parameter variable">--driver</span> bridge            网络模式默认为桥接模式<span class="token parameter variable">--subnet</span>   <span class="token number">192.168</span>.0.0/16            子网掩码  后16位可为任意值，大概支持 <span class="token number">65535</span> 个IP<span class="token parameter variable">--gateway</span> <span class="token number">192.168</span>.0.1                网关IP <span class="token comment"># docker network create --driver bridge --subnet 192.168.0.0/16 --gateway 192.168.0.1 test</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p><strong>java通过服务名连接服务说明</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">spring<span class="token operator">:</span>  datasource<span class="token operator">:</span>    driver<span class="token operator">-</span><span class="token keyword">class</span><span class="token operator">-</span>name<span class="token operator">:</span> <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>mysql<span class="token punctuation">.</span>cj<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span></span>Driver</span>    url<span class="token operator">:</span> jdbc<span class="token operator">:</span>mysql<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>mysql<span class="token operator">:</span><span class="token number">3306</span><span class="token operator">/</span>test<span class="token operator">?</span>useUnicode<span class="token operator">=</span><span class="token boolean">true</span><span class="token operator">&amp;</span>characterEncoding<span class="token operator">=</span><span class="token constant">UTF</span><span class="token operator">-</span><span class="token number">8</span><span class="token operator">&amp;</span>serverTimezone<span class="token operator">=</span><span class="token constant">GMT</span><span class="token operator">%</span><span class="token number">2</span><span class="token constant">B8</span>    username<span class="token operator">:</span> root    password<span class="token operator">:</span> <span class="token number">123456</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>通过服务名mysql：端口号。<strong>坑：是容器内部服务运行的端口号，不是向外暴露的端口号！</strong></li><li>同理，使用nginx反向代理时，在同一个docker自定义网络，也可以使用服务名来代替ip进行反向代理。不过不建议。</li></ul><h1 id="4-Docker-compose容器编排"><a href="#4-Docker-compose容器编排" class="headerlink" title="4.Docker-compose容器编排"></a>4.Docker-compose容器编排</h1><ol><li>Docker Compose是一个工具，用于定义和运行多容器应用程序的工具；</li><li>Docker Compose通过yml文件定义多容器的docker应用；</li><li>Docker Compose通过一条命令根据yml文件的定义去创建或管理多容器；</li></ol><table><thead><tr><th align="left">compose文件格式版本</th><th align="left">docker版本</th></tr></thead><tbody><tr><td align="left">3.4</td><td align="left">17.09.0+</td></tr><tr><td align="left">3.3</td><td align="left">17.06.0+</td></tr><tr><td align="left">3.2</td><td align="left">17.04.0+</td></tr><tr><td align="left">3.1</td><td align="left">1.13.1+</td></tr><tr><td align="left">3.0</td><td align="left">1.13.0+</td></tr><tr><td align="left">2.3</td><td align="left">17.06.0+</td></tr><tr><td align="left">2.2</td><td align="left">1.13.0+</td></tr><tr><td align="left">2.1</td><td align="left">1.12.0+</td></tr><tr><td align="left">2.0</td><td align="left">1.10.0+</td></tr><tr><td align="left">1.0</td><td align="left">1.9.1.+</td></tr></tbody></table><h3 id="4-1安装"><a href="#4-1安装" class="headerlink" title="4.1安装"></a>4.1安装</h3><ul><li>下载</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#github版本</span><span class="token function">curl</span> <span class="token parameter variable">-L</span> <span class="token string">"https://github.com/docker/compose/releases/download/v2.2.2/docker-compose-<span class="token variable"><span class="token variable">$(</span><span class="token function">uname</span> <span class="token parameter variable">-s</span><span class="token variable">)</span></span>-<span class="token variable"><span class="token variable">$(</span><span class="token function">uname</span> <span class="token parameter variable">-m</span><span class="token variable">)</span></span>"</span> <span class="token parameter variable">-o</span> /usr/local/bin/docker-compose <span class="token comment">#国内高速版本</span><span class="token function">curl</span> <span class="token parameter variable">-L</span> https://get.daocloud.io/docker/compose/releases/download/v2.4.1/docker-compose-<span class="token variable"><span class="token variable">`</span><span class="token function">uname</span> <span class="token parameter variable">-s</span><span class="token variable">`</span></span>-<span class="token variable"><span class="token variable">`</span><span class="token function">uname</span> <span class="token parameter variable">-m</span><span class="token variable">`</span></span> <span class="token operator">></span> /usr/local/bin/docker-compos<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>加执行权限</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">chmod</span> u+x /usr/local/bin/docker-compose<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>查看版本</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker-compose</span> <span class="token parameter variable">--version</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>卸载</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">rm</span> /usr/local/bin/docker-cpmpose<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4-2命令"><a href="#4-2命令" class="headerlink" title="4.2命令"></a>4.2命令</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker-compose</span> <span class="token parameter variable">-h</span> <span class="token comment">#查看帮助</span><span class="token function">docker-compose</span> up <span class="token comment">#启动所有docker-compose</span>*docker-compose up <span class="token parameter variable">-d</span> <span class="token comment">#后台启动所有docker-compose</span>*docker-compose down <span class="token comment">#停止并删除容器、网络、卷、镜像</span><span class="token function">docker-compose</span> <span class="token builtin class-name">exec</span> yml里面的服务id <span class="token comment">#进入容器</span><span class="token function">docker-compose</span> <span class="token function">ps</span>   <span class="token comment"># 展示当前docker-compose编排过的所有容器</span><span class="token function">docker-compose</span> <span class="token function">top</span>  <span class="token comment">#展示当前docker-compose编排过的容器进程</span><span class="token function">docker-compose</span> logs yml里的服务di <span class="token comment">#查看日志</span><span class="token function">docker-compose</span> config <span class="token comment">#检查配置</span>*docker-compose config <span class="token parameter variable">-q</span> <span class="token comment">#有问题才有输出，检查docker-compose文件格式语法是否有错误</span><span class="token function">docker-compose</span> restart <span class="token comment">#重启</span><span class="token function">docker-compose</span> start   <span class="token comment">#启动</span><span class="token function">docker-compose</span> stop    <span class="token comment">#停止</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-3示例"><a href="#4-3示例" class="headerlink" title="4.3示例"></a>4.3示例</h3><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment">##参数说明</span> <span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">'3'</span><span class="token comment">#compose编排版本为3'</span><span class="token key atrule">services</span><span class="token punctuation">:</span><span class="token string">'//服务:'</span>  <span class="token key atrule">nginx</span><span class="token punctuation">:</span><span class="token string">'//服务名称'</span>    <span class="token key atrule">images</span><span class="token punctuation">:</span> nginx<span class="token punctuation">:</span>1.10'//镜像'    <span class="token key atrule">hostname</span><span class="token punctuation">:</span> nginx'//容器主机名'    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> nginx'//容器名'    <span class="token key atrule">ports</span><span class="token punctuation">:</span><span class="token string">'//提供端口:'</span>      <span class="token punctuation">-</span> 1216<span class="token punctuation">:</span>80'//对外提供（暴露）的端口'      <span class="token punctuation">-</span> 1217<span class="token punctuation">:</span><span class="token number">443</span>    <span class="token key atrule">networks</span><span class="token punctuation">:</span><span class="token string">'//指定网络'</span>      <span class="token punctuation">-</span> test'//网络名称（群集名称需一致）'    <span class="token key atrule">volumes</span><span class="token punctuation">:</span><span class="token string">'//数据卷'</span>      <span class="token punctuation">-</span> ./wwwroot<span class="token punctuation">:</span>/usr/local/nginx/html'//将宿主机该仓库内文件与nginx首页文件相关联（容器）'   <span class="token key atrule">myapp</span><span class="token punctuation">:</span>     <span class="token key atrule">container_name</span><span class="token punctuation">:</span> app     <span class="token key atrule">ports</span><span class="token punctuation">:</span>       <span class="token punctuation">-</span> 8080<span class="token punctuation">:</span><span class="token number">8080</span>     <span class="token key atrule">build</span><span class="token punctuation">:</span> <span class="token comment">#启动服务时，先将build中指定的dockerfile打包成镜像，再运行该镜像</span>       <span class="token key atrule">context</span><span class="token punctuation">:</span> jenkins<span class="token punctuation">-</span>demo <span class="token comment">#指定上下文目录dockerfile所在目录[相对、绝对路径都可以]</span>       <span class="token key atrule">dockerfile</span><span class="token punctuation">:</span> Dockerfile <span class="token comment">#文件名称[在指定的context的目录下指定那个Dockerfile文件名称]</span>     <span class="token key atrule">networks</span><span class="token punctuation">:</span>       <span class="token punctuation">-</span> test     <span class="token key atrule">depends_on</span><span class="token punctuation">:</span>       <span class="token punctuation">-</span> nginx    <span class="token comment">#指定先让nginx和mysql容器运行在运行app容器</span>       <span class="token punctuation">-</span> mysql    <span class="token key atrule">mysql</span><span class="token punctuation">:</span>      <span class="token key atrule">images</span><span class="token punctuation">:</span> mysql<span class="token punctuation">:</span><span class="token number">5.7</span>      <span class="token key atrule">environment</span><span class="token punctuation">:</span>        <span class="token key atrule">MYSQL_ROOT_PASSWORD</span><span class="token punctuation">:</span> <span class="token string">'123456'</span>      <span class="token key atrule">ports</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> 3306<span class="token punctuation">:</span><span class="token number">3306</span>      <span class="token key atrule">volumes</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> /mydata/mysql/db<span class="token punctuation">:</span>/var/lib/mysql      <span class="token key atrule">networks</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> test      <span class="token key atrule">command</span><span class="token punctuation">:</span> <span class="token punctuation">-</span><span class="token punctuation">-</span>default<span class="token punctuation">-</span>authentication<span class="token punctuation">-</span>plugin=mysql_native_password <span class="token comment">#解决外部无法访问</span><span class="token key atrule">networks</span><span class="token punctuation">:</span><span class="token string">'//对外公开需要声明networks群集名称'</span>  test<span class="token punctuation">:</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> linux </tag>
            
            <tag> 容器化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker(上)</title>
      <link href="/2022/08/17/3.ji-ben-cao-zuo-rong-qi-2/"/>
      <url>/2022/08/17/3.ji-ben-cao-zuo-rong-qi-2/</url>
      
        <content type="html"><![CDATA[<h1 id="0-安装Docker"><a href="#0-安装Docker" class="headerlink" title="0.安装Docker"></a>0.安装Docker</h1><p>Docker 分为 CE 和 EE 两大版本。CE 即社区版（免费，支持周期 7 个月），EE 即企业版，强调安全，付费使用，支持周期 24 个月。</p><p>Docker CE 分为 <code>stable</code> <code>test</code> 和 <code>nightly</code> 三个更新频道。</p><p>官方网站上有各种环境下的 <a href="https://docs.docker.com/install/">安装指南</a>，这里主要介绍 Docker CE 在 CentOS上的安装。</p><h1 id="0-1-CentOS7安装Docker"><a href="#0-1-CentOS7安装Docker" class="headerlink" title="0.1.CentOS7安装Docker"></a>0.1.CentOS7安装Docker</h1><p>Docker CE 支持 64 位版本 CentOS 7，并且要求内核版本不低于 3.10， CentOS 7 满足最低内核的要求，所以我们在CentOS 7安装Docker。</p><h2 id="0-1-1-卸载（可选）"><a href="#0-1-1-卸载（可选）" class="headerlink" title="0.1.1.卸载（可选）"></a>0.1.1.卸载（可选）</h2><p>如果之前安装过旧版本的Docker，可以使用下面命令卸载：</p><pre class="line-numbers language-none"><code class="language-none">yum remove docker \                  docker-client \                  docker-client-latest \                  docker-common \                  docker-latest \                  docker-latest-logrotate \                  docker-logrotate \                  docker-selinux \                  docker-engine-selinux \                  docker-engine \                  docker-ce<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="0-1-2-安装docker"><a href="#0-1-2-安装docker" class="headerlink" title="0.1.2.安装docker"></a>0.1.2.安装docker</h2><p>首先需要大家虚拟机联网，安装yum工具</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> <span class="token parameter variable">-y</span> yum-utils <span class="token punctuation">\</span>           device-mapper-persistent-data <span class="token punctuation">\</span>           lvm2 --skip-broken<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>然后更新本地镜像源：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 设置docker镜像源</span>yum-config-manager <span class="token punctuation">\</span>    --add-repo <span class="token punctuation">\</span>    https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo    <span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">'s/download.docker.com/mirrors.aliyun.com\/docker-ce/g'</span> /etc/yum.repos.d/docker-ce.repoyum makecache fast<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后输入命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> <span class="token parameter variable">-y</span> docker-ce<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>docker-ce为社区免费版本。稍等片刻，docker即可安装成功。</p><h2 id="0-1-3-启动docker"><a href="#0-1-3-启动docker" class="headerlink" title="0.1.3.启动docker"></a>0.1.3.启动docker</h2><p>Docker应用需要用到各种端口，逐一去修改防火墙设置。非常麻烦，因此建议大家直接关闭防火墙！</p><p>启动docker前，一定要关闭防火墙后！！</p><p>启动docker前，一定要关闭防火墙后！！</p><p>启动docker前，一定要关闭防火墙后！！</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 关闭</span>systemctl stop firewalld<span class="token comment"># 禁止开机启动防火墙</span>systemctl disable firewalld<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>通过命令启动docker：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl start <span class="token function">docker</span>  <span class="token comment"># 启动docker服务</span>systemctl stop <span class="token function">docker</span>  <span class="token comment"># 停止docker服务</span>systemctl restart <span class="token function">docker</span>  <span class="token comment"># 重启docker服务</span>systemctl status <span class="token function">docker</span> <span class="token comment">#查看docker是否启动</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后输入命令，可以查看docker版本：</p><pre class="line-numbers language-none"><code class="language-none">docker -v<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="0-1-4-配置镜像加速"><a href="#0-1-4-配置镜像加速" class="headerlink" title="0.1.4.配置镜像加速"></a>0.1.4.配置镜像加速</h2><p>docker官方镜像仓库网速较差，我们需要设置国内镜像服务：</p><p>参考阿里云的镜像加速文档：<a href="https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors">https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors</a></p><h1 id="1-容器命令"><a href="#1-容器命令" class="headerlink" title="1.容器命令"></a>1.容器命令</h1><h3 id="1-1-启动"><a href="#1-1-启动" class="headerlink" title="1.1.启动"></a>1.1.启动</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run <span class="token parameter variable">-p</span> <span class="token number">3306</span>:3306 <span class="token parameter variable">--name</span> mysql <span class="token punctuation">\</span><span class="token parameter variable">-v</span> /mydata/mysql/log:/var/log/mysql <span class="token punctuation">\</span><span class="token parameter variable">-v</span> /mydata/mysql/data:/var/lib/mysql<span class="token punctuation">\</span><span class="token parameter variable">-v</span> /mydata/mysql/conf:/etc/mysql <span class="token punctuation">\</span><span class="token parameter variable">-e</span> <span class="token assign-left variable">MYSQL_ROOT_PASSWORD</span><span class="token operator">=</span><span class="token number">123456</span> <span class="token punctuation">\</span><span class="token parameter variable">-d</span> mysql:5.7<span class="token comment">#每个docker容器里面其实就是一个linux系统</span><span class="token comment">#通过 docker exce -it 可以进入容器中的 /mydata/mysql/log 查看日志等，但是为了方便修改，所以有了文件映射，也就是 -v参数</span><span class="token comment">#不建议在docker中部署有状态服务，列如redis，mysql。因为容器一但删除，将会造成数据丢失。所以一定要做好容器卷映射进行备份</span><span class="token parameter variable">-v</span> 文件映射<span class="token parameter variable">-e</span> 设置容器内部属性<span class="token parameter variable">-d</span> 后台运行<span class="token parameter variable">--name</span> 取名<span class="token parameter variable">-p</span> 端口映射<span class="token parameter variable">--privileged</span><span class="token operator">=</span>true <span class="token comment">#让容器内的root拥有真正的root权限</span>--volumes-from 容器名 <span class="token comment">#继承另一个容器的映射文件，两个容器共享使用同一份映射文件。数据互相传递</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-2-常用命令"><a href="#1-2-常用命令" class="headerlink" title="1.2.常用命令"></a>1.2.常用命令</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#镜像</span><span class="token function">docker</span> pull xxx <span class="token comment">#从dockerhub拉取镜像</span><span class="token function">docker</span> search xxx <span class="token comment">#在dockerhub查看镜像有版本</span><span class="token function">docker</span> rmi 镜像名 <span class="token comment">#删除镜像</span><span class="token comment">#容器</span><span class="token function">docker</span> start 容器名 <span class="token comment">#启动容器</span><span class="token function">docker</span> stop 容器名 <span class="token comment">#停止</span><span class="token function">docker</span> <span class="token function">rm</span> 容器名 <span class="token comment">#删除容器</span><span class="token function">docker</span> restart 容器名 <span class="token comment">#重启容器</span><span class="token function">docker</span> inspect 容器id  <span class="token comment">#查看容器内部细节</span><span class="token function">docker</span> <span class="token function">top</span> 容器id  <span class="token comment">#查看容器内运行的进程</span><span class="token function">docker</span> <span class="token function">cp</span> 容器id:容器内路径 目标主机路径 <span class="token comment">#复制容器内文件到外部</span><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> 容器名 <span class="token function">bash</span> <span class="token comment">#进入容器内部，并且exit退出时保持容器运行</span><span class="token comment">#打包以及生成镜像</span><span class="token comment">#=================================================================================================</span><span class="token function">docker</span> <span class="token builtin class-name">export</span> 容器id <span class="token operator">></span> 名字.tar <span class="token comment">#导出容器为一个tar包，对应import</span><span class="token function">cat</span> 名字.tar <span class="token operator">|</span> <span class="token function">docker</span> <span class="token function">import</span> - 自定义用户名/镜像名:镜像版本号 <span class="token comment">#将一个export导出的tar包转换为镜像</span><span class="token function">docker</span> commit <span class="token parameter variable">-a</span><span class="token operator">=</span><span class="token string">"作者信息"</span> <span class="token parameter variable">-m</span><span class="token operator">=</span><span class="token string">"提交的描述信息"</span> 容器id 容器名:版本号 <span class="token comment">#提交容器镜像为一个镜像</span><span class="token function">docker</span> save <span class="token parameter variable">-o</span> xxx.tar 镜像名 <span class="token comment">#将指定镜像导出为一个tar包。</span><span class="token function">docker</span> load <span class="token parameter variable">-i</span> xxx.tar <span class="token comment">#解析tar包到本地镜像库</span><span class="token comment">#export和commit、save的区别。</span><span class="token comment">#export只会保留最新的一层docker镜像层，无法做到回滚，优点是导出后的镜像小。常用于构建基础镜像</span><span class="token comment">#commit会在docker镜像层中添加当前容器作为新的镜像层，并保留原有的读写层，可以根据镜像层回滚。常用于保存容器镜像</span><span class="token comment">#save 会保留原有的读写镜像层，可以回滚，常用于备份镜像</span><span class="token comment">#总结：export不能根据镜像层回滚，commit和save可以进行回滚，但是镜像大小比export大。</span><span class="token comment">#=================================================================================================</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl <span class="token builtin class-name">enable</span> <span class="token function">docker</span> //开机自启<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="2-搭建私有镜像仓库"><a href="#2-搭建私有镜像仓库" class="headerlink" title="2.搭建私有镜像仓库"></a>2.搭建私有镜像仓库</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> pull registry <span class="token comment">#拉取私有仓库镜像</span><span class="token function">docker</span> run <span class="token parameter variable">--name</span> registry <span class="token parameter variable">-p5000:5000</span> <span class="token parameter variable">-d</span> <span class="token parameter variable">-v</span> /mydata/registry/:/tmp/registry <span class="token parameter variable">--privileged</span><span class="token operator">=</span>true registry <span class="token comment">#运行</span><span class="token function">docker</span> tag redis <span class="token number">172.31</span>.171.217:5000/redis:1.0 <span class="token comment">#打个标签将镜像更改为指定格式，docker tag 要上传的镜像:版本号 本机host:5000/自定义名:版本号</span><span class="token comment">#docker默认不允许使用https的方式添加镜像，通过配置取消这个限制</span><span class="token comment">#===========</span><span class="token function">vim</span> /etc/docker/daemon.json <span class="token punctuation">&#123;</span><span class="token string">"registry-mirrors"</span>:<span class="token punctuation">[</span><span class="token string">"https://aa25jngu..mirror.aliyuncs.com"</span><span class="token punctuation">]</span>,<span class="token comment">#配置源</span><span class="token string">"insecure-registries"</span>:<span class="token punctuation">[</span><span class="token string">"172.31.171.217:5000"</span><span class="token punctuation">]</span> <span class="token comment">#添加可信任地址</span><span class="token punctuation">&#125;</span>systemctl restart <span class="token function">docker</span> 重启docker<span class="token comment">#=============</span><span class="token function">docker</span> push <span class="token number">172.31</span>.171.217:5000/redis:1.0  <span class="token comment">#推送，已经打包好了标签直接 docker push 加镜像名即可</span><span class="token function">curl</span> <span class="token parameter variable">-XGET</span> http://172.31.171.217:5000/v2/_catalog <span class="token comment">#查看仓库是否推送成功</span><span class="token function">docker</span> pull <span class="token number">172.31</span>.171.217:5000/redis:1.0  <span class="token comment">#拉取</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="3-示例"><a href="#3-示例" class="headerlink" title="3.示例"></a>3.示例</h1><h2 id="3-1mysql"><a href="#3-1mysql" class="headerlink" title="3.1mysql"></a>3.1mysql</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run <span class="token parameter variable">-p</span> <span class="token number">3306</span>:3306 <span class="token parameter variable">--name</span> mysql <span class="token punctuation">\</span><span class="token parameter variable">--privileged</span><span class="token operator">=</span>true <span class="token punctuation">\</span><span class="token parameter variable">-v</span> /mydata/mysql/log:/var/log/mysql <span class="token punctuation">\</span><span class="token parameter variable">-v</span> /mydata/mysql/data:/var/lib/mysql <span class="token punctuation">\</span> <span class="token parameter variable">-v</span> /mydata/mysql/conf:/etc/mysql <span class="token punctuation">\</span> <span class="token parameter variable">-e</span> <span class="token assign-left variable">MYSQL_ROOT_PASSWORD</span><span class="token operator">=</span><span class="token number">123456</span> <span class="token punctuation">\</span><span class="token parameter variable">-d</span> mysql:5.7<span class="token comment">#参数说明======</span><span class="token parameter variable">-p</span> <span class="token number">3307</span>:3306：将容器的 <span class="token number">3306</span> 端口映射到主机的 <span class="token number">3307</span> 端口<span class="token parameter variable">-v</span> /mydata/mysql/conf:/etc/mysql：将配置文件夹挂在到主机<span class="token parameter variable">-v</span> /mydata/mysql/log:/var/log/mysql：将日志文件夹挂载到主机<span class="token parameter variable">-v</span> /mydata/mysql/data:/var/lib/mysql/：将数据文件夹挂载到主机，这个数据就是表和库<span class="token parameter variable">-e</span> <span class="token assign-left variable">MYSQL_ROOT_PASSWORD</span><span class="token operator">=</span><span class="token number">123456</span>：初始化 root的密码为123456<span class="token comment">#============</span><span class="token comment">#解决中文乱码====</span><span class="token comment">#在映射文件中conf目录中，创建一个配置文件，比如my.cnf。最好先创建好了文件，在让容器运行</span><span class="token function">vim</span> my.cnf<span class="token comment">#输入</span><span class="token punctuation">[</span>mysqld<span class="token punctuation">]</span>character-set-server<span class="token operator">=</span>utf8 <span class="token punctuation">[</span>client<span class="token punctuation">]</span>default-character-set<span class="token operator">=</span>utf8 <span class="token punctuation">[</span>mysql<span class="token punctuation">]</span>default-character-set<span class="token operator">=</span>utf8<span class="token comment">#==============</span><span class="token comment">#</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-2主从复制版mysql"><a href="#3-2主从复制版mysql" class="headerlink" title="3.2主从复制版mysql"></a>3.2<strong>主从复制版mysql</strong></h3><p><strong>主节点容器配置</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run <span class="token parameter variable">-p</span> <span class="token number">3307</span>:3306 <span class="token parameter variable">--name</span> mysql-master <span class="token punctuation">\</span><span class="token parameter variable">--privileged</span><span class="token operator">=</span>true <span class="token punctuation">\</span><span class="token parameter variable">-v</span> /mydata/mysql/master/log:/var/log/mysql <span class="token punctuation">\</span><span class="token parameter variable">-v</span> /mydata/mysql/master/data:/var/lib/mysql <span class="token punctuation">\</span><span class="token parameter variable">-v</span> /mydata/mysql/master/conf:/etc/mysql <span class="token punctuation">\</span><span class="token parameter variable">-e</span> <span class="token assign-left variable">MYSQL_ROOT_PASSWORD</span><span class="token operator">=</span><span class="token number">123456</span> <span class="token punctuation">\</span><span class="token parameter variable">-d</span> mysql:5.7修改 master 基本配置<span class="token function">vim</span> /mydata/mysql/master/conf/my.cnf<span class="token punctuation">[</span>client<span class="token punctuation">]</span>default-character-set<span class="token operator">=</span>utf8<span class="token punctuation">[</span>mysql<span class="token punctuation">]</span>default-character-set<span class="token operator">=</span>utf8<span class="token punctuation">[</span>mysqld<span class="token punctuation">]</span><span class="token assign-left variable">init_connect</span><span class="token operator">=</span><span class="token string">'SET collation_connection = utf8_unicode_ci'</span> <span class="token assign-left variable">init_connect</span><span class="token operator">=</span><span class="token string">'SET NAMES utf8'</span> character-set-server<span class="token operator">=</span>utf8collation-server<span class="token operator">=</span>utf8_unicode_ciskip-character-set-client-handshakeskip-name-resolve<span class="token comment">#注意：skip-name-resolve 一定要加，不然连接 mysql 会超级慢</span><span class="token comment">#添加 master 主从复制部分配置</span><span class="token assign-left variable">server_id</span><span class="token operator">=</span><span class="token number">1</span> <span class="token comment">#server_id,同一局域网需要唯一</span>log-bin<span class="token operator">=</span>mysql-bin <span class="token comment">#开启二进制日志功能</span>read-only<span class="token operator">=</span><span class="token number">0</span> <span class="token comment">#</span><span class="token assign-left variable">binlog_format</span><span class="token operator">=</span>mixed <span class="token comment">#指定二进制格式 </span><span class="token assign-left variable">expire_logs_days</span><span class="token operator">=</span><span class="token number">7</span> <span class="token comment">#二进制日志过期时间，默认为0表示不自动清理</span><span class="token comment">#binlog-do-db=lfy #可以指定需要同步的库，也可以直接不指定</span><span class="token assign-left variable">slave_skip_errors</span><span class="token operator">=</span><span class="token number">1062</span> <span class="token comment">#跳过主从复制中遇到的所有错误或指定类型错误，避免slave复制中断，1062是主键重复错误</span><span class="token comment">#不同步的库</span>replicate-ignore-db<span class="token operator">=</span>mysql replicate-ignore-db<span class="token operator">=</span>sysreplicate-ignore-db<span class="token operator">=</span>information_schemareplicate-ignore-db<span class="token operator">=</span>performance_schema<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>启动如果报错</p><pre class="line-numbers language-log" data-language="log"><code class="language-log"><span class="token date number">2023-01-25</span> <span class="token time number">13:11:12+00:00</span> <span class="token punctuation">[</span><span class="token level error important">ERROR</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>Entrypoint<span class="token punctuation">]</span><span class="token operator">:</span> mysqld failed while attempting to check config        <span class="token property">command was:</span> mysqld <span class="token operator">-</span><span class="token operator">-</span>verbose <span class="token operator">-</span><span class="token operator">-</span>help <span class="token operator">-</span><span class="token operator">-</span>log<span class="token operator">-</span>bin<span class="token operator">-</span>index<span class="token operator">=</span><span class="token operator">/</span>tmp<span class="token operator">/</span>tmp<span class="token punctuation">.</span>qD54ZxZd8y        <span class="token property">mysqld:</span> Can't read dir of <span class="token string">'/etc/mysql/conf.d/'</span> <span class="token operator">(</span>Errcode<span class="token operator">:</span> <span class="token number">2</span> <span class="token operator">-</span> No such file or directory<span class="token operator">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>在本机conf目录下加上 conf.d和conf.mysql.d两个目录。配置文件放conf.d目录下</p></li></ul><p><strong>从容器配置</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#启动slave  省略</span>修改配置<span class="token function">vim</span> /mydata/mysql/slave/conf/my.cnf<span class="token punctuation">[</span>client<span class="token punctuation">]</span>default-character-set<span class="token operator">=</span>utf8<span class="token punctuation">[</span>mysql<span class="token punctuation">]</span>default-character-set<span class="token operator">=</span>utf8<span class="token punctuation">[</span>mysqld<span class="token punctuation">]</span><span class="token assign-left variable">init_connect</span><span class="token operator">=</span><span class="token string">'SET collation_connection = utf8_unicode_ci'</span> <span class="token assign-left variable">init_connect</span><span class="token operator">=</span><span class="token string">'SET NAMES utf8'</span> character-set-server<span class="token operator">=</span>utf8collation-server<span class="token operator">=</span>utf8_unicode_ciskip-character-set-client-handshakeskip-name-resolve<span class="token comment">#注意：skip-name-resolve 一定要加，不然连接 mysql 会超级慢</span><span class="token comment">#添加 slave 主从复制部分配置</span><span class="token assign-left variable">server_id</span><span class="token operator">=</span><span class="token number">2</span> <span class="token comment">#server_id,同一局域网需要唯一</span>log-bin<span class="token operator">=</span>mysql-bin <span class="token comment">#开启二进制日志功能</span>read-only<span class="token operator">=</span><span class="token number">1</span> <span class="token comment">#设置为只读，除了拥有super权限的用户除外</span><span class="token assign-left variable">binlog_format</span><span class="token operator">=</span>mixed <span class="token comment">#指定二进制格式 </span><span class="token assign-left variable">expire_logs_days</span><span class="token operator">=</span><span class="token number">7</span> <span class="token comment">#二进制日志过期时间，默认为0表示不自动清理</span><span class="token comment">#binlog-do-db=lfy #可以指定需要同步的库，也可以直接不指定</span><span class="token assign-left variable">log_slave_updates</span><span class="token operator">=</span><span class="token number">1</span> <span class="token comment">#将复制事件写进日志中</span><span class="token assign-left variable">relay_log</span><span class="token operator">=</span>mall-mysql-relay-bin <span class="token comment">#配置中继日志</span><span class="token assign-left variable">slave_skip_errors</span><span class="token operator">=</span><span class="token number">1062</span> <span class="token comment">#跳过主从复制中遇到的所有错误或指定类型错误，避免slave复制中断，1062是主键重复错误</span><span class="token comment">#不同步的库</span>replicate-ignore-db<span class="token operator">=</span>mysql replicate-ignore-db<span class="token operator">=</span>sysreplicate-ignore-db<span class="token operator">=</span>information_schemareplicate-ignore-db<span class="token operator">=</span>performance_schema<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>创建授权连接的账号</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> mysql /bin/bash<span class="token comment">#2、进入 mysql 内部 （mysql –uroot -p）</span><span class="token comment">#1）、授权 root 可以远程访问（ 主从无关，为了方便我们远程连接 mysql）</span>grant all privileges on *.* to <span class="token string">'root'</span>@<span class="token string">'%'</span> identified by <span class="token string">'123456'</span> with grant option<span class="token punctuation">;</span>flush privileges<span class="token punctuation">;</span><span class="token comment">#2）、添加用来同步的用户</span>GRANT REPLICATION SLAVE ON *.* to <span class="token string">'lfyslave'</span>@<span class="token string">'%'</span> identified by <span class="token string">'123456'</span><span class="token punctuation">;</span><span class="token comment">#3、查看 master 状态</span>show master status<span class="token punctuation">;</span> <span class="token comment">#记住这个状态的日志文件，需要给从节点进行指定日志，从节点根据日志来复制主节点的数据</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>配置 slaver 同步 master 数据</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#1、进入 slaver 容器</span><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> mysql-slaver-01 /bin/bash<span class="token comment">#2、进入 mysql 内部（mysql –uroot -p）</span><span class="token comment">#1）、授权 root 可以远程访问（ 主从无关，为了方便我们远程连接 mysql）</span>grant all privileges on *.* to <span class="token string">'root'</span>@<span class="token string">'%'</span> identified by <span class="token string">'123456'</span> with grant option<span class="token punctuation">;</span>flush privileges<span class="token punctuation">;</span><span class="token comment">#2）、设置主库连接。master_connect_retry连接重试(秒),master_log_file从节点根据哪个日志进行复制，master_log_pos从节点从哪里开始复制</span>change master to <span class="token assign-left variable">master_host</span><span class="token operator">=</span><span class="token string">'ip'</span>,master_user<span class="token operator">=</span><span class="token string">'lfyslave'</span>,master_password<span class="token operator">=</span><span class="token string">'123456'</span>,master_log_file<span class="token operator">=</span><span class="token string">'mysql-bin.000001'</span>,master_log_pos<span class="token operator">=</span><span class="token number">0</span>,master_port<span class="token operator">=</span><span class="token number">3307</span>,master_connect_retry<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">;</span><span class="token comment">#3）、启动从库同步</span>start slave<span class="token punctuation">;</span><span class="token comment">#4）、查看从库状态</span>show slave status<span class="token punctuation">\</span>G<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>常见问题，当在slave中进行写操作时会造成数据不一致导致的错误</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#1、先停掉slave</span>mysql<span class="token operator">></span> stop slave<span class="token punctuation">;</span><span class="token comment">#2、跳过错误步数，后面步数可变</span>mysql<span class="token operator">></span> <span class="token builtin class-name">set</span> global <span class="token assign-left variable">sql_slave_skip_counter</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">#3、再启动slave</span>mysql<span class="token operator">></span> start slave<span class="token punctuation">;</span><span class="token comment">#4、查看同步状态</span>mysql<span class="token operator">></span> show slave status<span class="token punctuation">\</span>G<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>最好创建一个只有读权限的用户用于连接从节点</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">#1、进入 slaver 容器docker exec -it mysql-slaver-01 &#x2F;bin&#x2F;bash#2、进入 mysql 内部（mysql –uroot -p）create user &#39;lfy&#39;@&#39;%&#39; identified by &#39;123456&#39;;grant select on *.* to &#39;lfy&#39;@&#39;%&#39;; #给lfy用户select的权限，%表示任意ip可连接 *.*表示给于所有库中所有表，如果指定表例如可以指定mysql.user表 grant SHOW VIEW on mysql.user to &#39;lfy&#39;@&#39;%&#39;;#1）、授权 lfy 可以远程访问grant all privileges on *.* to &#39;lfy&#39;@&#39;%&#39; identified by &#39;123456&#39; with grant option;flush privileges;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="redis"><a href="#redis" class="headerlink" title="redis"></a>redis</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run <span class="token parameter variable">--name</span> mr <span class="token parameter variable">-p</span> <span class="token number">6379</span>:6379 <span class="token parameter variable">-v</span> /mydata/redis/data:/data <span class="token parameter variable">-v</span> /mydata/redis/conf/redis.conf:/etc/redis/redis.conf <span class="token parameter variable">-d</span> redis redis-server /etc/redis/redis.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="nacos"><a href="#nacos" class="headerlink" title="nacos"></a>nacos</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">-p</span> <span class="token number">8848</span>:8848 <span class="token punctuation">\</span><span class="token parameter variable">--name</span> nacos2.0.3 <span class="token punctuation">\</span><span class="token parameter variable">-e</span> <span class="token assign-left variable">MODE</span><span class="token operator">=</span>standalone <span class="token punctuation">\</span><span class="token parameter variable">-e</span> <span class="token assign-left variable">SPRING_DATASOURCE_PLATFORM</span><span class="token operator">=</span>mysql <span class="token punctuation">\</span><span class="token parameter variable">-e</span> <span class="token assign-left variable">MYSQL_SERVICE_HOST</span><span class="token operator">=</span><span class="token number">192.168</span>.159.136  <span class="token punctuation">\</span><span class="token parameter variable">-e</span> <span class="token assign-left variable">MYSQL_SERVICE_PORT</span><span class="token operator">=</span><span class="token number">3306</span> <span class="token punctuation">\</span><span class="token parameter variable">-e</span> <span class="token assign-left variable">MYSQL_SERVICE_DB_NAME</span><span class="token operator">=</span>nacos <span class="token punctuation">\</span><span class="token parameter variable">-e</span> <span class="token assign-left variable">MYSQL_SERVICE_USER</span><span class="token operator">=</span>root <span class="token punctuation">\</span><span class="token parameter variable">-e</span> <span class="token assign-left variable">MYSQL_SERVICE_PASSWORD</span><span class="token operator">=</span><span class="token number">123456</span> <span class="token punctuation">\</span><span class="token parameter variable">-v</span> /mydata/nacos/conf:/home/nacos/conf <span class="token punctuation">\</span><span class="token parameter variable">-v</span> /mydata/nacos/logs/logs:/home/nacos/logs <span class="token punctuation">\</span><span class="token parameter variable">-v</span> /mydata/nacos/data/data:/home/nacos/data <span class="token punctuation">\</span>nacos/nacos-server:v2.0.3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">docker  run --name nacos -p 8848:8848 \--privileged&#x3D;true \--restart&#x3D;always \-e JVM_XMS&#x3D;128m \-e JVM_XMX&#x3D;128m \-e MODE&#x3D;standalone \-e PREFER_HOST_MODE&#x3D;hostname \-v &#x2F;mydata&#x2F;nacos&#x2F;logs:&#x2F;home&#x2F;nacos&#x2F;logs \-v &#x2F;mydata&#x2F;nacos&#x2F;conf&#x2F;application.properties:&#x2F;home&#x2F;nacos&#x2F;conf&#x2F;application.properties \-d nacos&#x2F;nacos-server:v2.0.3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="nginx"><a href="#nginx" class="headerlink" title="nginx"></a>nginx</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> pull nginx:1.10<span class="token function">docker</span> run <span class="token parameter variable">-p</span> <span class="token number">80</span>:80 <span class="token parameter variable">--name</span> nginx <span class="token parameter variable">-d</span> nginx:1.10<span class="token comment">#创建文件夹用于映射并且复制出来nginx容器里的文件</span><span class="token builtin class-name">cd</span> /mydata<span class="token function">mkdir</span> nginx<span class="token builtin class-name">cd</span> nginx<span class="token function">docker</span> container <span class="token function">cp</span> nginx:/etc/nginx conf <span class="token comment">#把配置文件复制出来一份 改名为conf</span><span class="token comment">#docker stop nginx   docker rm nginx 删除前面创建出来的容器重新创建</span><span class="token function">docker</span> run <span class="token parameter variable">--name</span> nginx <span class="token parameter variable">-p</span> <span class="token number">80</span>:80 <span class="token parameter variable">-v</span> /mydata/nginx/html:/usr/share/nginx/html <span class="token parameter variable">-v</span> /mydata/nginx/logs:/var/log/nginx <span class="token parameter variable">-v</span> /mydata/nginx/conf:/etc/nginx <span class="token parameter variable">-d</span> nginx:1.10之后到映射文件的html文件中，创建一个index.html就可以通过ip访问了<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4.DockerFile</p>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> linux </tag>
            
            <tag> 容器化 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
